---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.podcast_queue_item

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.podcast_queue_item)
------------------------------
--                                   Table "public.podcast_queue_item"
--    Column   |           Type           | Collation | Nullable |                Default                
-- ------------+--------------------------+-----------+----------+---------------------------------------
--  id         | text                     |           | not null | generate_typed_uuid('podqitem'::text)
--  for_user   | text                     |           | not null | 
--  podcast_id | text                     |           | not null | 
--  position   | double precision         |           | not null | 
--  created_at | timestamp with time zone |           |          | now()
-- Indexes:
--     "podcast_queue_item_pkey" PRIMARY KEY, btree (id)
--     "idx_podcast_queue_item_user_position" btree (for_user, "position")
--     "podcast_queue_item_for_user_position_key" UNIQUE CONSTRAINT, btree (for_user, "position")
-- Foreign-key constraints:
--     "podcast_queue_item_for_user_fkey" FOREIGN KEY (for_user) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "podcast_queue_item_podcast_id_fkey" FOREIGN KEY (podcast_id) REFERENCES podcast(id) ON DELETE CASCADE
-- Policies:
--     POLICY "podcast_queue_item DELETE" FOR DELETE
--       USING (((for_user = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "podcast_queue_item INSERT" FOR INSERT
--       WITH CHECK (((for_user = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "podcast_queue_item SELECT" FOR SELECT
--       USING (((for_user = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "podcast_queue_item UPDATE" FOR UPDATE
--       USING (((for_user = (current_rsn_user_id())::text) OR is_admin()))
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.podcast_queue_item)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.podcast_queue_item)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.7 (Ubuntu 15.7-1.pgdg20.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: podcast_queue_item; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.podcast_queue_item (
    id text DEFAULT public.generate_typed_uuid('podqitem'::text) NOT NULL,
    for_user text NOT NULL,
    podcast_id text NOT NULL,
    "position" double precision NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.podcast_queue_item OWNER TO postgres;

--
-- Name: podcast_queue_item podcast_queue_item_for_user_position_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_queue_item
    ADD CONSTRAINT podcast_queue_item_for_user_position_key UNIQUE (for_user, "position");


--
-- Name: podcast_queue_item podcast_queue_item_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_queue_item
    ADD CONSTRAINT podcast_queue_item_pkey PRIMARY KEY (id);


--
-- Name: idx_podcast_queue_item_user_position; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_podcast_queue_item_user_position ON public.podcast_queue_item USING btree (for_user, "position");


--
-- Name: podcast_queue_item podcast_queue_item_for_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_queue_item
    ADD CONSTRAINT podcast_queue_item_for_user_fkey FOREIGN KEY (for_user) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: podcast_queue_item podcast_queue_item_podcast_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_queue_item
    ADD CONSTRAINT podcast_queue_item_podcast_id_fkey FOREIGN KEY (podcast_id) REFERENCES public.podcast(id) ON DELETE CASCADE;


--
-- Name: podcast_queue_item; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.podcast_queue_item ENABLE ROW LEVEL SECURITY;

--
-- Name: podcast_queue_item podcast_queue_item DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_queue_item DELETE" ON public.podcast_queue_item FOR DELETE USING (((for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: podcast_queue_item podcast_queue_item INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_queue_item INSERT" ON public.podcast_queue_item FOR INSERT WITH CHECK (((for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: podcast_queue_item podcast_queue_item SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_queue_item SELECT" ON public.podcast_queue_item FOR SELECT USING (((for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: podcast_queue_item podcast_queue_item UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_queue_item UPDATE" ON public.podcast_queue_item FOR UPDATE USING (((for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: TABLE podcast_queue_item; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.podcast_queue_item TO anon;
GRANT ALL ON TABLE public.podcast_queue_item TO authenticated;
GRANT ALL ON TABLE public.podcast_queue_item TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.podcast_queue_item)
---------------------------------------------------------------------------




---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Function: public.reorder_podcast_queue_item

---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (FUNCTION: public.reorder_podcast_queue_item)
------------------------------
CREATE OR REPLACE FUNCTION public.reorder_podcast_queue_item(p_item_id text, p_new_position double precision)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    v_for_user TEXT;
    v_current_position FLOAT;
    v_next_position FLOAT;
BEGIN
    v_for_user := public.current_rsn_user_id();

    -- Get the current position of the item
    SELECT position INTO v_current_position
    FROM public.podcast_queue_item
    WHERE id = p_item_id AND for_user = v_for_user;

    IF v_current_position IS NULL THEN
        RAISE EXCEPTION 'Item not found or not owned by the current user';
    END IF;

    -- Find the position of the item immediately after the new position
    SELECT position INTO v_next_position
    FROM public.podcast_queue_item
    WHERE for_user = v_for_user AND position > p_new_position
    ORDER BY position ASC
    LIMIT 1;

    -- Calculate the new position
    IF v_next_position IS NULL THEN
        v_next_position := p_new_position + 1;
    ELSE
        v_next_position := (p_new_position + v_next_position) / 2;
    END IF;

    -- Update the item's position
    UPDATE public.podcast_queue_item
    SET position = v_next_position
    WHERE id = p_item_id AND for_user = v_for_user;
END;
$function$



------------------------------
-- END: PG_DUMP RESULT (FUNCTION: public.reorder_podcast_queue_item)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Function: public.pop_from_podcast_queue

---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (FUNCTION: public.pop_from_podcast_queue)
------------------------------
CREATE OR REPLACE FUNCTION public.pop_from_podcast_queue()
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    v_next_podcast_id TEXT;
    v_for_user TEXT;
BEGIN
    -- Start an explicit transaction
    BEGIN
        -- Get the current user
        v_for_user := public.current_rsn_user_id();

        -- Get the next podcast in the queue and delete it
        DELETE FROM public.podcast_queue_item
        WHERE id = (
            SELECT id
            FROM public.podcast_queue_item
            WHERE for_user = v_for_user
            ORDER BY position ASC
            LIMIT 1
            FOR UPDATE SKIP LOCKED
        )
        RETURNING podcast_id INTO v_next_podcast_id;

        -- If we get here without errors, the transaction will be committed
    EXCEPTION
        WHEN OTHERS THEN
            -- If an error occurs, the transaction will be rolled back
            RAISE;
    END;

    RETURN v_next_podcast_id;
END;
$function$



------------------------------
-- END: PG_DUMP RESULT (FUNCTION: public.pop_from_podcast_queue)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Function: public.add_to_podcast_queue

---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (FUNCTION: public.add_to_podcast_queue)
------------------------------
CREATE OR REPLACE FUNCTION public.add_to_podcast_queue(p_topic text, p_special_instructions text, p_podcast_type text, p_desired_position double precision DEFAULT NULL::double precision, p_for_skill_path text[] DEFAULT NULL::text[], p_from_podcast_id text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    v_new_podcast_id TEXT;
    v_for_user TEXT;
    v_position FLOAT;
    v_max_position FLOAT;
BEGIN
    -- Get the current user
    v_for_user := public.current_rsn_user_id();

    -- Create a new podcast based on the given topic
    INSERT INTO public.podcast (
        for_user,
        title,
        topic,
        special_instructions,
        podcast_type,
        created_by,
        updated_by,
        for_skill_path
    ) VALUES (
        v_for_user,
        p_topic,
        p_topic,
        p_special_instructions,
        p_podcast_type,
        v_for_user,
        v_for_user,
        p_for_skill_path
    ) RETURNING id INTO v_new_podcast_id;

    IF p_from_podcast_id IS NOT NULL THEN
        -- Create duplicate resources for every resource that references the original podcast
        INSERT INTO public.resource (
            parent_podcast_id,
            child_snip_id,
            child_page_id,
            metadata,
            created_by,
            updated_by
        )
        SELECT 
            v_new_podcast_id,
            r.child_snip_id,
            r.child_page_id,
            r.metadata,
            v_for_user,
            v_for_user
        FROM public.resource r
        WHERE r.parent_podcast_id = p_from_podcast_id;
    END IF;

    -- Determine position
    IF p_desired_position IS NULL THEN
        SELECT COALESCE(MAX(position), 0) + 1 INTO v_position
        FROM public.podcast_queue_item
        WHERE for_user = v_for_user;
    ELSE
        -- Find the position of the item immediately after the desired position
        SELECT position INTO v_max_position
        FROM public.podcast_queue_item
        WHERE for_user = v_for_user AND position > p_desired_position
        ORDER BY position ASC
        LIMIT 1;

        IF v_max_position IS NULL THEN
            v_position := p_desired_position + 1;
        ELSE
            v_position := (p_desired_position + v_max_position) / 2;
        END IF;
    END IF;

    -- Add the new podcast to the queue
    INSERT INTO public.podcast_queue_item (for_user, podcast_id, position)
    VALUES (v_for_user, v_new_podcast_id, v_position);

    RETURN v_new_podcast_id;
END;
$function$



------------------------------
-- END: PG_DUMP RESULT (FUNCTION: public.add_to_podcast_queue)
---------------------------------------------------------------------------





