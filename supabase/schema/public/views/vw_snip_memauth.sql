---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- View: public.vw_snip_memauth

---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (VIEW: public.vw_snip_memauth)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: vw_snip_memauth; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_snip_memauth AS
 SELECT s.id AS snip_id,
    s._owner AS principal_id,
    'user'::public.agent_type AS principal_type,
    ARRAY['snip.SELECT'::text, 'snip.INSERT'::text, 'snip.UPDATE'::text, 'snip.DELETE'::text] AS permissions,
    false AS is_public
   FROM public.snip s
UNION ALL
 SELECT s.id AS snip_id,
    vcm.principal_id,
    vcm.principal_type,
    array_remove(ARRAY[
        CASE
            WHEN ('resource.SELECT'::text = ANY ((vcm.permissions)::text[])) THEN 'snip.SELECT'::text
            ELSE NULL::text
        END,
        CASE
            WHEN ('resource.INSERT'::text = ANY ((vcm.permissions)::text[])) THEN 'snip.INSERT'::text
            ELSE NULL::text
        END,
        CASE
            WHEN ('resource.UPDATE'::text = ANY ((vcm.permissions)::text[])) THEN 'snip.UPDATE'::text
            ELSE NULL::text
        END,
        CASE
            WHEN ('resource.DELETE'::text = ANY ((vcm.permissions)::text[])) THEN 'snip.DELETE'::text
            ELSE NULL::text
        END], NULL::text) AS permissions,
    vcm.is_public
   FROM ((public.snip s
     JOIN public.resource r ON ((r.child_snip_id = s.id)))
     JOIN public.vw_course_memauth vcm ON ((vcm.course_id = r.parent_course_id)))
UNION ALL
 SELECT s.id AS snip_id,
    'anonymous'::text AS principal_id,
    'user'::public.agent_type AS principal_type,
    ARRAY[]::text[] AS permissions,
    false AS is_public
   FROM public.snip s
  WHERE public.is_admin();


ALTER TABLE public.vw_snip_memauth OWNER TO postgres;

--
-- Name: VIEW vw_snip_memauth; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.vw_snip_memauth IS 'Shows permissions for snips - includes permissions inherited from courses through resources';


--
-- Name: TABLE vw_snip_memauth; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.vw_snip_memauth TO anon;
GRANT ALL ON TABLE public.vw_snip_memauth TO authenticated;
GRANT ALL ON TABLE public.vw_snip_memauth TO service_role;


--
-- PostgreSQL database dump complete
--


------------------------------
-- END: PG_DUMP RESULT (VIEW: public.vw_snip_memauth)
---------------------------------------------------------------------------
