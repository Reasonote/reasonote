---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Function: public.get_linked_skills

---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (FUNCTION: public.get_linked_skills)
------------------------------
CREATE OR REPLACE FUNCTION public.get_linked_skills(user_id text, input_skill_id text, direction text DEFAULT 'downstream'::text)
 RETURNS TABLE(skill_id text, skill_name text, skill_emoji text, skill_links jsonb[])
 LANGUAGE sql
AS $function$
WITH RECURSIVE traversal (skill_id, skill_name, skill_emoji, visited, path_links) AS (
    -- Base case: start from the input skill
    SELECT 
        s.id, 
        s._name,
        s.emoji,
        ARRAY[s.id],
        ARRAY[]::text[]
    FROM skill s
    WHERE s.id = input_skill_id

    UNION

    -- Recursive step: follow links based on direction
    SELECT 
        s2.id,
        s2._name,
        s2.emoji,
        visited || s2.id,
        path_links || sl.id
    FROM traversal t
    JOIN skill_link sl ON (
        (direction = 'downstream' AND sl.upstream_skill = t.skill_id)
        OR (direction = 'upstream' AND sl.downstream_skill = t.skill_id)
    )
    JOIN skill s2 ON (
        (direction = 'downstream' AND s2.id = sl.downstream_skill)
        OR (direction = 'upstream' AND s2.id = sl.upstream_skill)
    )
    WHERE s2.id <> ALL(t.visited)
), all_traversed_links AS (
    -- Collect all links that were traversed in any path
    SELECT DISTINCT unnest(path_links) as link_id
    FROM traversal
), unique_skills AS (
    -- Get unique skills and their valid path links
    SELECT DISTINCT ON (skill_id) 
        skill_id, 
        skill_name,
        skill_emoji
    FROM traversal
), skill_links_aggregated AS (
    -- Aggregate all skill links for each unique skill
    SELECT 
        us.skill_id,
        us.skill_name,
        us.skill_emoji,
        (
            SELECT COALESCE(array_agg(DISTINCT jsonb_build_object(
                'to', CASE 
                    WHEN direction = 'downstream' THEN sl.downstream_skill
                    ELSE sl.upstream_skill
                END,
                'id', sl.id
            )), ARRAY[]::jsonb[])
            FROM skill_link sl
            JOIN all_traversed_links atl ON sl.id = atl.link_id
            WHERE (
                (direction = 'downstream' AND sl.upstream_skill = us.skill_id)
                OR (direction = 'upstream' AND sl.downstream_skill = us.skill_id)
            )
        ) AS skill_links
    FROM unique_skills us
)
SELECT 
    sla.skill_id,
    sla.skill_name,
    sla.skill_emoji,
    sla.skill_links
FROM skill_links_aggregated sla;
$function$



------------------------------
-- END: PG_DUMP RESULT (FUNCTION: public.get_linked_skills)
---------------------------------------------------------------------------
