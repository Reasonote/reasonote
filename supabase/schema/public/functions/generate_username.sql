---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Function: public.generate_username

---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (FUNCTION: public.generate_username)
------------------------------
CREATE OR REPLACE FUNCTION public.generate_username(given_name text, family_name text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
    base_username TEXT;
    test_username TEXT;
    suffix_num INTEGER;
    attempts INTEGER := 0;
    MAX_ATTEMPTS CONSTANT INTEGER := 10;
BEGIN
    -- Simplified core logic
    base_username := CASE
        WHEN (given_name IS NULL OR given_name = '') AND (family_name IS NULL OR family_name = '') THEN 'user'
        WHEN family_name IS NULL OR family_name = '' THEN REGEXP_REPLACE(given_name, '[^[:alnum:]_]', '_', 'g')
        WHEN given_name IS NULL OR given_name = '' THEN REGEXP_REPLACE(family_name, '[^[:alnum:]_]', '_', 'g')
        ELSE LEFT(REGEXP_REPLACE(given_name, '[^[:alnum:]_]', '_', 'g'), 1) || 
             REGEXP_REPLACE(family_name, '[^[:alnum:]_]', '_', 'g')
    END;

    -- Lowercase after processing
    base_username := LOWER(base_username);
    
    -- Ensure minimum length
    IF LENGTH(base_username) < 3 THEN
        base_username := base_username || 'user';
    END IF;
    
    -- First try the base username without any suffix
    IF NOT EXISTS (SELECT 1 FROM user_profile WHERE username = base_username) THEN
        RETURN base_username;
    END IF;
    
    -- If there's a conflict, then try with suffixes
    LOOP
        -- Generate random number between 1 and 9999
        suffix_num := floor(random() * 9999 + 1)::INTEGER;
        test_username := base_username || suffix_num::TEXT;
        
        -- Exit if we found an unused username or hit max attempts
        EXIT WHEN NOT EXISTS (SELECT 1 FROM user_profile WHERE username = test_username) 
                  OR attempts >= MAX_ATTEMPTS;
                  
        attempts := attempts + 1;
    END LOOP;
    
    -- If we hit max attempts, fall back to timestamp-based suffix
    IF attempts >= MAX_ATTEMPTS THEN
        test_username := base_username || floor(extract(epoch from now()))::TEXT;
    END IF;
    
    RETURN test_username;
END;
$function$



------------------------------
-- END: PG_DUMP RESULT (FUNCTION: public.generate_username)
---------------------------------------------------------------------------
