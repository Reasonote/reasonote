---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.skill_module

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.skill_module)
------------------------------
--                                       Table "public.skill_module"
--     Column     |           Type           | Collation | Nullable |               Default               
-- ---------------+--------------------------+-----------+----------+-------------------------------------
--  id            | text                     |           | not null | generate_typed_uuid('sklmod'::text)
--  _name         | text                     |           | not null | 
--  position      | integer                  |           | not null | 
--  root_skill_id | text                     |           |          | 
--  children_ids  | text[]                   |           |          | 
--  created_date  | timestamp with time zone |           | not null | now()
--  updated_date  | timestamp with time zone |           | not null | now()
--  created_by    | typed_uuid               |           |          | 
--  updated_by    | typed_uuid               |           |          | 
-- Indexes:
--     "skill_module_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "skill_module__id__check_prefix" CHECK (is_valid_typed_uuid('sklmod'::text, id::typed_uuid))
--     "skill_module_children_ids_check" CHECK (validate_skill_module_children_ids(children_ids))
-- Foreign-key constraints:
--     "skill_module_root_skill_id_fkey" FOREIGN KEY (root_skill_id) REFERENCES skill(id) ON DELETE CASCADE
-- Policies:
--     POLICY "skill_module DELETE" FOR DELETE
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "skill_module INSERT" FOR INSERT
--       WITH CHECK ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "skill_module SELECT" FOR SELECT
--       USING (true)
--     POLICY "skill_module UPDATE" FOR UPDATE
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin()))
-- Triggers:
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON skill_module FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.skill_module)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.skill_module)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: skill_module; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.skill_module (
    id text DEFAULT public.generate_typed_uuid('sklmod'::text) NOT NULL,
    _name text NOT NULL,
    "position" integer NOT NULL,
    root_skill_id text,
    children_ids text[],
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    CONSTRAINT skill_module__id__check_prefix CHECK (public.is_valid_typed_uuid('sklmod'::text, (id)::public.typed_uuid)),
    CONSTRAINT skill_module_children_ids_check CHECK (public.validate_skill_module_children_ids(children_ids))
);


ALTER TABLE public.skill_module OWNER TO postgres;

--
-- Name: TABLE skill_module; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.skill_module IS 'Stores module and submodule information for organizing lessons';


--
-- Name: COLUMN skill_module._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill_module._name IS 'Name of the module or submodule';


--
-- Name: COLUMN skill_module."position"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill_module."position" IS 'Position of this module/submodule within its parent''s children';


--
-- Name: COLUMN skill_module.children_ids; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill_module.children_ids IS 'Array of IDs referencing either skill_module (sklmod_ prefix) or skill (skill_ prefix) table';


--
-- Name: skill_module skill_module_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill_module
    ADD CONSTRAINT skill_module_pkey PRIMARY KEY (id);


--
-- Name: skill_module run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.skill_module FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: skill_module skill_module_root_skill_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill_module
    ADD CONSTRAINT skill_module_root_skill_id_fkey FOREIGN KEY (root_skill_id) REFERENCES public.skill(id) ON DELETE CASCADE;


--
-- Name: skill_module; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.skill_module ENABLE ROW LEVEL SECURITY;

--
-- Name: skill_module skill_module DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill_module DELETE" ON public.skill_module FOR DELETE USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: skill_module skill_module INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill_module INSERT" ON public.skill_module FOR INSERT WITH CHECK ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: skill_module skill_module SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill_module SELECT" ON public.skill_module FOR SELECT USING (true);


--
-- Name: skill_module skill_module UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill_module UPDATE" ON public.skill_module FOR UPDATE USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: TABLE skill_module; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.skill_module TO anon;
GRANT ALL ON TABLE public.skill_module TO authenticated;
GRANT ALL ON TABLE public.skill_module TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.skill_module)
---------------------------------------------------------------------------

