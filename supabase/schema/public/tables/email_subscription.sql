---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.email_subscription

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.email_subscription)
------------------------------
--                                      Table "public.email_subscription"
--      Column      |           Type           | Collation | Nullable |                Default                
-- -----------------+--------------------------+-----------+----------+---------------------------------------
--  id              | text                     |           | not null | generate_typed_uuid('emailsub'::text)
--  rsn_user_id     | text                     |           |          | 
--  product_updates | boolean                  |           | not null | true
--  edtech_updates  | boolean                  |           | not null | true
--  newsletter      | boolean                  |           | not null | true
--  account_updates | boolean                  |           |          | generated always as (true) stored
--  created_date    | timestamp with time zone |           | not null | now()
--  updated_date    | timestamp with time zone |           | not null | now()
--  created_by      | text                     |           |          | 
--  updated_by      | text                     |           |          | 
--  resend_synced   | boolean                  |           | not null | false
-- Indexes:
--     "email_subscription_pkey" PRIMARY KEY, btree (id)
--     "email_subscription_rsn_user_id_idx" btree (rsn_user_id)
--     "email_subscription_rsn_user_id_key" UNIQUE CONSTRAINT, btree (rsn_user_id)
-- Check constraints:
--     "email_subscription_id_check" CHECK (is_valid_typed_uuid('emailsub'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "email_subscription_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "email_subscription_rsn_user_id_fkey" FOREIGN KEY (rsn_user_id) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "email_subscription_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "Users can insert their own subscriptions" FOR INSERT
--       WITH CHECK (((current_rsn_user_id())::text = rsn_user_id))
--     POLICY "Users can update their own subscriptions" FOR UPDATE
--       USING (((current_rsn_user_id())::text = rsn_user_id))
--     POLICY "Users can view their own subscriptions" FOR SELECT
--       USING (((current_rsn_user_id())::text = rsn_user_id))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON email_subscription FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     tgr_apply_audit_email_subscription BEFORE UPDATE ON email_subscription FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     trigger_update_resend_synced_on_subscription_change BEFORE UPDATE ON email_subscription FOR EACH ROW EXECUTE FUNCTION update_resend_synced_on_subscription_change()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.email_subscription)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.email_subscription)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: email_subscription; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email_subscription (
    id text DEFAULT public.generate_typed_uuid('emailsub'::text) NOT NULL,
    rsn_user_id text,
    product_updates boolean DEFAULT true NOT NULL,
    edtech_updates boolean DEFAULT true NOT NULL,
    newsletter boolean DEFAULT true NOT NULL,
    account_updates boolean GENERATED ALWAYS AS (true) STORED,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    resend_synced boolean DEFAULT false NOT NULL,
    CONSTRAINT email_subscription_id_check CHECK (public.is_valid_typed_uuid('emailsub'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.email_subscription OWNER TO postgres;

--
-- Name: email_subscription email_subscription_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_subscription
    ADD CONSTRAINT email_subscription_pkey PRIMARY KEY (id);


--
-- Name: email_subscription email_subscription_rsn_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_subscription
    ADD CONSTRAINT email_subscription_rsn_user_id_key UNIQUE (rsn_user_id);


--
-- Name: email_subscription_rsn_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX email_subscription_rsn_user_id_idx ON public.email_subscription USING btree (rsn_user_id);


--
-- Name: email_subscription log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.email_subscription FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: email_subscription tgr_apply_audit_email_subscription; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tgr_apply_audit_email_subscription BEFORE UPDATE ON public.email_subscription FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: email_subscription trigger_update_resend_synced_on_subscription_change; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_resend_synced_on_subscription_change BEFORE UPDATE ON public.email_subscription FOR EACH ROW EXECUTE FUNCTION public.update_resend_synced_on_subscription_change();


--
-- Name: email_subscription email_subscription_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_subscription
    ADD CONSTRAINT email_subscription_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: email_subscription email_subscription_rsn_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_subscription
    ADD CONSTRAINT email_subscription_rsn_user_id_fkey FOREIGN KEY (rsn_user_id) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: email_subscription email_subscription_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_subscription
    ADD CONSTRAINT email_subscription_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: email_subscription Users can insert their own subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own subscriptions" ON public.email_subscription FOR INSERT WITH CHECK (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: email_subscription Users can update their own subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own subscriptions" ON public.email_subscription FOR UPDATE USING (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: email_subscription Users can view their own subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own subscriptions" ON public.email_subscription FOR SELECT USING (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: email_subscription; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.email_subscription ENABLE ROW LEVEL SECURITY;

--
-- Name: TABLE email_subscription; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.email_subscription TO anon;
GRANT ALL ON TABLE public.email_subscription TO authenticated;
GRANT ALL ON TABLE public.email_subscription TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.email_subscription)
---------------------------------------------------------------------------

