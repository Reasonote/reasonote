---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.lesson

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.lesson)
------------------------------
--                                           Table "public.lesson"
--      Column      |           Type           | Collation | Nullable |               Default               
-- -----------------+--------------------------+-----------+----------+-------------------------------------
--  id              | text                     |           | not null | generate_typed_uuid('lesson'::text)
--  _name           | text                     |           |          | 
--  _summary        | text                     |           |          | 
--  for_user        | text                     |           |          | 
--  metadata        | jsonb                    |           |          | 
--  root_skill      | text                     |           |          | 
--  created_date    | timestamp with time zone |           | not null | now()
--  updated_date    | timestamp with time zone |           | not null | now()
--  created_by      | text                     |           |          | 
--  updated_by      | text                     |           |          | 
--  root_skill_path | text[]                   |           |          | 
--  icon            | text                     |           |          | 
--  snip_ids        | text[]                   |           |          | 
--  lesson_type     | character varying(255)   |           |          | 
--  chapter         | text                     |           |          | 
--  chapter_order   | integer                  |           |          | 
-- Indexes:
--     "lesson_pkey" PRIMARY KEY, btree (id)
--     "idx_lesson_chapter" btree (chapter)
--     "idx_lesson_created_by" btree (created_by)
--     "idx_lesson_for_user" btree (for_user)
--     "idx_lesson_id" btree (id)
--     "idx_lesson_initial_assessment" btree (root_skill, for_user) WHERE lesson_type::text = 'initial-assessment-lesson'::text
--     "idx_lesson_root_skill" btree (root_skill)
--     "lesson_chapter_order_unique" UNIQUE CONSTRAINT, btree (chapter, chapter_order)
--     "unique_initial_assessment_lesson" UNIQUE, btree (root_skill, for_user) WHERE lesson_type::text = 'initial-assessment-lesson'::text
-- Check constraints:
--     "lesson_id_check" CHECK (is_valid_typed_uuid('lesson'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "lesson_chapter_fkey" FOREIGN KEY (chapter) REFERENCES chapter(id) ON DELETE SET NULL
--     "lesson_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "lesson_for_user_fkey" FOREIGN KEY (for_user) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "lesson_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE CASCADE
--     "lesson_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "course_lesson" CONSTRAINT "course_lesson_lesson_fkey" FOREIGN KEY (lesson) REFERENCES lesson(id) ON DELETE CASCADE
--     TABLE "lesson_activity" CONSTRAINT "lesson_activity_lesson_fkey" FOREIGN KEY (lesson) REFERENCES lesson(id) ON DELETE CASCADE
--     TABLE "lesson_session" CONSTRAINT "lesson_session_lesson_fkey" FOREIGN KEY (lesson) REFERENCES lesson(id) ON DELETE SET NULL
--     TABLE "user_lesson_result" CONSTRAINT "user_lesson_result_lesson_fkey" FOREIGN KEY (lesson) REFERENCES lesson(id) ON DELETE SET NULL
-- Policies:
--     POLICY "lesson DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_lesson_memauth vwm
--   WHERE ((vwm.lesson_id = lesson.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('lesson.DELETE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
--     POLICY "lesson INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "lesson SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_lesson_memauth vwm
--   WHERE ((vwm.lesson_id = lesson.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('lesson.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
--     POLICY "lesson UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_lesson_memauth vwm
--   WHERE ((vwm.lesson_id = lesson.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('lesson.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
-- Triggers:
--     grant_lesson_creator_auth AFTER INSERT ON lesson FOR EACH ROW EXECUTE FUNCTION tgr_grant_entity_creator_authorization('id', 'lesson')
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON lesson FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON lesson FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.lesson)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.lesson)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: lesson; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.lesson (
    id text DEFAULT public.generate_typed_uuid('lesson'::text) NOT NULL,
    _name text,
    _summary text,
    for_user text,
    metadata jsonb,
    root_skill text,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    root_skill_path text[],
    icon text,
    snip_ids text[],
    lesson_type character varying(255),
    chapter text,
    chapter_order integer,
    CONSTRAINT lesson_id_check CHECK (public.is_valid_typed_uuid('lesson'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.lesson OWNER TO postgres;

--
-- Name: TABLE lesson; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.lesson IS 'A lesson is a group of skills, activities, and configuration for a specific learning goal..';


--
-- Name: COLUMN lesson.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson.id IS 'The unique identifier for the lesson.';


--
-- Name: COLUMN lesson._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson._name IS 'The name of the lesson.';


--
-- Name: COLUMN lesson._summary; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson._summary IS 'The summary of the lesson.';


--
-- Name: COLUMN lesson.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson.metadata IS 'The metadata for the lesson.';


--
-- Name: COLUMN lesson.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson.created_date IS 'The date that this lesson was created.';


--
-- Name: COLUMN lesson.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson.updated_date IS 'The date that this lesson was last updated.';


--
-- Name: COLUMN lesson.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson.created_by IS 'The user that created this lesson.';


--
-- Name: COLUMN lesson.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.lesson.updated_by IS 'The user that last updated this lesson.';


--
-- Name: lesson lesson_chapter_order_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_chapter_order_unique UNIQUE (chapter, chapter_order);


--
-- Name: lesson lesson_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_pkey PRIMARY KEY (id);


--
-- Name: idx_lesson_chapter; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lesson_chapter ON public.lesson USING btree (chapter);


--
-- Name: idx_lesson_created_by; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lesson_created_by ON public.lesson USING btree (created_by);


--
-- Name: idx_lesson_for_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lesson_for_user ON public.lesson USING btree (for_user);


--
-- Name: idx_lesson_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lesson_id ON public.lesson USING btree (id);


--
-- Name: idx_lesson_initial_assessment; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lesson_initial_assessment ON public.lesson USING btree (root_skill, for_user) WHERE ((lesson_type)::text = 'initial-assessment-lesson'::text);


--
-- Name: idx_lesson_root_skill; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lesson_root_skill ON public.lesson USING btree (root_skill);


--
-- Name: unique_initial_assessment_lesson; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_initial_assessment_lesson ON public.lesson USING btree (root_skill, for_user) WHERE ((lesson_type)::text = 'initial-assessment-lesson'::text);


--
-- Name: lesson grant_lesson_creator_auth; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER grant_lesson_creator_auth AFTER INSERT ON public.lesson FOR EACH ROW EXECUTE FUNCTION public.tgr_grant_entity_creator_authorization('id', 'lesson');


--
-- Name: lesson log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.lesson FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: lesson run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.lesson FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: lesson lesson_chapter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_chapter_fkey FOREIGN KEY (chapter) REFERENCES public.chapter(id) ON DELETE SET NULL;


--
-- Name: lesson lesson_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: lesson lesson_for_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_for_user_fkey FOREIGN KEY (for_user) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: lesson lesson_root_skill_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_root_skill_fkey FOREIGN KEY (root_skill) REFERENCES public.skill(id) ON DELETE CASCADE;


--
-- Name: lesson lesson_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: lesson; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.lesson ENABLE ROW LEVEL SECURITY;

--
-- Name: lesson lesson DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "lesson DELETE" ON public.lesson FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_lesson_memauth vwm
  WHERE ((vwm.lesson_id = lesson.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('lesson.DELETE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: lesson lesson INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "lesson INSERT" ON public.lesson FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: lesson lesson SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "lesson SELECT" ON public.lesson FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_lesson_memauth vwm
  WHERE ((vwm.lesson_id = lesson.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('lesson.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: lesson lesson UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "lesson UPDATE" ON public.lesson FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_lesson_memauth vwm
  WHERE ((vwm.lesson_id = lesson.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('lesson.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE lesson; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.lesson TO anon;
GRANT ALL ON TABLE public.lesson TO authenticated;
GRANT ALL ON TABLE public.lesson TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.lesson)
---------------------------------------------------------------------------

