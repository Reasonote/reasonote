---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.bot

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.bot)
------------------------------
--                                         Table "public.bot"
--     Column    |           Type           | Collation | Nullable |             Default              
-- --------------+--------------------------+-----------+----------+----------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('bot'::text)
--  name         | text                     |           |          | 
--  description  | text                     |           |          | 
--  prompt       | text                     |           |          | 
--  avatar_url   | text                     |           |          | 
--  is_public    | boolean                  |           | not null | false
--  forked_from  | text                     |           |          | 
--  extras       | jsonb                    |           |          | 
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
--  avatar_emoji | text                     |           |          | 
-- Indexes:
--     "bot_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "bot_id_check_prefix" CHECK (id ~~* 'bot__%'::text)
-- Foreign-key constraints:
--     "bot_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "bot_forked_from_fkey" FOREIGN KEY (forked_from) REFERENCES bot(id) ON DELETE SET NULL
--     "bot_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "bot" CONSTRAINT "bot_forked_from_fkey" FOREIGN KEY (forked_from) REFERENCES bot(id) ON DELETE SET NULL
--     TABLE "bot_set_bot" CONSTRAINT "bot_set_bot_bot_fkey" FOREIGN KEY (bot) REFERENCES bot(id) ON DELETE CASCADE
--     TABLE "chat_message" CONSTRAINT "chat_message_bot_id_fkey" FOREIGN KEY (bot_id) REFERENCES bot(id) ON DELETE SET NULL
--     TABLE "chat_message" CONSTRAINT "chat_message_created_by_bot_fkey" FOREIGN KEY (created_by_bot) REFERENCES bot(id) ON DELETE SET NULL
--     TABLE "memauth" CONSTRAINT "memauth_principal_bot_id_fkey" FOREIGN KEY (principal_bot_id) REFERENCES bot(id) ON DELETE CASCADE
--     TABLE "member_authorization" CONSTRAINT "member_authorization_bot_id_fkey" FOREIGN KEY (bot_id) REFERENCES bot(id) ON DELETE CASCADE
--     TABLE "member_authorization" CONSTRAINT "member_authorization_granted_bot_id_fkey" FOREIGN KEY (granted_bot_id) REFERENCES bot(id) ON DELETE CASCADE
-- Policies:
--     POLICY "bot DELETE" FOR DELETE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "bot INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "bot SELECT" FOR SELECT
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "bot UPDATE" FOR UPDATE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
-- Triggers:
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON bot FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.bot)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.bot)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: bot; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bot (
    id text DEFAULT public.generate_typed_uuid('bot'::text) NOT NULL,
    name text,
    description text,
    prompt text,
    avatar_url text,
    is_public boolean DEFAULT false NOT NULL,
    forked_from text,
    extras jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    avatar_emoji text,
    CONSTRAINT bot_id_check_prefix CHECK ((id ~~* 'bot__%'::text))
);


ALTER TABLE public.bot OWNER TO postgres;

--
-- Name: TABLE bot; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.bot IS 'A bot is a virtual agent.';


--
-- Name: COLUMN bot.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.name IS 'The name of the bot.';


--
-- Name: COLUMN bot.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.description IS 'The description of the bot.';


--
-- Name: COLUMN bot.prompt; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.prompt IS 'The prompt initially given to the bot.';


--
-- Name: COLUMN bot.is_public; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.is_public IS 'Indicates if the bot is public.';


--
-- Name: COLUMN bot.extras; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.extras IS 'Extra data related to the bot.';


--
-- Name: COLUMN bot.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.created_date IS 'When the bot was created.';


--
-- Name: COLUMN bot.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.updated_date IS 'When the bot was last updated.';


--
-- Name: COLUMN bot.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.created_by IS 'The user who created the bot.';


--
-- Name: COLUMN bot.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot.updated_by IS 'The user who last updated the bot.';


--
-- Name: bot bot_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot
    ADD CONSTRAINT bot_pkey PRIMARY KEY (id);


--
-- Name: bot run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.bot FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: bot bot_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot
    ADD CONSTRAINT bot_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot bot_forked_from_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot
    ADD CONSTRAINT bot_forked_from_fkey FOREIGN KEY (forked_from) REFERENCES public.bot(id) ON DELETE SET NULL;


--
-- Name: bot bot_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot
    ADD CONSTRAINT bot_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.bot ENABLE ROW LEVEL SECURITY;

--
-- Name: bot bot DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "bot DELETE" ON public.bot FOR DELETE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: bot bot INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "bot INSERT" ON public.bot FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: bot bot SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "bot SELECT" ON public.bot FOR SELECT USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: bot bot UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "bot UPDATE" ON public.bot FOR UPDATE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: TABLE bot; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.bot TO anon;
GRANT ALL ON TABLE public.bot TO authenticated;
GRANT ALL ON TABLE public.bot TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.bot)
---------------------------------------------------------------------------

