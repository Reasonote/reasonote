---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.memauth

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.memauth)
------------------------------
--                                                                            Table "public.memauth"
--         Column        |            Type             | Collation | Nullable |                                            Default                                             
-- ----------------------+-----------------------------+-----------+----------+------------------------------------------------------------------------------------------------
--  id                   | text                        |           | not null | generate_typed_uuid('memauth'::text)
--  access_level         | character varying(512)      |           | not null | 
--  principal_user_id    | text                        |           |          | 
--  principal_bot_id     | text                        |           |          | 
--  principal_group_id   | text                        |           |          | 
--  created_date         | timestamp without time zone |           | not null | (now() AT TIME ZONE 'utc'::text)
--  created_by           | text                        |           |          | current_rsn_user_id()
--  updated_by           | text                        |           |          | 
--  updated_date         | timestamp with time zone    |           |          | now()
--  principal_id         | text                        |           |          | generated always as (COALESCE(principal_user_id, principal_bot_id, principal_group_id)) stored
--  principal_type       | agent_type                  |           |          | generated always as (                                                                         +
--                       |                             |           |          | CASE                                                                                          +
--                       |                             |           |          |     WHEN principal_user_id IS NULL THEN                                                       +
--                       |                             |           |          |     CASE                                                                                      +
--                       |                             |           |          |         WHEN principal_bot_id IS NULL THEN 'group'::agent_type                                +
--                       |                             |           |          |         ELSE 'bot'::agent_type                                                                +
--                       |                             |           |          |     END                                                                                       +
--                       |                             |           |          |     ELSE 'user'::agent_type                                                                   +
--                       |                             |           |          | END) stored
--  resource_entity_id   | text                        |           | not null | 
--  resource_entity_type | text                        |           |          | 
--  is_public            | boolean                     |           |          | false
-- Indexes:
--     "memauth_pkey" PRIMARY KEY, btree (id)
--     "idx_memauth_activity_principal_public" btree (resource_entity_type, resource_entity_id, principal_id, is_public)
--     "idx_memauth_id" btree (id)
--     "idx_memauth_lesson" btree (resource_entity_id, resource_entity_type, principal_id) WHERE resource_entity_type = 'lesson'::text
--     "idx_memauth_principal_bot" btree (principal_bot_id) WHERE principal_bot_id IS NOT NULL
--     "idx_memauth_principal_group" btree (principal_group_id) WHERE principal_group_id IS NOT NULL
--     "idx_memauth_principal_user" btree (principal_user_id) WHERE principal_user_id IS NOT NULL
--     "idx_memauth_public_resources" btree (resource_entity_type, resource_entity_id) WHERE is_public = true
-- Check constraints:
--     "memauth_id_check_prefix" CHECK (is_valid_typed_uuid('memauth'::text, id::typed_uuid))
--     "resource_entity_type_non_null" CHECK (resource_entity_type IS NOT NULL)
-- Foreign-key constraints:
--     "memauth_principal_bot_id_fkey" FOREIGN KEY (principal_bot_id) REFERENCES bot(id) ON DELETE CASCADE
--     "memauth_principal_group_id_fkey" FOREIGN KEY (principal_group_id) REFERENCES "group"(id) ON DELETE CASCADE
--     "memauth_principal_user_id_fkey" FOREIGN KEY (principal_user_id) REFERENCES rsn_user(id) ON DELETE CASCADE
-- Policies:
--     POLICY "memauth__authenticated__delete" FOR DELETE
--       TO authenticated
--       USING ((((EXISTS ( SELECT 1
--    FROM vw_entity_permissions vep
--   WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) OR is_admin()) AND (((access_level)::text <> 'owner'::text) OR is_admin())))
--     POLICY "memauth__authenticated__insert" FOR INSERT
--       TO authenticated
--       WITH CHECK ((((EXISTS ( SELECT 1
--    FROM vw_entity_permissions vep
--   WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) OR is_admin()) AND (((access_level)::text <> 'owner'::text) OR is_admin())))
--     POLICY "memauth__authenticated__select" FOR SELECT
--       TO authenticated
--       USING (((principal_user_id = (current_rsn_user_id())::text) OR (EXISTS ( SELECT 1
--    FROM vw_entity_permissions vep
--   WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND (vep.is_public = true)))) OR (EXISTS ( SELECT 1
--    FROM vw_entity_permissions vep
--   WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND (vep.principal_id = (current_rsn_user_id())::text)))) OR is_admin()))
--     POLICY "memauth__authenticated__update" FOR UPDATE
--       TO authenticated
--       USING (((EXISTS ( SELECT 1
--    FROM vw_entity_permissions vep
--   WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) AND (((access_level)::text <> 'owner'::text) OR is_admin())))
--       WITH CHECK ((((EXISTS ( SELECT 1
--    FROM vw_entity_permissions vep
--   WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) OR is_admin()) AND (((access_level)::text <> 'owner'::text) OR is_admin())))
--     POLICY "memauth__service_role__delete" FOR DELETE
--       TO service_role
--       USING (true)
--     POLICY "memauth__service_role__insert" FOR INSERT
--       TO service_role
--       WITH CHECK (true)
--     POLICY "memauth__service_role__select" FOR SELECT
--       TO service_role
--       USING (true)
--     POLICY "memauth__service_role__update" FOR UPDATE
--       TO service_role
--       USING (true)
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON memauth FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON memauth FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     set_memauth_entity_type BEFORE INSERT OR UPDATE ON memauth FOR EACH ROW EXECUTE FUNCTION tgr_set_memauth_entity_type()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.memauth)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.memauth)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: memauth; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.memauth (
    id text DEFAULT public.generate_typed_uuid('memauth'::text) NOT NULL,
    access_level character varying(512) NOT NULL,
    principal_user_id text,
    principal_bot_id text,
    principal_group_id text,
    created_date timestamp without time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
    created_by text DEFAULT public.current_rsn_user_id(),
    updated_by text,
    updated_date timestamp with time zone DEFAULT now(),
    principal_id text GENERATED ALWAYS AS (COALESCE(principal_user_id, principal_bot_id, principal_group_id)) STORED,
    principal_type public.agent_type GENERATED ALWAYS AS (
CASE
    WHEN (principal_user_id IS NULL) THEN
    CASE
        WHEN (principal_bot_id IS NULL) THEN 'group'::public.agent_type
        ELSE 'bot'::public.agent_type
    END
    ELSE 'user'::public.agent_type
END) STORED,
    resource_entity_id text NOT NULL,
    resource_entity_type text,
    is_public boolean DEFAULT false,
    CONSTRAINT memauth_id_check_prefix CHECK (public.is_valid_typed_uuid('memauth'::text, (id)::public.typed_uuid)),
    CONSTRAINT resource_entity_type_non_null CHECK ((resource_entity_type IS NOT NULL))
);


ALTER TABLE public.memauth OWNER TO postgres;

--
-- Name: TABLE memauth; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.memauth IS 'Maps principals (user/bot/group) to access_levels on specific resources (lesson/chat/etc.).';


--
-- Name: COLUMN memauth.principal_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.memauth.principal_id IS 'Unified principal identifier (user/bot/group).';


--
-- Name: COLUMN memauth.principal_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.memauth.principal_type IS 'Type of the principal: user, bot, or group.';


--
-- Name: COLUMN memauth.resource_entity_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.memauth.resource_entity_id IS 'The identifier of the resource entity this authorization applies to. This is the full identifier, including the type prefix. The type prefix / abbreviationMUST exist in the entity_type table.';


--
-- Name: COLUMN memauth.resource_entity_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.memauth.resource_entity_type IS 'The type of the resource entity this authorization applies to. This is derived from the resource_entity_id prefix, via the entity_type table mapping from abbreviation -> entity_type';


--
-- Name: memauth memauth_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memauth
    ADD CONSTRAINT memauth_pkey PRIMARY KEY (id);


--
-- Name: idx_memauth_activity_principal_public; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_activity_principal_public ON public.memauth USING btree (resource_entity_type, resource_entity_id, principal_id, is_public);


--
-- Name: idx_memauth_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_id ON public.memauth USING btree (id);


--
-- Name: idx_memauth_lesson; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_lesson ON public.memauth USING btree (resource_entity_id, resource_entity_type, principal_id) WHERE (resource_entity_type = 'lesson'::text);


--
-- Name: idx_memauth_principal_bot; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_principal_bot ON public.memauth USING btree (principal_bot_id) WHERE (principal_bot_id IS NOT NULL);


--
-- Name: idx_memauth_principal_group; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_principal_group ON public.memauth USING btree (principal_group_id) WHERE (principal_group_id IS NOT NULL);


--
-- Name: idx_memauth_principal_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_principal_user ON public.memauth USING btree (principal_user_id) WHERE (principal_user_id IS NOT NULL);


--
-- Name: idx_memauth_public_resources; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_memauth_public_resources ON public.memauth USING btree (resource_entity_type, resource_entity_id) WHERE (is_public = true);


--
-- Name: memauth log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.memauth FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: memauth run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.memauth FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: memauth set_memauth_entity_type; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_memauth_entity_type BEFORE INSERT OR UPDATE ON public.memauth FOR EACH ROW EXECUTE FUNCTION public.tgr_set_memauth_entity_type();


--
-- Name: memauth memauth_principal_bot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memauth
    ADD CONSTRAINT memauth_principal_bot_id_fkey FOREIGN KEY (principal_bot_id) REFERENCES public.bot(id) ON DELETE CASCADE;


--
-- Name: memauth memauth_principal_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memauth
    ADD CONSTRAINT memauth_principal_group_id_fkey FOREIGN KEY (principal_group_id) REFERENCES public."group"(id) ON DELETE CASCADE;


--
-- Name: memauth memauth_principal_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memauth
    ADD CONSTRAINT memauth_principal_user_id_fkey FOREIGN KEY (principal_user_id) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: memauth; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.memauth ENABLE ROW LEVEL SECURITY;

--
-- Name: memauth memauth__authenticated__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__authenticated__delete ON public.memauth FOR DELETE TO authenticated USING ((((EXISTS ( SELECT 1
   FROM public.vw_entity_permissions vep
  WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) OR public.is_admin()) AND (((access_level)::text <> 'owner'::text) OR public.is_admin())));


--
-- Name: memauth memauth__authenticated__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__authenticated__insert ON public.memauth FOR INSERT TO authenticated WITH CHECK ((((EXISTS ( SELECT 1
   FROM public.vw_entity_permissions vep
  WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) OR public.is_admin()) AND (((access_level)::text <> 'owner'::text) OR public.is_admin())));


--
-- Name: memauth memauth__authenticated__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__authenticated__select ON public.memauth FOR SELECT TO authenticated USING (((principal_user_id = (public.current_rsn_user_id())::text) OR (EXISTS ( SELECT 1
   FROM public.vw_entity_permissions vep
  WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND (vep.is_public = true)))) OR (EXISTS ( SELECT 1
   FROM public.vw_entity_permissions vep
  WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND (vep.principal_id = (public.current_rsn_user_id())::text)))) OR public.is_admin()));


--
-- Name: memauth memauth__authenticated__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__authenticated__update ON public.memauth FOR UPDATE TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.vw_entity_permissions vep
  WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) AND (((access_level)::text <> 'owner'::text) OR public.is_admin()))) WITH CHECK ((((EXISTS ( SELECT 1
   FROM public.vw_entity_permissions vep
  WHERE ((vep.entity_type = memauth.resource_entity_type) AND (vep.entity_id = memauth.resource_entity_id) AND ((vep.principal_id = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((memauth.resource_entity_type || '.SHARE'::text) = ANY ((vep.permissions)::text[]))))) OR public.is_admin()) AND (((access_level)::text <> 'owner'::text) OR public.is_admin())));


--
-- Name: memauth memauth__service_role__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__service_role__delete ON public.memauth FOR DELETE TO service_role USING (true);


--
-- Name: memauth memauth__service_role__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__service_role__insert ON public.memauth FOR INSERT TO service_role WITH CHECK (true);


--
-- Name: memauth memauth__service_role__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__service_role__select ON public.memauth FOR SELECT TO service_role USING (true);


--
-- Name: memauth memauth__service_role__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY memauth__service_role__update ON public.memauth FOR UPDATE TO service_role USING (true);


--
-- Name: TABLE memauth; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.memauth TO anon;
GRANT ALL ON TABLE public.memauth TO authenticated;
GRANT ALL ON TABLE public.memauth TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.memauth)
---------------------------------------------------------------------------

