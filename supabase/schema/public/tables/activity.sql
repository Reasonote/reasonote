---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.activity

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.activity)
------------------------------
--                                               Table "public.activity"
--           Column           |           Type           | Collation | Nullable |               Default               
-- ---------------------------+--------------------------+-----------+----------+-------------------------------------
--  id                        | text                     |           | not null | generate_typed_uuid('actvty'::text)
--  _name                     | text                     |           | not null | 
--  _type                     | text                     |           |          | 
--  type_config               | jsonb                    |           |          | 
--  source                    | text                     |           |          | 
--  metadata                  | jsonb                    |           |          | 
--  created_date              | timestamp with time zone |           | not null | now()
--  updated_date              | timestamp with time zone |           | not null | now()
--  created_by                | typed_uuid               |           |          | 
--  updated_by                | typed_uuid               |           |          | 
--  generated_for_user        | text                     |           |          | 
--  generated_for_skill_paths | jsonb                    |           |          | 
--  gen_instructions          | text                     |           |          | 
-- Indexes:
--     "activity_pkey" PRIMARY KEY, btree (id)
--     "idx_activity_created_by" btree (created_by)
--     "idx_activity_generated_for_user" btree (generated_for_user)
--     "idx_activity_id" btree (id)
-- Check constraints:
--     "activity__id__check_prefix" CHECK (is_valid_typed_uuid('actvty'::text, id::typed_uuid))
--     "generated_for_skill_paths_is_2d_array" CHECK (generated_for_skill_paths IS NULL OR jsonb_matches_schema('{
--     "type": "array",
--     "items": {
--         "type": "array",
--         "items": {
--             "type": "string"
--         }
--     }
-- }'::json, generated_for_skill_paths))
-- Foreign-key constraints:
--     "activity_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "activity_generated_for_user_fkey" FOREIGN KEY (generated_for_user) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "activity_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "activity_set_activity" CONSTRAINT "activity_set_activity_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE CASCADE
--     TABLE "activity_skill" CONSTRAINT "activity_skill_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE CASCADE
--     TABLE "lesson_activity" CONSTRAINT "lesson_activity_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE CASCADE
--     TABLE "user_activity_feedback" CONSTRAINT "user_activity_feedback_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE CASCADE
--     TABLE "user_activity_result" CONSTRAINT "user_activity_result_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE SET NULL
-- Policies:
--     POLICY "activity DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_activity_memauth vwm
--   WHERE ((vwm.activity_id = activity.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('activity.DELETE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text) OR (generated_for_user = (current_rsn_user_id())::text)))
--     POLICY "activity INSERT" FOR INSERT
--       WITH CHECK ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "activity SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_activity_memauth vwm
--   WHERE ((vwm.activity_id = activity.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('activity.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text) OR (generated_for_user = (current_rsn_user_id())::text)))
--     POLICY "activity UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_activity_memauth vwm
--   WHERE ((vwm.activity_id = activity.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('activity.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text) OR (generated_for_user = (current_rsn_user_id())::text)))
-- Triggers:
--     grant_activity_creator_auth AFTER INSERT ON activity FOR EACH ROW EXECUTE FUNCTION tgr_grant_entity_creator_authorization('id', 'activity')
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON activity FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON activity FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.activity)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.activity)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: activity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.activity (
    id text DEFAULT public.generate_typed_uuid('actvty'::text) NOT NULL,
    _name text NOT NULL,
    _type text,
    type_config jsonb,
    source text,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    generated_for_user text,
    generated_for_skill_paths jsonb,
    gen_instructions text,
    CONSTRAINT activity__id__check_prefix CHECK (public.is_valid_typed_uuid('actvty'::text, (id)::public.typed_uuid)),
    CONSTRAINT generated_for_skill_paths_is_2d_array CHECK (((generated_for_skill_paths IS NULL) OR extensions.jsonb_matches_schema('{
    "type": "array",
    "items": {
        "type": "array",
        "items": {
            "type": "string"
        }
    }
}'::json, generated_for_skill_paths)))
);


ALTER TABLE public.activity OWNER TO postgres;

--
-- Name: TABLE activity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.activity IS 'An activity can be anything the user could engage in as an isolated experience -- a level of a video game, a page in a book, a chapter in a course, etc.';


--
-- Name: COLUMN activity.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.id IS 'The unique identifier for the activity';


--
-- Name: COLUMN activity._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity._name IS 'The name of the activity';


--
-- Name: COLUMN activity._type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity._type IS 'The type of the activity (CURRENT OPTIONS: "flashcard" | "fill-in-the-blank" | "multiple-choice" | "teach-the-ai")';


--
-- Name: COLUMN activity.type_config; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.type_config IS 'The configuration for the activity type';


--
-- Name: COLUMN activity.source; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.source IS 'The source of the activity (CURRENT OPTIONS: "ai-generated" | "manual")';


--
-- Name: COLUMN activity.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.metadata IS 'The metadata of the activity';


--
-- Name: COLUMN activity.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.created_date IS 'The date the activity was created';


--
-- Name: COLUMN activity.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.updated_date IS 'The date the activity was last updated';


--
-- Name: COLUMN activity.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.created_by IS 'The user that created the activity';


--
-- Name: COLUMN activity.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.updated_by IS 'The user that last updated the activity';


--
-- Name: COLUMN activity.generated_for_user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.generated_for_user IS 'The user that this activity was generated for.';


--
-- Name: COLUMN activity.generated_for_skill_paths; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.generated_for_skill_paths IS 'The skill paths that this activity was generated for. (Should be a 2D array of skill path IDs.)';


--
-- Name: COLUMN activity.gen_instructions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.activity.gen_instructions IS 'The instructions for the AI to generate this activity, if any.';


--
-- Name: activity activity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_pkey PRIMARY KEY (id);


--
-- Name: idx_activity_created_by; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_activity_created_by ON public.activity USING btree (created_by);


--
-- Name: idx_activity_generated_for_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_activity_generated_for_user ON public.activity USING btree (generated_for_user);


--
-- Name: idx_activity_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_activity_id ON public.activity USING btree (id);


--
-- Name: activity grant_activity_creator_auth; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER grant_activity_creator_auth AFTER INSERT ON public.activity FOR EACH ROW EXECUTE FUNCTION public.tgr_grant_entity_creator_authorization('id', 'activity');


--
-- Name: activity log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.activity FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: activity run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.activity FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: activity activity_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: activity activity_generated_for_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_generated_for_user_fkey FOREIGN KEY (generated_for_user) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: activity activity_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: activity; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.activity ENABLE ROW LEVEL SECURITY;

--
-- Name: activity activity DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "activity DELETE" ON public.activity FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_activity_memauth vwm
  WHERE ((vwm.activity_id = activity.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('activity.DELETE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text) OR (generated_for_user = (public.current_rsn_user_id())::text)));


--
-- Name: activity activity INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "activity INSERT" ON public.activity FOR INSERT WITH CHECK ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: activity activity SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "activity SELECT" ON public.activity FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_activity_memauth vwm
  WHERE ((vwm.activity_id = activity.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('activity.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text) OR (generated_for_user = (public.current_rsn_user_id())::text)));


--
-- Name: activity activity UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "activity UPDATE" ON public.activity FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_activity_memauth vwm
  WHERE ((vwm.activity_id = activity.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('activity.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text) OR (generated_for_user = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE activity; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.activity TO anon;
GRANT ALL ON TABLE public.activity TO authenticated;
GRANT ALL ON TABLE public.activity TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.activity)
---------------------------------------------------------------------------

