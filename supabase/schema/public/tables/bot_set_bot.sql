---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.bot_set_bot

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.bot_set_bot)
------------------------------
--                                        Table "public.bot_set_bot"
--     Column    |           Type           | Collation | Nullable |                Default                 
-- --------------+--------------------------+-----------+----------+----------------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('sklsetskl'::text)
--  bot_set      | text                     |           |          | 
--  bot          | text                     |           |          | 
--  metadata     | jsonb                    |           |          | 
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
-- Indexes:
--     "bot_set_bot_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "bot_set_bot__id__check_prefix" CHECK (is_valid_typed_uuid('sklsetskl'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "bot_set_bot_bot_fkey" FOREIGN KEY (bot) REFERENCES bot(id) ON DELETE CASCADE
--     "bot_set_bot_bot_set_fkey" FOREIGN KEY (bot_set) REFERENCES bot_set(id) ON DELETE CASCADE
--     "bot_set_bot_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "bot_set_bot_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "bot_set_bot__anon__delete" FOR DELETE
--       TO anon
--       USING (false)
--     POLICY "bot_set_bot__anon__insert" FOR INSERT
--       TO anon
--       WITH CHECK (false)
--     POLICY "bot_set_bot__anon__select" FOR SELECT
--       TO anon
--       USING (false)
--     POLICY "bot_set_bot__anon__update" FOR UPDATE
--       TO anon
--       USING (false)
--     POLICY "bot_set_bot__authenticated__delete" FOR DELETE
--       TO authenticated
--       USING (
-- CASE
--     WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (current_rsn_user_id())::text)
--        FROM bot_set
--       WHERE (bot_set.id = bot_set_bot.bot_set))
--     ELSE true
-- END)
--     POLICY "bot_set_bot__authenticated__insert" FOR INSERT
--       TO authenticated
--       WITH CHECK (
-- CASE
--     WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (current_rsn_user_id())::text)
--        FROM bot_set
--       WHERE (bot_set.id = bot_set_bot.bot_set))
--     ELSE true
-- END)
--     POLICY "bot_set_bot__authenticated__select" FOR SELECT
--       TO authenticated
--       USING (
-- CASE
--     WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (current_rsn_user_id())::text)
--        FROM bot_set
--       WHERE (bot_set.id = bot_set_bot.bot_set))
--     ELSE true
-- END)
--     POLICY "bot_set_bot__authenticated__update" FOR UPDATE
--       TO authenticated
--       USING (
-- CASE
--     WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (current_rsn_user_id())::text)
--        FROM bot_set
--       WHERE (bot_set.id = bot_set_bot.bot_set))
--     ELSE true
-- END)
--     POLICY "bot_set_bot__service_role__delete" FOR DELETE
--       TO service_role
--       USING (true)
--     POLICY "bot_set_bot__service_role__insert" FOR INSERT
--       TO service_role
--       WITH CHECK (true)
--     POLICY "bot_set_bot__service_role__select" FOR SELECT
--       TO service_role
--       USING (true)
--     POLICY "bot_set_bot__service_role__update" FOR UPDATE
--       TO service_role
--       USING (true)
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.bot_set_bot)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.bot_set_bot)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: bot_set_bot; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bot_set_bot (
    id text DEFAULT public.generate_typed_uuid('sklsetskl'::text) NOT NULL,
    bot_set text,
    bot text,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT bot_set_bot__id__check_prefix CHECK (public.is_valid_typed_uuid('sklsetskl'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.bot_set_bot OWNER TO postgres;

--
-- Name: TABLE bot_set_bot; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.bot_set_bot IS 'A bot in a bot set';


--
-- Name: COLUMN bot_set_bot.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.id IS 'The unique identifier for the bot set bot';


--
-- Name: COLUMN bot_set_bot.bot_set; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.bot_set IS 'The bot set the bot belongs to';


--
-- Name: COLUMN bot_set_bot.bot; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.bot IS 'The bot';


--
-- Name: COLUMN bot_set_bot.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.metadata IS 'The metadata for the bot set bot';


--
-- Name: COLUMN bot_set_bot.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.created_date IS 'The date the bot set bot was created';


--
-- Name: COLUMN bot_set_bot.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.updated_date IS 'The date the bot set bot was last updated';


--
-- Name: COLUMN bot_set_bot.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.created_by IS 'The user that created the bot set bot';


--
-- Name: COLUMN bot_set_bot.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set_bot.updated_by IS 'The user that last updated the bot set bot';


--
-- Name: bot_set_bot bot_set_bot_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set_bot
    ADD CONSTRAINT bot_set_bot_pkey PRIMARY KEY (id);


--
-- Name: bot_set_bot bot_set_bot_bot_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set_bot
    ADD CONSTRAINT bot_set_bot_bot_fkey FOREIGN KEY (bot) REFERENCES public.bot(id) ON DELETE CASCADE;


--
-- Name: bot_set_bot bot_set_bot_bot_set_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set_bot
    ADD CONSTRAINT bot_set_bot_bot_set_fkey FOREIGN KEY (bot_set) REFERENCES public.bot_set(id) ON DELETE CASCADE;


--
-- Name: bot_set_bot bot_set_bot_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set_bot
    ADD CONSTRAINT bot_set_bot_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot_set_bot bot_set_bot_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set_bot
    ADD CONSTRAINT bot_set_bot_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot_set_bot; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.bot_set_bot ENABLE ROW LEVEL SECURITY;

--
-- Name: bot_set_bot bot_set_bot__anon__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__anon__delete ON public.bot_set_bot FOR DELETE TO anon USING (false);


--
-- Name: bot_set_bot bot_set_bot__anon__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__anon__insert ON public.bot_set_bot FOR INSERT TO anon WITH CHECK (false);


--
-- Name: bot_set_bot bot_set_bot__anon__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__anon__select ON public.bot_set_bot FOR SELECT TO anon USING (false);


--
-- Name: bot_set_bot bot_set_bot__anon__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__anon__update ON public.bot_set_bot FOR UPDATE TO anon USING (false);


--
-- Name: bot_set_bot bot_set_bot__authenticated__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__authenticated__delete ON public.bot_set_bot FOR DELETE TO authenticated USING (
CASE
    WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (public.current_rsn_user_id())::text)
       FROM public.bot_set
      WHERE (bot_set.id = bot_set_bot.bot_set))
    ELSE true
END);


--
-- Name: bot_set_bot bot_set_bot__authenticated__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__authenticated__insert ON public.bot_set_bot FOR INSERT TO authenticated WITH CHECK (
CASE
    WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (public.current_rsn_user_id())::text)
       FROM public.bot_set
      WHERE (bot_set.id = bot_set_bot.bot_set))
    ELSE true
END);


--
-- Name: bot_set_bot bot_set_bot__authenticated__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__authenticated__select ON public.bot_set_bot FOR SELECT TO authenticated USING (
CASE
    WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (public.current_rsn_user_id())::text)
       FROM public.bot_set
      WHERE (bot_set.id = bot_set_bot.bot_set))
    ELSE true
END);


--
-- Name: bot_set_bot bot_set_bot__authenticated__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__authenticated__update ON public.bot_set_bot FOR UPDATE TO authenticated USING (
CASE
    WHEN (bot_set IS NOT NULL) THEN ( SELECT (bot_set.for_user = (public.current_rsn_user_id())::text)
       FROM public.bot_set
      WHERE (bot_set.id = bot_set_bot.bot_set))
    ELSE true
END);


--
-- Name: bot_set_bot bot_set_bot__service_role__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__service_role__delete ON public.bot_set_bot FOR DELETE TO service_role USING (true);


--
-- Name: bot_set_bot bot_set_bot__service_role__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__service_role__insert ON public.bot_set_bot FOR INSERT TO service_role WITH CHECK (true);


--
-- Name: bot_set_bot bot_set_bot__service_role__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__service_role__select ON public.bot_set_bot FOR SELECT TO service_role USING (true);


--
-- Name: bot_set_bot bot_set_bot__service_role__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set_bot__service_role__update ON public.bot_set_bot FOR UPDATE TO service_role USING (true);


--
-- Name: TABLE bot_set_bot; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.bot_set_bot TO anon;
GRANT ALL ON TABLE public.bot_set_bot TO authenticated;
GRANT ALL ON TABLE public.bot_set_bot TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.bot_set_bot)
---------------------------------------------------------------------------

