---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.member_authorization

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.member_authorization)
------------------------------
--                                                                   Table "public.member_authorization"
--         Column        |            Type             | Collation | Nullable |                                          Default                                           
-- ----------------------+-----------------------------+-----------+----------+--------------------------------------------------------------------------------------------
--  id                   | text                        |           | not null | generate_typed_uuid('ma'::text)
--  granted_chat_id      | text                        |           |          | 
--  granted_bot_id       | text                        |           |          | 
--  granted_group_id     | text                        |           |          | 
--  granted_entity_type  | text                        |           |          | 
--  access_level         | character varying(512)      |           | not null | 
--  is_base_access_level | boolean                     |           |          | generated always as (is_base_access_level(granted_entity_type, access_level::text)) stored
--  user_id              | text                        |           |          | 
--  bot_id               | text                        |           |          | 
--  group_id             | text                        |           |          | 
--  created_date         | timestamp without time zone |           | not null | (now() AT TIME ZONE 'utc'::text)
--  created_by           | text                        |           |          | current_rsn_user_id()
--  granted_entity_id    | text                        |           |          | generated always as (COALESCE(granted_chat_id, granted_bot_id, granted_group_id)) stored
--  agent_id             | text                        |           |          | generated always as (COALESCE(user_id, bot_id, group_id)) stored
--  agent_type           | agent_type                  |           |          | generated always as (                                                                     +
--                       |                             |           |          | CASE                                                                                      +
--                       |                             |           |          |     WHEN user_id IS NULL THEN                                                             +
--                       |                             |           |          |     CASE                                                                                  +
--                       |                             |           |          |         WHEN bot_id IS NULL THEN 'group'::agent_type                                      +
--                       |                             |           |          |         ELSE 'bot'::agent_type                                                            +
--                       |                             |           |          |     END                                                                                   +
--                       |                             |           |          |     ELSE 'user'::agent_type                                                               +
--                       |                             |           |          | END) stored
--  updated_by           | text                        |           |          | 
--  updated_date         | timestamp with time zone    |           |          | now()
-- Indexes:
--     "member_authorization_pkey" PRIMARY KEY, btree (id)
--     "member_authorization_member_entity_type_id_access_level_key" UNIQUE CONSTRAINT, btree (agent_id, granted_entity_type, granted_entity_id, access_level)
-- Check constraints:
--     "ma_type_matches_typename" CHECK (granted_chat_id IS NOT NULL AND granted_entity_type = 'chat'::text OR granted_bot_id IS NOT NULL AND granted_entity_type = 'bot'::text OR granted_group_id IS NOT NULL AND granted_entity_type = 'group'::text)
--     "member_auth__id__check_prefix" CHECK (is_valid_typed_uuid('ma'::text, id::typed_uuid))
--     "member_authorization_check" CHECK (((granted_chat_id IS NOT NULL)::integer + (granted_bot_id IS NOT NULL)::integer + (granted_group_id IS NOT NULL)::integer) = 1)
--     "one_member_only_check" CHECK (((user_id IS NOT NULL)::integer + (bot_id IS NOT NULL)::integer + (group_id IS NOT NULL)::integer) = 1)
-- Foreign-key constraints:
--     "member_authorization_bot_id_fkey" FOREIGN KEY (bot_id) REFERENCES bot(id) ON DELETE CASCADE
--     "member_authorization_granted_bot_id_fkey" FOREIGN KEY (granted_bot_id) REFERENCES bot(id) ON DELETE CASCADE
--     "member_authorization_granted_chat_id_fkey" FOREIGN KEY (granted_chat_id) REFERENCES chat(id) ON DELETE CASCADE
--     "member_authorization_granted_group_id_fkey" FOREIGN KEY (granted_group_id) REFERENCES "group"(id) ON DELETE CASCADE
--     "member_authorization_group_id_fkey" FOREIGN KEY (group_id) REFERENCES "group"(id) ON DELETE CASCADE
--     "member_authorization_user_id_fkey" FOREIGN KEY (user_id) REFERENCES rsn_user(id) ON DELETE CASCADE
-- Policies:
--     POLICY "member_authorization DELETE" FOR DELETE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "member_authorization INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "member_authorization SELECT" FOR SELECT
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "member_authorization UPDATE" FOR UPDATE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "member_authorization__anon__delete" FOR DELETE
--       TO anon
--       USING (false)
--     POLICY "member_authorization__anon__insert" FOR INSERT
--       TO anon
--       WITH CHECK (false)
--     POLICY "member_authorization__anon__select" FOR SELECT
--       TO anon
--       USING (false)
--     POLICY "member_authorization__anon__update" FOR UPDATE
--       TO anon
--       USING (false)
--     POLICY "member_authorization__authenticated__delete" FOR DELETE
--       TO authenticated
--       USING (simple_auth_check(created_by, created_date))
--     POLICY "member_authorization__authenticated__insert" FOR INSERT
--       TO authenticated
--       WITH CHECK (simple_auth_check(created_by, created_date))
--     POLICY "member_authorization__authenticated__select" FOR SELECT
--       TO authenticated
--       USING (simple_auth_check(created_by, created_date))
--     POLICY "member_authorization__authenticated__update" FOR UPDATE
--       TO authenticated
--       USING (simple_auth_check(created_by, created_date))
--     POLICY "member_authorization__service_role__delete" FOR DELETE
--       TO service_role
--       USING (true)
--     POLICY "member_authorization__service_role__insert" FOR INSERT
--       TO service_role
--       WITH CHECK (true)
--     POLICY "member_authorization__service_role__select" FOR SELECT
--       TO service_role
--       USING (true)
--     POLICY "member_authorization__service_role__update" FOR UPDATE
--       TO service_role
--       USING (true)
-- Triggers:
--     handle_audit_properties BEFORE INSERT OR UPDATE ON member_authorization FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON member_authorization FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.member_authorization)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.member_authorization)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: member_authorization; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.member_authorization (
    id text DEFAULT public.generate_typed_uuid('ma'::text) NOT NULL,
    granted_chat_id text,
    granted_bot_id text,
    granted_group_id text,
    granted_entity_type text,
    access_level character varying(512) NOT NULL,
    is_base_access_level boolean GENERATED ALWAYS AS (public.is_base_access_level(granted_entity_type, (access_level)::text)) STORED,
    user_id text,
    bot_id text,
    group_id text,
    created_date timestamp without time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
    created_by text DEFAULT public.current_rsn_user_id(),
    granted_entity_id text GENERATED ALWAYS AS (COALESCE(granted_chat_id, granted_bot_id, granted_group_id)) STORED,
    agent_id text GENERATED ALWAYS AS (COALESCE(user_id, bot_id, group_id)) STORED,
    agent_type public.agent_type GENERATED ALWAYS AS (
CASE
    WHEN (user_id IS NULL) THEN
    CASE
        WHEN (bot_id IS NULL) THEN 'group'::public.agent_type
        ELSE 'bot'::public.agent_type
    END
    ELSE 'user'::public.agent_type
END) STORED,
    updated_by text,
    updated_date timestamp with time zone DEFAULT now(),
    CONSTRAINT ma_type_matches_typename CHECK ((((granted_chat_id IS NOT NULL) AND (granted_entity_type = 'chat'::text)) OR ((granted_bot_id IS NOT NULL) AND (granted_entity_type = 'bot'::text)) OR ((granted_group_id IS NOT NULL) AND (granted_entity_type = 'group'::text)))),
    CONSTRAINT member_auth__id__check_prefix CHECK (public.is_valid_typed_uuid('ma'::text, (id)::public.typed_uuid)),
    CONSTRAINT member_authorization_check CHECK ((((((granted_chat_id IS NOT NULL))::integer + ((granted_bot_id IS NOT NULL))::integer) + ((granted_group_id IS NOT NULL))::integer) = 1)),
    CONSTRAINT one_member_only_check CHECK ((((((user_id IS NOT NULL))::integer + ((bot_id IS NOT NULL))::integer) + ((group_id IS NOT NULL))::integer) = 1))
);


ALTER TABLE public.member_authorization OWNER TO postgres;

--
-- Name: TABLE member_authorization; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.member_authorization IS '@graphql({"totalCount": {"enabled": true}})';


--
-- Name: member_authorization member_authorization_member_entity_type_id_access_level_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_member_entity_type_id_access_level_key UNIQUE (agent_id, granted_entity_type, granted_entity_id, access_level);


--
-- Name: member_authorization member_authorization_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_pkey PRIMARY KEY (id);


--
-- Name: member_authorization handle_audit_properties; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_audit_properties BEFORE INSERT OR UPDATE ON public.member_authorization FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: member_authorization log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.member_authorization FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: member_authorization member_authorization_bot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_bot_id_fkey FOREIGN KEY (bot_id) REFERENCES public.bot(id) ON DELETE CASCADE;


--
-- Name: member_authorization member_authorization_granted_bot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_granted_bot_id_fkey FOREIGN KEY (granted_bot_id) REFERENCES public.bot(id) ON DELETE CASCADE;


--
-- Name: member_authorization member_authorization_granted_chat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_granted_chat_id_fkey FOREIGN KEY (granted_chat_id) REFERENCES public.chat(id) ON DELETE CASCADE;


--
-- Name: member_authorization member_authorization_granted_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_granted_group_id_fkey FOREIGN KEY (granted_group_id) REFERENCES public."group"(id) ON DELETE CASCADE;


--
-- Name: member_authorization member_authorization_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_group_id_fkey FOREIGN KEY (group_id) REFERENCES public."group"(id) ON DELETE CASCADE;


--
-- Name: member_authorization member_authorization_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.member_authorization
    ADD CONSTRAINT member_authorization_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: member_authorization; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.member_authorization ENABLE ROW LEVEL SECURITY;

--
-- Name: member_authorization member_authorization DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "member_authorization DELETE" ON public.member_authorization FOR DELETE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: member_authorization member_authorization INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "member_authorization INSERT" ON public.member_authorization FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: member_authorization member_authorization SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "member_authorization SELECT" ON public.member_authorization FOR SELECT USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: member_authorization member_authorization UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "member_authorization UPDATE" ON public.member_authorization FOR UPDATE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: member_authorization member_authorization__anon__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__anon__delete ON public.member_authorization FOR DELETE TO anon USING (false);


--
-- Name: member_authorization member_authorization__anon__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__anon__insert ON public.member_authorization FOR INSERT TO anon WITH CHECK (false);


--
-- Name: member_authorization member_authorization__anon__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__anon__select ON public.member_authorization FOR SELECT TO anon USING (false);


--
-- Name: member_authorization member_authorization__anon__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__anon__update ON public.member_authorization FOR UPDATE TO anon USING (false);


--
-- Name: member_authorization member_authorization__authenticated__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__authenticated__delete ON public.member_authorization FOR DELETE TO authenticated USING (public.simple_auth_check(created_by, created_date));


--
-- Name: member_authorization member_authorization__authenticated__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__authenticated__insert ON public.member_authorization FOR INSERT TO authenticated WITH CHECK (public.simple_auth_check(created_by, created_date));


--
-- Name: member_authorization member_authorization__authenticated__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__authenticated__select ON public.member_authorization FOR SELECT TO authenticated USING (public.simple_auth_check(created_by, created_date));


--
-- Name: member_authorization member_authorization__authenticated__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__authenticated__update ON public.member_authorization FOR UPDATE TO authenticated USING (public.simple_auth_check(created_by, created_date));


--
-- Name: member_authorization member_authorization__service_role__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__service_role__delete ON public.member_authorization FOR DELETE TO service_role USING (true);


--
-- Name: member_authorization member_authorization__service_role__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__service_role__insert ON public.member_authorization FOR INSERT TO service_role WITH CHECK (true);


--
-- Name: member_authorization member_authorization__service_role__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__service_role__select ON public.member_authorization FOR SELECT TO service_role USING (true);


--
-- Name: member_authorization member_authorization__service_role__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY member_authorization__service_role__update ON public.member_authorization FOR UPDATE TO service_role USING (true);


--
-- Name: TABLE member_authorization; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.member_authorization TO anon;
GRANT ALL ON TABLE public.member_authorization TO authenticated;
GRANT ALL ON TABLE public.member_authorization TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.member_authorization)
---------------------------------------------------------------------------

