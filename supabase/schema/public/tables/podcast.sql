---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.podcast

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.podcast)
------------------------------
--                                             Table "public.podcast"
--         Column        |           Type           | Collation | Nullable |               Default                
-- ----------------------+--------------------------+-----------+----------+--------------------------------------
--  id                   | text                     |           | not null | generate_typed_uuid('podcast'::text)
--  for_user             | text                     |           |          | 
--  title                | text                     |           | not null | 
--  topic                | text                     |           | not null | 
--  podcast_type         | text                     |           | not null | 
--  created_date         | timestamp with time zone |           | not null | now()
--  updated_date         | timestamp with time zone |           | not null | now()
--  created_by           | text                     |           |          | 
--  updated_by           | text                     |           |          | 
--  transcript           | jsonb                    |           |          | 
--  metadata             | jsonb                    |           |          | 
--  special_instructions | text                     |           |          | 
--  outline              | jsonb                    |           |          | 
--  is_shared_version    | boolean                  |           | not null | false
--  original_podcast_id  | text                     |           |          | 
--  for_skill_path       | text[]                   |           |          | 
-- Indexes:
--     "podcast_pkey" PRIMARY KEY, btree (id)
--     "idx_podcast_creator_date" btree (created_by, created_date)
-- Check constraints:
--     "podcast_id_check" CHECK (is_valid_typed_uuid('podcast'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "fk_original_podcast" FOREIGN KEY (original_podcast_id) REFERENCES podcast(id)
--     "podcast_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "podcast_for_user_fkey" FOREIGN KEY (for_user) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "podcast_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "podcast" CONSTRAINT "fk_original_podcast" FOREIGN KEY (original_podcast_id) REFERENCES podcast(id)
--     TABLE "podcast_line" CONSTRAINT "podcast_line_podcast_id_fkey" FOREIGN KEY (podcast_id) REFERENCES podcast(id) ON DELETE CASCADE
--     TABLE "podcast_queue_item" CONSTRAINT "podcast_queue_item_podcast_id_fkey" FOREIGN KEY (podcast_id) REFERENCES podcast(id) ON DELETE CASCADE
--     TABLE "resource" CONSTRAINT "resource_parent_podcast_id_fkey" FOREIGN KEY (parent_podcast_id) REFERENCES podcast(id) ON DELETE SET NULL
--     TABLE "user_history" CONSTRAINT "user_history_podcast_id_fkey" FOREIGN KEY (podcast_id) REFERENCES podcast(id) ON DELETE CASCADE
-- Policies:
--     POLICY "Allow read access to shared podcasts" FOR SELECT
--       USING ((is_shared_version = true))
--     POLICY "podcast DELETE" FOR DELETE
--       USING (((created_by = (current_rsn_user_id())::text) OR (for_user = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "podcast INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR (for_user = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "podcast SELECT" FOR SELECT
--       USING (((created_by = (current_rsn_user_id())::text) OR (for_user = (current_rsn_user_id())::text) OR is_admin() OR (is_shared_version = true)))
--     POLICY "podcast UPDATE" FOR UPDATE
--       USING (((created_by = (current_rsn_user_id())::text) OR (for_user = (current_rsn_user_id())::text) OR is_admin()))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON podcast FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON podcast FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.podcast)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.podcast)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: podcast; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.podcast (
    id text DEFAULT public.generate_typed_uuid('podcast'::text) NOT NULL,
    for_user text,
    title text NOT NULL,
    topic text NOT NULL,
    podcast_type text NOT NULL,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    transcript jsonb,
    metadata jsonb,
    special_instructions text,
    outline jsonb,
    is_shared_version boolean DEFAULT false NOT NULL,
    original_podcast_id text,
    for_skill_path text[],
    CONSTRAINT podcast_id_check CHECK (public.is_valid_typed_uuid('podcast'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.podcast OWNER TO postgres;

--
-- Name: TABLE podcast; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.podcast IS 'A podcast is a collection of podcast lines that are used to create a podcast.';


--
-- Name: COLUMN podcast.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.id IS 'The ID of the podcast.';


--
-- Name: COLUMN podcast.for_user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.for_user IS 'The user that the podcast is for.';


--
-- Name: COLUMN podcast.title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.title IS 'The title of the podcast.';


--
-- Name: COLUMN podcast.topic; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.topic IS 'The topic of the podcast.';


--
-- Name: COLUMN podcast.podcast_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.podcast_type IS 'The type of podcast.';


--
-- Name: COLUMN podcast.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.created_date IS 'The date that this podcast was created.';


--
-- Name: COLUMN podcast.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast.updated_date IS 'The date that this podcast was last updated.';


--
-- Name: podcast podcast_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT podcast_pkey PRIMARY KEY (id);


--
-- Name: idx_podcast_creator_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_podcast_creator_date ON public.podcast USING btree (created_by, created_date);


--
-- Name: podcast log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.podcast FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: podcast run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.podcast FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: podcast fk_original_podcast; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT fk_original_podcast FOREIGN KEY (original_podcast_id) REFERENCES public.podcast(id);


--
-- Name: podcast podcast_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT podcast_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: podcast podcast_for_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT podcast_for_user_fkey FOREIGN KEY (for_user) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: podcast podcast_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT podcast_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: podcast Allow read access to shared podcasts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow read access to shared podcasts" ON public.podcast FOR SELECT USING ((is_shared_version = true));


--
-- Name: podcast; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.podcast ENABLE ROW LEVEL SECURITY;

--
-- Name: podcast podcast DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast DELETE" ON public.podcast FOR DELETE USING (((created_by = (public.current_rsn_user_id())::text) OR (for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: podcast podcast INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast INSERT" ON public.podcast FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR (for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: podcast podcast SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast SELECT" ON public.podcast FOR SELECT USING (((created_by = (public.current_rsn_user_id())::text) OR (for_user = (public.current_rsn_user_id())::text) OR public.is_admin() OR (is_shared_version = true)));


--
-- Name: podcast podcast UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast UPDATE" ON public.podcast FOR UPDATE USING (((created_by = (public.current_rsn_user_id())::text) OR (for_user = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: TABLE podcast; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.podcast TO anon;
GRANT ALL ON TABLE public.podcast TO authenticated;
GRANT ALL ON TABLE public.podcast TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.podcast)
---------------------------------------------------------------------------

