---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.rsn_page

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.rsn_page)
------------------------------
--                                              Table "public.rsn_page"
--       Column       |           Type           | Collation | Nullable |                  Default                  
-- -------------------+--------------------------+-----------+----------+-------------------------------------------
--  id                | text                     |           | not null | generate_typed_uuid('rsnpage'::text)
--  _name             | text                     |           |          | 
--  metadata          | jsonb                    |           |          | 
--  body              | text                     |           |          | 
--  parent            | text                     |           |          | 
--  body_length       | integer                  |           |          | generated always as (length(body)) stored
--  created_date      | timestamp with time zone |           | not null | now()
--  updated_date      | timestamp with time zone |           | not null | now()
--  created_by        | text                     |           |          | 
--  updated_by        | text                     |           |          | 
--  _description      | text                     |           |          | 
--  body_sha_256      | text                     |           |          | 
--  original_filename | text                     |           |          | 
--  storage_path      | text                     |           |          | 
--  file_type         | text                     |           |          | 
-- Indexes:
--     "rsn_page_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "rsnpage__id__check_prefix" CHECK (is_valid_typed_uuid('rsnpage'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "rsn_page_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "rsn_page_parent_fkey" FOREIGN KEY (parent) REFERENCES rsn_page(id) ON DELETE CASCADE
--     "rsn_page_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "resource" CONSTRAINT "resource_child_page_id_fkey" FOREIGN KEY (child_page_id) REFERENCES rsn_page(id) ON DELETE SET NULL
--     TABLE "rsn_page" CONSTRAINT "rsn_page_parent_fkey" FOREIGN KEY (parent) REFERENCES rsn_page(id) ON DELETE CASCADE
--     TABLE "rsn_page_vector" CONSTRAINT "rsn_page_vector_rsn_page_id_fkey" FOREIGN KEY (rsn_page_id) REFERENCES rsn_page(id) ON DELETE CASCADE
--     TABLE "skill" CONSTRAINT "skill__context_page__fkey" FOREIGN KEY (context_page) REFERENCES rsn_page(id) ON DELETE SET NULL
--     TABLE "skill_page" CONSTRAINT "skill_page_rsn_page_id_fkey" FOREIGN KEY (rsn_page_id) REFERENCES rsn_page(id) ON DELETE CASCADE
-- Policies:
--     POLICY "rsn_page DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_rsn_page_memauth vrpm
--   WHERE ((vrpm.page_id = rsn_page.id) AND ((vrpm.principal_id = (current_rsn_user_id())::text) OR (vrpm.is_public = true)) AND ('rsn_page.DELETE'::text = ANY (vrpm.permissions))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
--     POLICY "rsn_page INSERT" FOR INSERT
--       WITH CHECK (((current_rsn_user_id() IS NOT NULL) OR is_admin()))
--     POLICY "rsn_page SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_rsn_page_memauth vrpm
--   WHERE ((vrpm.page_id = rsn_page.id) AND ((vrpm.principal_id = (current_rsn_user_id())::text) OR (vrpm.is_public = true)) AND ('rsn_page.SELECT'::text = ANY (vrpm.permissions))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
--     POLICY "rsn_page UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_rsn_page_memauth vrpm
--   WHERE ((vrpm.page_id = rsn_page.id) AND ((vrpm.principal_id = (current_rsn_user_id())::text) OR (vrpm.is_public = true)) AND ('rsn_page.UPDATE'::text = ANY (vrpm.permissions))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON rsn_page FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     rsn_page__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON rsn_page FOR EACH ROW EXECUTE FUNCTION tgr_rsn_vec_queue_insert_update()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON rsn_page FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     trigger_update_body_sha_256 BEFORE INSERT OR UPDATE ON rsn_page FOR EACH ROW EXECUTE FUNCTION update_body_sha_256()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.rsn_page)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.rsn_page)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: rsn_page; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.rsn_page (
    id text DEFAULT public.generate_typed_uuid('rsnpage'::text) NOT NULL,
    _name text,
    metadata jsonb,
    body text,
    parent text,
    body_length integer GENERATED ALWAYS AS (length(body)) STORED,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    _description text,
    body_sha_256 text,
    original_filename text,
    storage_path text,
    file_type text,
    CONSTRAINT rsnpage__id__check_prefix CHECK (public.is_valid_typed_uuid('rsnpage'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.rsn_page OWNER TO postgres;

--
-- Name: TABLE rsn_page; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.rsn_page IS 'A page in reasonote.';


--
-- Name: COLUMN rsn_page._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page._name IS 'The name of the page.';


--
-- Name: COLUMN rsn_page.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.metadata IS 'Metadata for the page.';


--
-- Name: COLUMN rsn_page.body; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.body IS 'The body of the page.';


--
-- Name: COLUMN rsn_page.parent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.parent IS 'The parent page.';


--
-- Name: COLUMN rsn_page.body_length; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.body_length IS 'The length of the body.';


--
-- Name: COLUMN rsn_page.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.created_date IS 'The date the page was created.';


--
-- Name: COLUMN rsn_page.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.updated_date IS 'The date the page was last updated.';


--
-- Name: COLUMN rsn_page.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.created_by IS 'The user that created the page.';


--
-- Name: COLUMN rsn_page.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.updated_by IS 'The user that last updated the page.';


--
-- Name: COLUMN rsn_page.original_filename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.original_filename IS 'The original filename of the uploaded file';


--
-- Name: COLUMN rsn_page.storage_path; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.storage_path IS 'The storage path of the file in the attachment-uploads bucket';


--
-- Name: COLUMN rsn_page.file_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.rsn_page.file_type IS 'The MIME type of the uploaded file';


--
-- Name: rsn_page rsn_page_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rsn_page
    ADD CONSTRAINT rsn_page_pkey PRIMARY KEY (id);


--
-- Name: rsn_page log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.rsn_page FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: rsn_page rsn_page__tgr_rsn_vec_queue_insert_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER rsn_page__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON public.rsn_page FOR EACH ROW EXECUTE FUNCTION public.tgr_rsn_vec_queue_insert_update();


--
-- Name: rsn_page run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.rsn_page FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: rsn_page trigger_update_body_sha_256; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_body_sha_256 BEFORE INSERT OR UPDATE ON public.rsn_page FOR EACH ROW EXECUTE FUNCTION public.update_body_sha_256();


--
-- Name: rsn_page rsn_page_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rsn_page
    ADD CONSTRAINT rsn_page_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: rsn_page rsn_page_parent_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rsn_page
    ADD CONSTRAINT rsn_page_parent_fkey FOREIGN KEY (parent) REFERENCES public.rsn_page(id) ON DELETE CASCADE;


--
-- Name: rsn_page rsn_page_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rsn_page
    ADD CONSTRAINT rsn_page_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: rsn_page; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.rsn_page ENABLE ROW LEVEL SECURITY;

--
-- Name: rsn_page rsn_page DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_page DELETE" ON public.rsn_page FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_rsn_page_memauth vrpm
  WHERE ((vrpm.page_id = rsn_page.id) AND ((vrpm.principal_id = (public.current_rsn_user_id())::text) OR (vrpm.is_public = true)) AND ('rsn_page.DELETE'::text = ANY (vrpm.permissions))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: rsn_page rsn_page INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_page INSERT" ON public.rsn_page FOR INSERT WITH CHECK (((public.current_rsn_user_id() IS NOT NULL) OR public.is_admin()));


--
-- Name: rsn_page rsn_page SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_page SELECT" ON public.rsn_page FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_rsn_page_memauth vrpm
  WHERE ((vrpm.page_id = rsn_page.id) AND ((vrpm.principal_id = (public.current_rsn_user_id())::text) OR (vrpm.is_public = true)) AND ('rsn_page.SELECT'::text = ANY (vrpm.permissions))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: rsn_page rsn_page UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_page UPDATE" ON public.rsn_page FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_rsn_page_memauth vrpm
  WHERE ((vrpm.page_id = rsn_page.id) AND ((vrpm.principal_id = (public.current_rsn_user_id())::text) OR (vrpm.is_public = true)) AND ('rsn_page.UPDATE'::text = ANY (vrpm.permissions))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE rsn_page; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.rsn_page TO anon;
GRANT ALL ON TABLE public.rsn_page TO authenticated;
GRANT ALL ON TABLE public.rsn_page TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.rsn_page)
---------------------------------------------------------------------------

