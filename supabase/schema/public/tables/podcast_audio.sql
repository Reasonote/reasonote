---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.podcast_audio

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.podcast_audio)
------------------------------
--                                        Table "public.podcast_audio"
--      Column      |           Type           | Collation | Nullable |                Default                
-- -----------------+--------------------------+-----------+----------+---------------------------------------
--  id              | text                     |           | not null | generate_typed_uuid('podaudio'::text)
--  podcast_line_id | text                     |           | not null | 
--  speed           | numeric(3,2)             |           | not null | 
--  audio_file      | text                     |           | not null | 
--  created_date    | timestamp with time zone |           |          | CURRENT_TIMESTAMP
--  updated_date    | timestamp with time zone |           |          | CURRENT_TIMESTAMP
--  created_by      | text                     |           |          | 
--  updated_by      | text                     |           |          | 
-- Indexes:
--     "podcast_audio_pkey" PRIMARY KEY, btree (id)
--     "idx_podcast_audio_podcast_line_id_speed" btree (podcast_line_id, speed)
--     "podcast_audio_podcast_line_id_speed_key" UNIQUE CONSTRAINT, btree (podcast_line_id, speed)
-- Check constraints:
--     "podcast_id_check" CHECK (is_valid_typed_uuid('podaudio'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "podcast_audio_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "podcast_audio_podcast_line_id_fkey" FOREIGN KEY (podcast_line_id) REFERENCES podcast_line(id) ON DELETE CASCADE
--     "podcast_audio_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "podcast_audio DELETE" FOR DELETE
--       USING ((podcast_line_id IN ( SELECT podcast_line.id
--    FROM podcast_line
--   WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
--            FROM podcast
--           WHERE ((podcast.created_by = (current_rsn_user_id())::text) OR (podcast.for_user = (current_rsn_user_id())::text) OR is_admin()))))))
--     POLICY "podcast_audio INSERT" FOR INSERT
--       WITH CHECK ((podcast_line_id IN ( SELECT podcast_line.id
--    FROM podcast_line
--   WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
--            FROM podcast
--           WHERE ((podcast.created_by = (current_rsn_user_id())::text) OR (podcast.for_user = (current_rsn_user_id())::text) OR is_admin()))))))
--     POLICY "podcast_audio SELECT" FOR SELECT
--       USING ((podcast_line_id IN ( SELECT podcast_line.id
--    FROM podcast_line
--   WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
--            FROM podcast
--           WHERE ((podcast.created_by = (current_rsn_user_id())::text) OR (podcast.for_user = (current_rsn_user_id())::text) OR is_admin() OR (podcast.is_shared_version = true)))))))
--     POLICY "podcast_audio UPDATE" FOR UPDATE
--       USING ((podcast_line_id IN ( SELECT podcast_line.id
--    FROM podcast_line
--   WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
--            FROM podcast
--           WHERE ((podcast.created_by = (current_rsn_user_id())::text) OR (podcast.for_user = (current_rsn_user_id())::text) OR is_admin()))))))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON podcast_audio FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON podcast_audio FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.podcast_audio)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.podcast_audio)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: podcast_audio; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.podcast_audio (
    id text DEFAULT public.generate_typed_uuid('podaudio'::text) NOT NULL,
    podcast_line_id text NOT NULL,
    speed numeric(3,2) NOT NULL,
    audio_file text NOT NULL,
    created_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    created_by text,
    updated_by text,
    CONSTRAINT podcast_id_check CHECK (public.is_valid_typed_uuid('podaudio'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.podcast_audio OWNER TO postgres;

--
-- Name: TABLE podcast_audio; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.podcast_audio IS 'A podcast audio is a audio for a podcast line.';


--
-- Name: COLUMN podcast_audio.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.id IS 'The ID of the podcast audio.';


--
-- Name: COLUMN podcast_audio.podcast_line_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.podcast_line_id IS 'The ID of the podcast line that this audio is for.';


--
-- Name: COLUMN podcast_audio.speed; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.speed IS 'The speed of the audio.';


--
-- Name: COLUMN podcast_audio.audio_file; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.audio_file IS 'The audio file for the podcast line.';


--
-- Name: COLUMN podcast_audio.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.created_date IS 'The date that this podcast audio was created.';


--
-- Name: COLUMN podcast_audio.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.updated_date IS 'The date that this podcast audio was last updated.';


--
-- Name: COLUMN podcast_audio.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.created_by IS 'The user that created this podcast audio.';


--
-- Name: COLUMN podcast_audio.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.podcast_audio.updated_by IS 'The user that last updated this podcast audio.';


--
-- Name: podcast_audio podcast_audio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_audio
    ADD CONSTRAINT podcast_audio_pkey PRIMARY KEY (id);


--
-- Name: podcast_audio podcast_audio_podcast_line_id_speed_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_audio
    ADD CONSTRAINT podcast_audio_podcast_line_id_speed_key UNIQUE (podcast_line_id, speed);


--
-- Name: idx_podcast_audio_podcast_line_id_speed; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_podcast_audio_podcast_line_id_speed ON public.podcast_audio USING btree (podcast_line_id, speed);


--
-- Name: podcast_audio log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.podcast_audio FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: podcast_audio run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.podcast_audio FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: podcast_audio podcast_audio_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_audio
    ADD CONSTRAINT podcast_audio_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: podcast_audio podcast_audio_podcast_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_audio
    ADD CONSTRAINT podcast_audio_podcast_line_id_fkey FOREIGN KEY (podcast_line_id) REFERENCES public.podcast_line(id) ON DELETE CASCADE;


--
-- Name: podcast_audio podcast_audio_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast_audio
    ADD CONSTRAINT podcast_audio_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: podcast_audio; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.podcast_audio ENABLE ROW LEVEL SECURITY;

--
-- Name: podcast_audio podcast_audio DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_audio DELETE" ON public.podcast_audio FOR DELETE USING ((podcast_line_id IN ( SELECT podcast_line.id
   FROM public.podcast_line
  WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
           FROM public.podcast
          WHERE ((podcast.created_by = (public.current_rsn_user_id())::text) OR (podcast.for_user = (public.current_rsn_user_id())::text) OR public.is_admin()))))));


--
-- Name: podcast_audio podcast_audio INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_audio INSERT" ON public.podcast_audio FOR INSERT WITH CHECK ((podcast_line_id IN ( SELECT podcast_line.id
   FROM public.podcast_line
  WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
           FROM public.podcast
          WHERE ((podcast.created_by = (public.current_rsn_user_id())::text) OR (podcast.for_user = (public.current_rsn_user_id())::text) OR public.is_admin()))))));


--
-- Name: podcast_audio podcast_audio SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_audio SELECT" ON public.podcast_audio FOR SELECT USING ((podcast_line_id IN ( SELECT podcast_line.id
   FROM public.podcast_line
  WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
           FROM public.podcast
          WHERE ((podcast.created_by = (public.current_rsn_user_id())::text) OR (podcast.for_user = (public.current_rsn_user_id())::text) OR public.is_admin() OR (podcast.is_shared_version = true)))))));


--
-- Name: podcast_audio podcast_audio UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "podcast_audio UPDATE" ON public.podcast_audio FOR UPDATE USING ((podcast_line_id IN ( SELECT podcast_line.id
   FROM public.podcast_line
  WHERE (podcast_line.podcast_id IN ( SELECT podcast.id
           FROM public.podcast
          WHERE ((podcast.created_by = (public.current_rsn_user_id())::text) OR (podcast.for_user = (public.current_rsn_user_id())::text) OR public.is_admin()))))));


--
-- Name: TABLE podcast_audio; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.podcast_audio TO anon;
GRANT ALL ON TABLE public.podcast_audio TO authenticated;
GRANT ALL ON TABLE public.podcast_audio TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.podcast_audio)
---------------------------------------------------------------------------

