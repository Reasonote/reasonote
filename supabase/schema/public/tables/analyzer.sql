---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.analyzer

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.analyzer)
------------------------------
--                                          Table "public.analyzer"
--     Column     |           Type           | Collation | Nullable |                Default                
-- ---------------+--------------------------+-----------+----------+---------------------------------------
--  id            | text                     |           | not null | generate_typed_uuid('analyzer'::text)
--  _name         | text                     |           |          | 
--  _description  | text                     |           |          | 
--  ai_prompt     | text                     |           |          | 
--  ai_jsonschema | jsonb                    |           |          | 
--  metadata      | jsonb                    |           |          | 
--  created_date  | timestamp with time zone |           | not null | now()
--  updated_date  | timestamp with time zone |           | not null | now()
--  created_by    | text                     |           |          | 
--  updated_by    | text                     |           |          | 
-- Indexes:
--     "analyzer_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "analyzer_id_check" CHECK (is_valid_typed_uuid('analyzer'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "analyzer_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "analyzer_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "analyzer DELETE" FOR DELETE
--       USING (((current_rsn_user_id())::text = created_by))
--     POLICY "analyzer INSERT" FOR INSERT
--       WITH CHECK (((current_rsn_user_id())::text = created_by))
--     POLICY "analyzer SELECT" FOR SELECT
--       USING (((current_rsn_user_id())::text = created_by))
--     POLICY "analyzer UPDATE" FOR UPDATE
--       USING (((current_rsn_user_id())::text = created_by))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON analyzer FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON analyzer FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.analyzer)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.analyzer)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: analyzer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analyzer (
    id text DEFAULT public.generate_typed_uuid('analyzer'::text) NOT NULL,
    _name text,
    _description text,
    ai_prompt text,
    ai_jsonschema jsonb,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT analyzer_id_check CHECK (public.is_valid_typed_uuid('analyzer'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.analyzer OWNER TO postgres;

--
-- Name: TABLE analyzer; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.analyzer IS 'An analyzer is a tool that can be used to analyze a document or a set of documents.';


--
-- Name: COLUMN analyzer.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.id IS 'The unique identifier for the analyzer.';


--
-- Name: COLUMN analyzer._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer._name IS 'The name of the analyzer.';


--
-- Name: COLUMN analyzer._description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer._description IS 'The description of the analyzer.';


--
-- Name: COLUMN analyzer.ai_prompt; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.ai_prompt IS 'The prompt for the AI to use when analyzing a document.';


--
-- Name: COLUMN analyzer.ai_jsonschema; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.ai_jsonschema IS 'The JSON schema output for the analyzer, passed to the AI.';


--
-- Name: COLUMN analyzer.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.metadata IS 'The metadata for the analyzer.';


--
-- Name: COLUMN analyzer.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.created_date IS 'The date that this analyzer was created.';


--
-- Name: COLUMN analyzer.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.updated_date IS 'The date that this analyzer was last updated.';


--
-- Name: COLUMN analyzer.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.created_by IS 'The user that created this analyzer.';


--
-- Name: COLUMN analyzer.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.analyzer.updated_by IS 'The user that last updated this analyzer.';


--
-- Name: analyzer analyzer_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analyzer
    ADD CONSTRAINT analyzer_pkey PRIMARY KEY (id);


--
-- Name: analyzer log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.analyzer FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: analyzer run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.analyzer FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: analyzer analyzer_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analyzer
    ADD CONSTRAINT analyzer_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: analyzer analyzer_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analyzer
    ADD CONSTRAINT analyzer_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: analyzer; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.analyzer ENABLE ROW LEVEL SECURITY;

--
-- Name: analyzer analyzer DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "analyzer DELETE" ON public.analyzer FOR DELETE USING (((public.current_rsn_user_id())::text = created_by));


--
-- Name: analyzer analyzer INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "analyzer INSERT" ON public.analyzer FOR INSERT WITH CHECK (((public.current_rsn_user_id())::text = created_by));


--
-- Name: analyzer analyzer SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "analyzer SELECT" ON public.analyzer FOR SELECT USING (((public.current_rsn_user_id())::text = created_by));


--
-- Name: analyzer analyzer UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "analyzer UPDATE" ON public.analyzer FOR UPDATE USING (((public.current_rsn_user_id())::text = created_by));


--
-- Name: TABLE analyzer; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.analyzer TO anon;
GRANT ALL ON TABLE public.analyzer TO authenticated;
GRANT ALL ON TABLE public.analyzer TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.analyzer)
---------------------------------------------------------------------------

