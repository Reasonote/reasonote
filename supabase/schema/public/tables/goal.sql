---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.goal

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.goal)
------------------------------
--                                          Table "public.goal"
--      Column     |           Type           | Collation | Nullable |              Default              
-- ----------------+--------------------------+-----------+----------+-----------------------------------
--  id             | text                     |           | not null | generate_typed_uuid('goal'::text)
--  _name          | text                     |           | not null | 
--  _type          | text                     |           |          | 
--  metadata       | jsonb                    |           |          | 
--  due_date       | timestamp with time zone |           |          | 
--  is_completed   | boolean                  |           | not null | false
--  completed_date | timestamp with time zone |           |          | 
--  created_date   | timestamp with time zone |           | not null | now()
--  updated_date   | timestamp with time zone |           | not null | now()
--  created_by     | typed_uuid               |           |          | 
--  updated_by     | typed_uuid               |           |          | 
-- Indexes:
--     "goal_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "goal__id__check_prefix" CHECK (is_valid_typed_uuid('goal'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "goal_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "goal_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "goal DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_goal_memauth vgm
--   WHERE ((vgm.goal_id = goal.id) AND (((vgm.principal_id)::text = (current_rsn_user_id())::text) OR (vgm.is_public = true)) AND ('goal.DELETE'::text = ANY (vgm.permissions))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text)))
--     POLICY "goal INSERT" FOR INSERT
--       WITH CHECK (((auth.uid() IS NOT NULL) OR is_admin()))
--     POLICY "goal SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_goal_memauth vgm
--   WHERE ((vgm.goal_id = goal.id) AND (((vgm.principal_id)::text = (current_rsn_user_id())::text) OR (vgm.is_public = true)) AND ('goal.SELECT'::text = ANY (vgm.permissions))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text)))
--     POLICY "goal UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_goal_memauth vgm
--   WHERE ((vgm.goal_id = goal.id) AND (((vgm.principal_id)::text = (current_rsn_user_id())::text) OR (vgm.is_public = true)) AND ('goal.UPDATE'::text = ANY (vgm.permissions))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text)))
-- Triggers:
--     goal__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON goal FOR EACH ROW EXECUTE FUNCTION tgr_rsn_vec_queue_insert_update()
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON goal FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON goal FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.goal)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.goal)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: goal; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.goal (
    id text DEFAULT public.generate_typed_uuid('goal'::text) NOT NULL,
    _name text NOT NULL,
    _type text,
    metadata jsonb,
    due_date timestamp with time zone,
    is_completed boolean DEFAULT false NOT NULL,
    completed_date timestamp with time zone,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    CONSTRAINT goal__id__check_prefix CHECK (public.is_valid_typed_uuid('goal'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.goal OWNER TO postgres;

--
-- Name: goal goal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.goal
    ADD CONSTRAINT goal_pkey PRIMARY KEY (id);


--
-- Name: goal goal__tgr_rsn_vec_queue_insert_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER goal__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON public.goal FOR EACH ROW EXECUTE FUNCTION public.tgr_rsn_vec_queue_insert_update();


--
-- Name: goal log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.goal FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: goal run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.goal FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: goal goal_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.goal
    ADD CONSTRAINT goal_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: goal goal_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.goal
    ADD CONSTRAINT goal_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: goal; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.goal ENABLE ROW LEVEL SECURITY;

--
-- Name: goal goal DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "goal DELETE" ON public.goal FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_goal_memauth vgm
  WHERE ((vgm.goal_id = goal.id) AND (((vgm.principal_id)::text = (public.current_rsn_user_id())::text) OR (vgm.is_public = true)) AND ('goal.DELETE'::text = ANY (vgm.permissions))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text)));


--
-- Name: goal goal INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "goal INSERT" ON public.goal FOR INSERT WITH CHECK (((auth.uid() IS NOT NULL) OR public.is_admin()));


--
-- Name: goal goal SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "goal SELECT" ON public.goal FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_goal_memauth vgm
  WHERE ((vgm.goal_id = goal.id) AND (((vgm.principal_id)::text = (public.current_rsn_user_id())::text) OR (vgm.is_public = true)) AND ('goal.SELECT'::text = ANY (vgm.permissions))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text)));


--
-- Name: goal goal UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "goal UPDATE" ON public.goal FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_goal_memauth vgm
  WHERE ((vgm.goal_id = goal.id) AND (((vgm.principal_id)::text = (public.current_rsn_user_id())::text) OR (vgm.is_public = true)) AND ('goal.UPDATE'::text = ANY (vgm.permissions))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE goal; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.goal TO anon;
GRANT ALL ON TABLE public.goal TO authenticated;
GRANT ALL ON TABLE public.goal TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.goal)
---------------------------------------------------------------------------

