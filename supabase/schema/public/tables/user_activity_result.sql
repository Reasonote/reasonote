---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.user_activity_result

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.user_activity_result)
------------------------------
--                                                 Table "public.user_activity_result"
--       Column       |           Type           | Collation | Nullable |                           Default                            
-- -------------------+--------------------------+-----------+----------+--------------------------------------------------------------
--  id                | text                     |           | not null | generate_typed_uuid('usractinst'::text)
--  activity          | text                     |           |          | 
--  _user             | text                     |           |          | 
--  score             | double precision         |           |          | 
--  score_normalized  | double precision         |           |          | generated always as (score / 100.0::double precision) stored
--  metadata          | jsonb                    |           |          | 
--  created_date      | timestamp with time zone |           | not null | now()
--  updated_date      | timestamp with time zone |           | not null | now()
--  created_by        | typed_uuid               |           |          | 
--  updated_by        | typed_uuid               |           |          | 
--  result_data       | jsonb                    |           |          | 
--  lesson_session_id | text                     |           |          | 
--  skipped           | boolean                  |           |          | false
--  skip_reason       | text                     |           |          | 
--  submit_result     | jsonb                    |           |          | 
-- Indexes:
--     "user_activity_result_pkey" PRIMARY KEY, btree (id)
--     "idx_user_activity_result_activity" btree (activity)
--     "idx_user_activity_result_created_by" btree ((created_by::text))
--     "idx_user_activity_result_id" btree (id)
--     "idx_user_activity_result_lesson_session" btree (lesson_session_id)
--     "idx_user_activity_result_not_skipped" btree (activity, _user) WHERE skipped = false
--     "idx_user_activity_result_score" btree (activity, score)
--     "idx_user_activity_result_user" btree (_user)
--     "idx_user_activity_result_user_date" btree (_user, created_date)
-- Check constraints:
--     "user_activity_instance__id__check_prefix" CHECK (is_valid_typed_uuid('usractinst'::text, id::typed_uuid))
--     "user_activity_result_score_check" CHECK (score >= 0::double precision AND score <= 100::double precision)
-- Foreign-key constraints:
--     "user_activity_result__user_fkey" FOREIGN KEY (_user) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "user_activity_result_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE SET NULL
--     "user_activity_result_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "user_activity_result_lesson_session_id_fkey" FOREIGN KEY (lesson_session_id) REFERENCES lesson_session(id) ON DELETE SET NULL
--     "user_activity_result_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "user_activity_result DELETE" FOR DELETE
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin() OR (_user = (current_rsn_user_id())::text)))
--     POLICY "user_activity_result INSERT" FOR INSERT
--       WITH CHECK ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin() OR (_user = (current_rsn_user_id())::text)))
--     POLICY "user_activity_result SELECT" FOR SELECT
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin() OR (_user = (current_rsn_user_id())::text)))
--     POLICY "user_activity_result UPDATE" FOR UPDATE
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR is_admin() OR (_user = (current_rsn_user_id())::text)))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON user_activity_result FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON user_activity_result FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_activity_result)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.user_activity_result)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_activity_result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_activity_result (
    id text DEFAULT public.generate_typed_uuid('usractinst'::text) NOT NULL,
    activity text,
    _user text,
    score double precision,
    score_normalized double precision GENERATED ALWAYS AS ((score / (100.0)::double precision)) STORED,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    result_data jsonb,
    lesson_session_id text,
    skipped boolean DEFAULT false,
    skip_reason text,
    submit_result jsonb,
    CONSTRAINT user_activity_instance__id__check_prefix CHECK (public.is_valid_typed_uuid('usractinst'::text, (id)::public.typed_uuid)),
    CONSTRAINT user_activity_result_score_check CHECK (((score >= (0)::double precision) AND (score <= (100)::double precision)))
);


ALTER TABLE public.user_activity_result OWNER TO postgres;

--
-- Name: TABLE user_activity_result; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_activity_result IS 'A user''s result for an activity';


--
-- Name: COLUMN user_activity_result.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.id IS 'The unique identifier for the user activity result';


--
-- Name: COLUMN user_activity_result.activity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.activity IS 'The activity that the user activity result is for';


--
-- Name: COLUMN user_activity_result._user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result._user IS 'The user that the user activity result is for';


--
-- Name: COLUMN user_activity_result.score; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.score IS 'The score out of 100';


--
-- Name: COLUMN user_activity_result.score_normalized; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.score_normalized IS 'The score normalized to a value between 0 and 1';


--
-- Name: COLUMN user_activity_result.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.metadata IS 'The metadata of the user activity result';


--
-- Name: COLUMN user_activity_result.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.created_date IS 'The date the user activity result was created';


--
-- Name: COLUMN user_activity_result.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.updated_date IS 'The date the user activity result was last updated';


--
-- Name: COLUMN user_activity_result.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.created_by IS 'The user that created the user activity result';


--
-- Name: COLUMN user_activity_result.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.updated_by IS 'The user that last updated the user activity result';


--
-- Name: COLUMN user_activity_result.skipped; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.skipped IS 'Whether the user skipped the activity';


--
-- Name: COLUMN user_activity_result.skip_reason; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_result.skip_reason IS 'The reason the user skipped the activity';


--
-- Name: user_activity_result user_activity_result_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_result
    ADD CONSTRAINT user_activity_result_pkey PRIMARY KEY (id);


--
-- Name: idx_user_activity_result_activity; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_activity ON public.user_activity_result USING btree (activity);


--
-- Name: idx_user_activity_result_created_by; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_created_by ON public.user_activity_result USING btree (((created_by)::text));


--
-- Name: idx_user_activity_result_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_id ON public.user_activity_result USING btree (id);


--
-- Name: idx_user_activity_result_lesson_session; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_lesson_session ON public.user_activity_result USING btree (lesson_session_id);


--
-- Name: idx_user_activity_result_not_skipped; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_not_skipped ON public.user_activity_result USING btree (activity, _user) WHERE (skipped = false);


--
-- Name: idx_user_activity_result_score; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_score ON public.user_activity_result USING btree (activity, score);


--
-- Name: idx_user_activity_result_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_user ON public.user_activity_result USING btree (_user);


--
-- Name: idx_user_activity_result_user_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_activity_result_user_date ON public.user_activity_result USING btree (_user, created_date);


--
-- Name: user_activity_result log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.user_activity_result FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: user_activity_result run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.user_activity_result FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: user_activity_result user_activity_result__user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_result
    ADD CONSTRAINT user_activity_result__user_fkey FOREIGN KEY (_user) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_activity_result user_activity_result_activity_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_result
    ADD CONSTRAINT user_activity_result_activity_fkey FOREIGN KEY (activity) REFERENCES public.activity(id) ON DELETE SET NULL;


--
-- Name: user_activity_result user_activity_result_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_result
    ADD CONSTRAINT user_activity_result_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_activity_result user_activity_result_lesson_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_result
    ADD CONSTRAINT user_activity_result_lesson_session_id_fkey FOREIGN KEY (lesson_session_id) REFERENCES public.lesson_session(id) ON DELETE SET NULL;


--
-- Name: user_activity_result user_activity_result_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_result
    ADD CONSTRAINT user_activity_result_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_activity_result; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_activity_result ENABLE ROW LEVEL SECURITY;

--
-- Name: user_activity_result user_activity_result DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_result DELETE" ON public.user_activity_result FOR DELETE USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin() OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: user_activity_result user_activity_result INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_result INSERT" ON public.user_activity_result FOR INSERT WITH CHECK ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin() OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: user_activity_result user_activity_result SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_result SELECT" ON public.user_activity_result FOR SELECT USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin() OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: user_activity_result user_activity_result UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_result UPDATE" ON public.user_activity_result FOR UPDATE USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR public.is_admin() OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE user_activity_result; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_activity_result TO anon;
GRANT ALL ON TABLE public.user_activity_result TO authenticated;
GRANT ALL ON TABLE public.user_activity_result TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_activity_result)
---------------------------------------------------------------------------

