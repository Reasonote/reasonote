---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.chat_message

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.chat_message)
------------------------------
--                                      Table "public.chat_message"
--      Column     |           Type           | Collation | Nullable |              Default              
-- ----------------+--------------------------+-----------+----------+-----------------------------------
--  id             | text                     |           | not null | generate_typed_uuid('cmsg'::text)
--  body           | text                     |           |          | 
--  created_date   | timestamp with time zone |           | not null | now()
--  updated_date   | timestamp with time zone |           | not null | now()
--  created_by_bot | text                     |           |          | 
--  created_by     | text                     |           |          | 
--  updated_by     | text                     |           |          | 
--  chat_id        | text                     |           | not null | 
--  bot_id         | text                     |           |          | 
--  _role          | text                     |           |          | 
--  function_call  | jsonb                    |           |          | 
--  context_type   | text                     |           |          | 
--  context_id     | text                     |           |          | 
--  context_data   | jsonb                    |           |          | 
-- Indexes:
--     "chat_message_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "chat_id_check_prefix" CHECK (is_valid_typed_uuid('cmsg'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "chat_message_bot_id_fkey" FOREIGN KEY (bot_id) REFERENCES bot(id) ON DELETE SET NULL
--     "chat_message_chat_id_fkey" FOREIGN KEY (chat_id) REFERENCES chat(id) ON DELETE CASCADE
--     "chat_message_created_by_bot_fkey" FOREIGN KEY (created_by_bot) REFERENCES bot(id) ON DELETE SET NULL
--     "chat_message_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "chat_message_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "chat_message DELETE" FOR DELETE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "chat_message INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "chat_message SELECT" FOR SELECT
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "chat_message UPDATE" FOR UPDATE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
-- Triggers:
--     chat_message_context_check BEFORE INSERT OR UPDATE ON chat_message FOR EACH ROW EXECUTE FUNCTION chat_message_context_check()
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON chat_message FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON chat_message FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.chat_message)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.chat_message)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: chat_message; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chat_message (
    id text DEFAULT public.generate_typed_uuid('cmsg'::text) NOT NULL,
    body text,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by_bot text,
    created_by text,
    updated_by text,
    chat_id text NOT NULL,
    bot_id text,
    _role text,
    function_call jsonb,
    context_type text,
    context_id text,
    context_data jsonb,
    CONSTRAINT chat_id_check_prefix CHECK (public.is_valid_typed_uuid('cmsg'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.chat_message OWNER TO postgres;

--
-- Name: TABLE chat_message; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.chat_message IS 'A chat message is a message sent in a chat.';


--
-- Name: COLUMN chat_message.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.id IS 'Unique identifier for the chat message.';


--
-- Name: COLUMN chat_message.body; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.body IS 'The chat that contains the message.';


--
-- Name: COLUMN chat_message.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.created_date IS 'The date and time at which the message was created.';


--
-- Name: COLUMN chat_message.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.updated_date IS 'The date and time at which the message was last updated.';


--
-- Name: COLUMN chat_message.created_by_bot; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.created_by_bot IS 'The bot who created the message. If the creator was a user, this will be NULL.';


--
-- Name: COLUMN chat_message.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.created_by IS 'The user who created the message. If the creator was a bot, this will be NULL.';


--
-- Name: COLUMN chat_message.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.updated_by IS 'The user who last updated the message.';


--
-- Name: COLUMN chat_message.context_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.context_type IS 'The type of context for the message, if any.';


--
-- Name: COLUMN chat_message.context_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.context_id IS 'The id of the context for the message, if any.';


--
-- Name: COLUMN chat_message.context_data; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.context_data IS 'The data of the context for the message, if any.';


--
-- Name: chat_message chat_message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_message
    ADD CONSTRAINT chat_message_pkey PRIMARY KEY (id);


--
-- Name: chat_message chat_message_context_check; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER chat_message_context_check BEFORE INSERT OR UPDATE ON public.chat_message FOR EACH ROW EXECUTE FUNCTION public.chat_message_context_check();


--
-- Name: chat_message log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.chat_message FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: chat_message run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.chat_message FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: chat_message chat_message_bot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_message
    ADD CONSTRAINT chat_message_bot_id_fkey FOREIGN KEY (bot_id) REFERENCES public.bot(id) ON DELETE SET NULL;


--
-- Name: chat_message chat_message_chat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_message
    ADD CONSTRAINT chat_message_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chat(id) ON DELETE CASCADE;


--
-- Name: chat_message chat_message_created_by_bot_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_message
    ADD CONSTRAINT chat_message_created_by_bot_fkey FOREIGN KEY (created_by_bot) REFERENCES public.bot(id) ON DELETE SET NULL;


--
-- Name: chat_message chat_message_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_message
    ADD CONSTRAINT chat_message_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: chat_message chat_message_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_message
    ADD CONSTRAINT chat_message_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: chat_message; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.chat_message ENABLE ROW LEVEL SECURITY;

--
-- Name: chat_message chat_message DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat_message DELETE" ON public.chat_message FOR DELETE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: chat_message chat_message INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat_message INSERT" ON public.chat_message FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: chat_message chat_message SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat_message SELECT" ON public.chat_message FOR SELECT USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: chat_message chat_message UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat_message UPDATE" ON public.chat_message FOR UPDATE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: TABLE chat_message; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chat_message TO anon;
GRANT ALL ON TABLE public.chat_message TO authenticated;
GRANT ALL ON TABLE public.chat_message TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.chat_message)
---------------------------------------------------------------------------

