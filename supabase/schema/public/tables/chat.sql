---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.chat

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.chat)
------------------------------
--                                         Table "public.chat"
--     Column    |           Type           | Collation | Nullable |              Default              
-- --------------+--------------------------+-----------+----------+-----------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('chat'::text)
--  topic        | text                     |           |          | 
--  manual_title | text                     |           |          | 
--  auto_title   | text                     |           |          | 
--  is_public    | boolean                  |           | not null | false
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
-- Indexes:
--     "chat_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "chat_id_check_prefix" CHECK (is_valid_typed_uuid('chat'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "chat_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "chat_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "chat_message" CONSTRAINT "chat_message_chat_id_fkey" FOREIGN KEY (chat_id) REFERENCES chat(id) ON DELETE CASCADE
--     TABLE "member_authorization" CONSTRAINT "member_authorization_granted_chat_id_fkey" FOREIGN KEY (granted_chat_id) REFERENCES chat(id) ON DELETE CASCADE
-- Policies:
--     POLICY "chat DELETE" FOR DELETE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "chat INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "chat SELECT" FOR SELECT
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "chat UPDATE" FOR UPDATE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin()))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON chat FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON chat FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.chat)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.chat)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: chat; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chat (
    id text DEFAULT public.generate_typed_uuid('chat'::text) NOT NULL,
    topic text,
    manual_title text,
    auto_title text,
    is_public boolean DEFAULT false NOT NULL,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT chat_id_check_prefix CHECK (public.is_valid_typed_uuid('chat'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.chat OWNER TO postgres;

--
-- Name: TABLE chat; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.chat IS 'A chat is a message thread.';


--
-- Name: COLUMN chat.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.id IS 'Unique identifier for the chat.';


--
-- Name: COLUMN chat.manual_title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.manual_title IS 'The user-defined title of the chat (if available).';


--
-- Name: COLUMN chat.auto_title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.auto_title IS 'The automatically-assigned title of the chat (if no manual title is given).';


--
-- Name: COLUMN chat.is_public; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.is_public IS 'Whether or not the chat is publicly accessible.';


--
-- Name: COLUMN chat.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.created_date IS 'The date and time at which the chat was created.';


--
-- Name: COLUMN chat.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.updated_date IS 'The date and time at which the chat was last updated.';


--
-- Name: COLUMN chat.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.created_by IS 'The user who created the chat.';


--
-- Name: COLUMN chat.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat.updated_by IS 'The user who last updated the chat.';


--
-- Name: chat chat_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat
    ADD CONSTRAINT chat_pkey PRIMARY KEY (id);


--
-- Name: chat log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.chat FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: chat run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.chat FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: chat chat_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat
    ADD CONSTRAINT chat_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: chat chat_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat
    ADD CONSTRAINT chat_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: chat; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.chat ENABLE ROW LEVEL SECURITY;

--
-- Name: chat chat DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat DELETE" ON public.chat FOR DELETE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: chat chat INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat INSERT" ON public.chat FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: chat chat SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat SELECT" ON public.chat FOR SELECT USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: chat chat UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "chat UPDATE" ON public.chat FOR UPDATE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: TABLE chat; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chat TO anon;
GRANT ALL ON TABLE public.chat TO authenticated;
GRANT ALL ON TABLE public.chat TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.chat)
---------------------------------------------------------------------------

