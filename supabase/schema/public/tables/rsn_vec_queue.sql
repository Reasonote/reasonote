---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.rsn_vec_queue

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.rsn_vec_queue)
------------------------------
--                                                                   Table "public.rsn_vec_queue"
--     Column    |           Type           | Collation | Nullable |                                            Default                                             
-- --------------+--------------------------+-----------+----------+------------------------------------------------------------------------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('rsnvq'::text)
--  colname      | text                     |           | not null | 
--  colpath      | text[]                   |           |          | 
--  colpath_str  | text                     |           |          | generated always as (COALESCE(immutable_array_to_string(colpath, '.'::text), ''::text)) stored
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
--  _ref_id      | text                     |           | not null | 
--  tablename    | text                     |           |          | 
-- Indexes:
--     "rsn_vec_queue_pkey" PRIMARY KEY, btree (id)
--     "rsn_vec_queue__ref_id__colname__colpath_str__unique" UNIQUE CONSTRAINT, btree (_ref_id, colname, colpath_str)
-- Check constraints:
--     "rsn_vec_queue__id__check_prefix" CHECK (is_valid_typed_uuid('rsnvq'::text, id::typed_uuid))
-- Policies:
--     POLICY "rsn_vec_queue DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_entity_vec_permissions vep
--   WHERE ((vep.tablename = rsn_vec_queue.tablename) AND (vep.entity_id = rsn_vec_queue._ref_id) AND (((vep.principal_id)::text = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((vep.tablename || '.DELETE'::text) = ANY (vep.permissions))))) OR is_admin() OR (EXISTS ( SELECT 1
--    FROM ( SELECT goal.id,
--             goal.created_by
--            FROM goal
--           WHERE (rsn_vec_queue.tablename = 'goal'::text)
--         UNION ALL
--          SELECT skill.id,
--             skill.created_by
--            FROM skill
--           WHERE (rsn_vec_queue.tablename = 'skill'::text)
--         UNION ALL
--          SELECT rsn_page.id,
--             rsn_page.created_by
--            FROM rsn_page
--           WHERE (rsn_vec_queue.tablename = 'rsn_page'::text)
--         UNION ALL
--          SELECT snip.id,
--             snip._owner AS created_by
--            FROM snip
--           WHERE (rsn_vec_queue.tablename = 'snip'::text)) parent_entities
--   WHERE ((parent_entities.id = rsn_vec_queue._ref_id) AND ((parent_entities.created_by)::text = (current_rsn_user_id())::text))))))
--     POLICY "rsn_vec_queue INSERT" FOR INSERT
--       WITH CHECK (((auth.uid() IS NOT NULL) OR is_admin()))
--     POLICY "rsn_vec_queue SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_entity_vec_permissions vep
--   WHERE ((vep.tablename = rsn_vec_queue.tablename) AND (vep.entity_id = rsn_vec_queue._ref_id) AND (((vep.principal_id)::text = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((vep.tablename || '.SELECT'::text) = ANY (vep.permissions))))) OR is_admin() OR (EXISTS ( SELECT 1
--    FROM ( SELECT goal.id,
--             goal.created_by
--            FROM goal
--           WHERE (rsn_vec_queue.tablename = 'goal'::text)
--         UNION ALL
--          SELECT skill.id,
--             skill.created_by
--            FROM skill
--           WHERE (rsn_vec_queue.tablename = 'skill'::text)
--         UNION ALL
--          SELECT rsn_page.id,
--             rsn_page.created_by
--            FROM rsn_page
--           WHERE (rsn_vec_queue.tablename = 'rsn_page'::text)
--         UNION ALL
--          SELECT snip.id,
--             snip._owner AS created_by
--            FROM snip
--           WHERE (rsn_vec_queue.tablename = 'snip'::text)) parent_entities
--   WHERE ((parent_entities.id = rsn_vec_queue._ref_id) AND ((parent_entities.created_by)::text = (current_rsn_user_id())::text))))))
--     POLICY "rsn_vec_queue UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_entity_vec_permissions vep
--   WHERE ((vep.tablename = rsn_vec_queue.tablename) AND (vep.entity_id = rsn_vec_queue._ref_id) AND (((vep.principal_id)::text = (current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((vep.tablename || '.UPDATE'::text) = ANY (vep.permissions))))) OR is_admin() OR (EXISTS ( SELECT 1
--    FROM ( SELECT goal.id,
--             goal.created_by
--            FROM goal
--           WHERE (rsn_vec_queue.tablename = 'goal'::text)
--         UNION ALL
--          SELECT skill.id,
--             skill.created_by
--            FROM skill
--           WHERE (rsn_vec_queue.tablename = 'skill'::text)
--         UNION ALL
--          SELECT rsn_page.id,
--             rsn_page.created_by
--            FROM rsn_page
--           WHERE (rsn_vec_queue.tablename = 'rsn_page'::text)
--         UNION ALL
--          SELECT snip.id,
--             snip._owner AS created_by
--            FROM snip
--           WHERE (rsn_vec_queue.tablename = 'snip'::text)) parent_entities
--   WHERE ((parent_entities.id = rsn_vec_queue._ref_id) AND ((parent_entities.created_by)::text = (current_rsn_user_id())::text))))))
-- Triggers:
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON rsn_vec_queue FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     set_tablename_trigger BEFORE INSERT OR UPDATE ON rsn_vec_queue FOR EACH ROW EXECUTE FUNCTION set_tablename()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.rsn_vec_queue)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.rsn_vec_queue)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: rsn_vec_queue; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.rsn_vec_queue (
    id text DEFAULT public.generate_typed_uuid('rsnvq'::text) NOT NULL,
    colname text NOT NULL,
    colpath text[],
    colpath_str text GENERATED ALWAYS AS (COALESCE(public.immutable_array_to_string(colpath, '.'::text), ''::text)) STORED,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    _ref_id text NOT NULL,
    tablename text,
    CONSTRAINT rsn_vec_queue__id__check_prefix CHECK (public.is_valid_typed_uuid('rsnvq'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.rsn_vec_queue OWNER TO postgres;

--
-- Name: TABLE rsn_vec_queue; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.rsn_vec_queue IS 'A queue of rsn items to be vectorized.';


--
-- Name: rsn_vec_queue rsn_vec_queue__ref_id__colname__colpath_str__unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rsn_vec_queue
    ADD CONSTRAINT rsn_vec_queue__ref_id__colname__colpath_str__unique UNIQUE (_ref_id, colname, colpath_str);


--
-- Name: rsn_vec_queue rsn_vec_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rsn_vec_queue
    ADD CONSTRAINT rsn_vec_queue_pkey PRIMARY KEY (id);


--
-- Name: rsn_vec_queue run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.rsn_vec_queue FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: rsn_vec_queue set_tablename_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_tablename_trigger BEFORE INSERT OR UPDATE ON public.rsn_vec_queue FOR EACH ROW EXECUTE FUNCTION public.set_tablename();


--
-- Name: rsn_vec_queue; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.rsn_vec_queue ENABLE ROW LEVEL SECURITY;

--
-- Name: rsn_vec_queue rsn_vec_queue DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_vec_queue DELETE" ON public.rsn_vec_queue FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_entity_vec_permissions vep
  WHERE ((vep.tablename = rsn_vec_queue.tablename) AND (vep.entity_id = rsn_vec_queue._ref_id) AND (((vep.principal_id)::text = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((vep.tablename || '.DELETE'::text) = ANY (vep.permissions))))) OR public.is_admin() OR (EXISTS ( SELECT 1
   FROM ( SELECT goal.id,
            goal.created_by
           FROM public.goal
          WHERE (rsn_vec_queue.tablename = 'goal'::text)
        UNION ALL
         SELECT skill.id,
            skill.created_by
           FROM public.skill
          WHERE (rsn_vec_queue.tablename = 'skill'::text)
        UNION ALL
         SELECT rsn_page.id,
            rsn_page.created_by
           FROM public.rsn_page
          WHERE (rsn_vec_queue.tablename = 'rsn_page'::text)
        UNION ALL
         SELECT snip.id,
            snip._owner AS created_by
           FROM public.snip
          WHERE (rsn_vec_queue.tablename = 'snip'::text)) parent_entities
  WHERE ((parent_entities.id = rsn_vec_queue._ref_id) AND ((parent_entities.created_by)::text = (public.current_rsn_user_id())::text))))));


--
-- Name: rsn_vec_queue rsn_vec_queue INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_vec_queue INSERT" ON public.rsn_vec_queue FOR INSERT WITH CHECK (((auth.uid() IS NOT NULL) OR public.is_admin()));


--
-- Name: rsn_vec_queue rsn_vec_queue SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_vec_queue SELECT" ON public.rsn_vec_queue FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_entity_vec_permissions vep
  WHERE ((vep.tablename = rsn_vec_queue.tablename) AND (vep.entity_id = rsn_vec_queue._ref_id) AND (((vep.principal_id)::text = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((vep.tablename || '.SELECT'::text) = ANY (vep.permissions))))) OR public.is_admin() OR (EXISTS ( SELECT 1
   FROM ( SELECT goal.id,
            goal.created_by
           FROM public.goal
          WHERE (rsn_vec_queue.tablename = 'goal'::text)
        UNION ALL
         SELECT skill.id,
            skill.created_by
           FROM public.skill
          WHERE (rsn_vec_queue.tablename = 'skill'::text)
        UNION ALL
         SELECT rsn_page.id,
            rsn_page.created_by
           FROM public.rsn_page
          WHERE (rsn_vec_queue.tablename = 'rsn_page'::text)
        UNION ALL
         SELECT snip.id,
            snip._owner AS created_by
           FROM public.snip
          WHERE (rsn_vec_queue.tablename = 'snip'::text)) parent_entities
  WHERE ((parent_entities.id = rsn_vec_queue._ref_id) AND ((parent_entities.created_by)::text = (public.current_rsn_user_id())::text))))));


--
-- Name: rsn_vec_queue rsn_vec_queue UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "rsn_vec_queue UPDATE" ON public.rsn_vec_queue FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_entity_vec_permissions vep
  WHERE ((vep.tablename = rsn_vec_queue.tablename) AND (vep.entity_id = rsn_vec_queue._ref_id) AND (((vep.principal_id)::text = (public.current_rsn_user_id())::text) OR (vep.is_public = true)) AND ((vep.tablename || '.UPDATE'::text) = ANY (vep.permissions))))) OR public.is_admin() OR (EXISTS ( SELECT 1
   FROM ( SELECT goal.id,
            goal.created_by
           FROM public.goal
          WHERE (rsn_vec_queue.tablename = 'goal'::text)
        UNION ALL
         SELECT skill.id,
            skill.created_by
           FROM public.skill
          WHERE (rsn_vec_queue.tablename = 'skill'::text)
        UNION ALL
         SELECT rsn_page.id,
            rsn_page.created_by
           FROM public.rsn_page
          WHERE (rsn_vec_queue.tablename = 'rsn_page'::text)
        UNION ALL
         SELECT snip.id,
            snip._owner AS created_by
           FROM public.snip
          WHERE (rsn_vec_queue.tablename = 'snip'::text)) parent_entities
  WHERE ((parent_entities.id = rsn_vec_queue._ref_id) AND ((parent_entities.created_by)::text = (public.current_rsn_user_id())::text))))));


--
-- Name: TABLE rsn_vec_queue; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.rsn_vec_queue TO anon;
GRANT ALL ON TABLE public.rsn_vec_queue TO authenticated;
GRANT ALL ON TABLE public.rsn_vec_queue TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.rsn_vec_queue)
---------------------------------------------------------------------------

