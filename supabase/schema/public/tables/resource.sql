---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.resource

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.resource)
------------------------------
--                                          Table "public.resource"
--       Column       |           Type           | Collation | Nullable |              Default              
-- -------------------+--------------------------+-----------+----------+-----------------------------------
--  id                | text                     |           | not null | generate_typed_uuid('rsrc'::text)
--  parent_skill_id   | text                     |           |          | 
--  parent_podcast_id | text                     |           |          | 
--  child_snip_id     | text                     |           |          | 
--  child_page_id     | text                     |           |          | 
--  metadata          | jsonb                    |           |          | 
--  created_date      | timestamp with time zone |           | not null | now()
--  updated_date      | timestamp with time zone |           | not null | now()
--  created_by        | text                     |           |          | 
--  updated_by        | text                     |           |          | 
--  parent_course_id  | text                     |           |          | 
-- Indexes:
--     "resource_pkey" PRIMARY KEY, btree (id)
--     "resource_parent_course_idx" btree (parent_course_id)
-- Check constraints:
--     "resource_content_source_exclusive" CHECK ((
-- CASE
--     WHEN child_snip_id IS NOT NULL THEN 1
--     ELSE 0
-- END +
-- CASE
--     WHEN child_page_id IS NOT NULL THEN 1
--     ELSE 0
-- END) <= 1)
--     "resource_id_check" CHECK (is_valid_typed_uuid('rsrc'::text, id::typed_uuid))
--     "resource_parent_exclusive" CHECK ((
-- CASE
--     WHEN parent_skill_id IS NOT NULL THEN 1
--     ELSE 0
-- END +
-- CASE
--     WHEN parent_podcast_id IS NOT NULL THEN 1
--     ELSE 0
-- END +
-- CASE
--     WHEN parent_course_id IS NOT NULL THEN 1
--     ELSE 0
-- END) <= 1)
-- Foreign-key constraints:
--     "resource_child_page_id_fkey" FOREIGN KEY (child_page_id) REFERENCES rsn_page(id) ON DELETE SET NULL
--     "resource_child_snip_id_fkey" FOREIGN KEY (child_snip_id) REFERENCES snip(id) ON DELETE SET NULL
--     "resource_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "resource_parent_course_id_fkey" FOREIGN KEY (parent_course_id) REFERENCES course(id) ON DELETE SET NULL
--     "resource_parent_podcast_id_fkey" FOREIGN KEY (parent_podcast_id) REFERENCES podcast(id) ON DELETE SET NULL
--     "resource_parent_skill_id_fkey" FOREIGN KEY (parent_skill_id) REFERENCES skill(id) ON DELETE SET NULL
--     "resource_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "resource DELETE" FOR DELETE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
--    FROM vw_course_memauth vcm
--   WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.DELETE'::text = ANY ((vcm.permissions)::text[]))))))))
--     POLICY "resource INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
--    FROM vw_course_memauth vcm
--   WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.INSERT'::text = ANY ((vcm.permissions)::text[]))))))))
--     POLICY "resource SELECT" FOR SELECT
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
--    FROM vw_course_memauth vcm
--   WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.SELECT'::text = ANY ((vcm.permissions)::text[]))))))))
--     POLICY "resource UPDATE" FOR UPDATE
--       USING (((created_by = (current_rsn_user_id())::text) OR is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
--    FROM vw_course_memauth vcm
--   WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.UPDATE'::text = ANY ((vcm.permissions)::text[]))))))))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON resource FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON resource FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.resource)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.resource)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: resource; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.resource (
    id text DEFAULT public.generate_typed_uuid('rsrc'::text) NOT NULL,
    parent_skill_id text,
    parent_podcast_id text,
    child_snip_id text,
    child_page_id text,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    parent_course_id text,
    CONSTRAINT resource_content_source_exclusive CHECK (((
CASE
    WHEN (child_snip_id IS NOT NULL) THEN 1
    ELSE 0
END +
CASE
    WHEN (child_page_id IS NOT NULL) THEN 1
    ELSE 0
END) <= 1)),
    CONSTRAINT resource_id_check CHECK (public.is_valid_typed_uuid('rsrc'::text, (id)::public.typed_uuid)),
    CONSTRAINT resource_parent_exclusive CHECK ((((
CASE
    WHEN (parent_skill_id IS NOT NULL) THEN 1
    ELSE 0
END +
CASE
    WHEN (parent_podcast_id IS NOT NULL) THEN 1
    ELSE 0
END) +
CASE
    WHEN (parent_course_id IS NOT NULL) THEN 1
    ELSE 0
END) <= 1))
);


ALTER TABLE public.resource OWNER TO postgres;

--
-- Name: TABLE resource; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.resource IS 'A resource that can be associated with either a skill or a podcast.';


--
-- Name: COLUMN resource.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.id IS 'The unique identifier for the resource.';


--
-- Name: COLUMN resource.parent_skill_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.parent_skill_id IS 'The skill that this resource is associated with, if any.';


--
-- Name: COLUMN resource.parent_podcast_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.parent_podcast_id IS 'The podcast that this resource is associated with, if any.';


--
-- Name: COLUMN resource.child_snip_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.child_snip_id IS 'The snip that this resource references.';


--
-- Name: COLUMN resource.child_page_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.child_page_id IS 'The page that this resource references.';


--
-- Name: COLUMN resource.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.metadata IS 'Additional metadata for the resource.';


--
-- Name: COLUMN resource.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.created_date IS 'The date that this resource was created.';


--
-- Name: COLUMN resource.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.updated_date IS 'The date that this resource was last updated.';


--
-- Name: COLUMN resource.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.created_by IS 'The user that created this resource.';


--
-- Name: COLUMN resource.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.updated_by IS 'The user that last updated this resource.';


--
-- Name: COLUMN resource.parent_course_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.resource.parent_course_id IS 'The course that this resource is associated with, if any.';


--
-- Name: resource resource_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_pkey PRIMARY KEY (id);


--
-- Name: resource_parent_course_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX resource_parent_course_idx ON public.resource USING btree (parent_course_id);


--
-- Name: resource log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.resource FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: resource run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.resource FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: resource resource_child_page_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_child_page_id_fkey FOREIGN KEY (child_page_id) REFERENCES public.rsn_page(id) ON DELETE SET NULL;


--
-- Name: resource resource_child_snip_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_child_snip_id_fkey FOREIGN KEY (child_snip_id) REFERENCES public.snip(id) ON DELETE SET NULL;


--
-- Name: resource resource_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: resource resource_parent_course_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_parent_course_id_fkey FOREIGN KEY (parent_course_id) REFERENCES public.course(id) ON DELETE SET NULL;


--
-- Name: resource resource_parent_podcast_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_parent_podcast_id_fkey FOREIGN KEY (parent_podcast_id) REFERENCES public.podcast(id) ON DELETE SET NULL;


--
-- Name: resource resource_parent_skill_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_parent_skill_id_fkey FOREIGN KEY (parent_skill_id) REFERENCES public.skill(id) ON DELETE SET NULL;


--
-- Name: resource resource_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.resource
    ADD CONSTRAINT resource_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: resource; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.resource ENABLE ROW LEVEL SECURITY;

--
-- Name: resource resource DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "resource DELETE" ON public.resource FOR DELETE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM public.vw_course_memauth vcm
  WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (public.current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.DELETE'::text = ANY ((vcm.permissions)::text[]))))))));


--
-- Name: resource resource INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "resource INSERT" ON public.resource FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM public.vw_course_memauth vcm
  WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (public.current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.INSERT'::text = ANY ((vcm.permissions)::text[]))))))));


--
-- Name: resource resource SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "resource SELECT" ON public.resource FOR SELECT USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM public.vw_course_memauth vcm
  WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (public.current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.SELECT'::text = ANY ((vcm.permissions)::text[]))))))));


--
-- Name: resource resource UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "resource UPDATE" ON public.resource FOR UPDATE USING (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin() OR ((parent_course_id IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM public.vw_course_memauth vcm
  WHERE ((vcm.course_id = resource.parent_course_id) AND ((vcm.principal_id = (public.current_rsn_user_id())::text) OR (vcm.is_public = true)) AND ('resource.UPDATE'::text = ANY ((vcm.permissions)::text[]))))))));


--
-- Name: TABLE resource; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.resource TO anon;
GRANT ALL ON TABLE public.resource TO authenticated;
GRANT ALL ON TABLE public.resource TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.resource)
---------------------------------------------------------------------------

