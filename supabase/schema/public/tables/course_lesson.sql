---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.course_lesson

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.course_lesson)
------------------------------
--                                         Table "public.course_lesson"
--     Column    |           Type           | Collation | Nullable |                  Default                   
-- --------------+--------------------------+-----------+----------+--------------------------------------------
--  id           | text                     |           | not null | 'crslsn_'::text || gen_random_uuid()::text
--  course       | text                     |           | not null | 
--  lesson       | text                     |           | not null | 
--  order_index  | integer                  |           | not null | 0
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
-- Indexes:
--     "course_lesson_pkey" PRIMARY KEY, btree (id)
--     "course_lesson_course_idx" btree (course)
--     "course_lesson_created_by_idx" btree (created_by)
--     "course_lesson_lesson_idx" btree (lesson)
--     "course_lesson_order_idx" btree (course, order_index)
--     "unique_course_lesson" UNIQUE CONSTRAINT, btree (course, lesson)
--     "unique_course_order" UNIQUE, btree (course, order_index) WHERE order_index >= 0
-- Check constraints:
--     "course_lesson_id_check" CHECK (id ~~ 'crslsn_%'::text)
-- Foreign-key constraints:
--     "course_lesson_course_fkey" FOREIGN KEY (course) REFERENCES course(id) ON DELETE CASCADE
--     "course_lesson_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "course_lesson_lesson_fkey" FOREIGN KEY (lesson) REFERENCES lesson(id) ON DELETE CASCADE
--     "course_lesson_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "course_lesson DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin()))
--     POLICY "course_lesson INSERT" FOR INSERT
--       WITH CHECK (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin()))
--     POLICY "course_lesson SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin()))
--     POLICY "course_lesson UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin()))
-- Triggers:
--     course_lesson_update_course_date AFTER INSERT OR DELETE OR UPDATE ON course_lesson FOR EACH ROW EXECUTE FUNCTION update_course_updated_date()
--     log_course_lesson_operation AFTER INSERT OR DELETE OR UPDATE ON course_lesson FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_course_lesson_tgr_apply_audit BEFORE INSERT OR UPDATE ON course_lesson FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.course_lesson)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.course_lesson)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: course_lesson; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.course_lesson (
    id text DEFAULT ('crslsn_'::text || (gen_random_uuid())::text) NOT NULL,
    course text NOT NULL,
    lesson text NOT NULL,
    order_index integer DEFAULT 0 NOT NULL,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT course_lesson_id_check CHECK ((id ~~ 'crslsn_%'::text))
);


ALTER TABLE public.course_lesson OWNER TO postgres;

--
-- Name: TABLE course_lesson; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.course_lesson IS 'Links courses to their lessons with ordering information';


--
-- Name: COLUMN course_lesson.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.id IS 'The unique identifier for the course lesson link';


--
-- Name: COLUMN course_lesson.course; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.course IS 'Reference to the course';


--
-- Name: COLUMN course_lesson.lesson; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.lesson IS 'Reference to the lesson';


--
-- Name: COLUMN course_lesson.order_index; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.order_index IS 'The order of the lesson within the course';


--
-- Name: COLUMN course_lesson.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.created_date IS 'The date this link was created';


--
-- Name: COLUMN course_lesson.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.updated_date IS 'The date this link was last updated';


--
-- Name: COLUMN course_lesson.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.created_by IS 'The user that created this link';


--
-- Name: COLUMN course_lesson.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course_lesson.updated_by IS 'The user that last updated this link';


--
-- Name: course_lesson course_lesson_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course_lesson
    ADD CONSTRAINT course_lesson_pkey PRIMARY KEY (id);


--
-- Name: course_lesson unique_course_lesson; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course_lesson
    ADD CONSTRAINT unique_course_lesson UNIQUE (course, lesson);


--
-- Name: course_lesson_course_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_lesson_course_idx ON public.course_lesson USING btree (course);


--
-- Name: course_lesson_created_by_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_lesson_created_by_idx ON public.course_lesson USING btree (created_by);


--
-- Name: course_lesson_lesson_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_lesson_lesson_idx ON public.course_lesson USING btree (lesson);


--
-- Name: course_lesson_order_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_lesson_order_idx ON public.course_lesson USING btree (course, order_index);


--
-- Name: unique_course_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_course_order ON public.course_lesson USING btree (course, order_index) WHERE (order_index >= 0);


--
-- Name: course_lesson course_lesson_update_course_date; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER course_lesson_update_course_date AFTER INSERT OR DELETE OR UPDATE ON public.course_lesson FOR EACH ROW EXECUTE FUNCTION public.update_course_updated_date();


--
-- Name: course_lesson log_course_lesson_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_course_lesson_operation AFTER INSERT OR DELETE OR UPDATE ON public.course_lesson FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: course_lesson run_course_lesson_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_course_lesson_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.course_lesson FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: course_lesson course_lesson_course_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course_lesson
    ADD CONSTRAINT course_lesson_course_fkey FOREIGN KEY (course) REFERENCES public.course(id) ON DELETE CASCADE;


--
-- Name: course_lesson course_lesson_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course_lesson
    ADD CONSTRAINT course_lesson_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: course_lesson course_lesson_lesson_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course_lesson
    ADD CONSTRAINT course_lesson_lesson_fkey FOREIGN KEY (lesson) REFERENCES public.lesson(id) ON DELETE CASCADE;


--
-- Name: course_lesson course_lesson_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course_lesson
    ADD CONSTRAINT course_lesson_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: course_lesson; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.course_lesson ENABLE ROW LEVEL SECURITY;

--
-- Name: course_lesson course_lesson DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course_lesson DELETE" ON public.course_lesson FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin()));


--
-- Name: course_lesson course_lesson INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course_lesson INSERT" ON public.course_lesson FOR INSERT WITH CHECK (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin()));


--
-- Name: course_lesson course_lesson SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course_lesson SELECT" ON public.course_lesson FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin()));


--
-- Name: course_lesson course_lesson UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course_lesson UPDATE" ON public.course_lesson FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course_lesson.course) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin()));


--
-- Name: TABLE course_lesson; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.course_lesson TO anon;
GRANT ALL ON TABLE public.course_lesson TO authenticated;
GRANT ALL ON TABLE public.course_lesson TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.course_lesson)
---------------------------------------------------------------------------

