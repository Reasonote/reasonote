---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.skill

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.skill)
------------------------------
--                                                                          Table "public.skill"
--           Column           |           Type           | Collation | Nullable |                                        Default                                         
-- ---------------------------+--------------------------+-----------+----------+----------------------------------------------------------------------------------------
--  id                        | text                     |           | not null | generate_typed_uuid('skill'::text)
--  _name                     | text                     |           | not null | 
--  _type                     | text                     |           |          | 
--  metadata                  | jsonb                    |           |          | 
--  created_date              | timestamp with time zone |           | not null | now()
--  updated_date              | timestamp with time zone |           | not null | now()
--  created_by                | typed_uuid               |           |          | 
--  updated_by                | typed_uuid               |           |          | 
--  context_page              | text                     |           |          | 
--  _description              | text                     |           |          | 
--  name_and_description      | text                     |           |          | generated always as ((_name || ': '::text) || COALESCE(_description, ''::text)) stored
--  generated_from_skill_path | text[]                   |           |          | 
--  emoji                     | text                     |           |          | 
--  colorinfo                 | jsonb                    |           |          | 
--  for_user                  | text                     |           |          | 
--  root_skill_id             | text                     |           |          | 
--  domain                    | text                     |           |          | 
--  reference_ids             | text[]                   |           |          | 
--  rsn_vec_ids               | text[]                   |           |          | 
--  processing_state          | skill_processing_state   |           |          | 
-- Indexes:
--     "skill_pkey" PRIMARY KEY, btree (id)
--     "idx_skill_root_skill_id" btree (root_skill_id)
-- Check constraints:
--     "skill__id__check_prefix" CHECK (is_valid_typed_uuid('skill'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "skill__context_page__fkey" FOREIGN KEY (context_page) REFERENCES rsn_page(id) ON DELETE SET NULL
--     "skill_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "skill_root_skill_id_fkey" FOREIGN KEY (root_skill_id) REFERENCES skill(id) ON DELETE SET NULL
--     "skill_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "activity_skill" CONSTRAINT "activity_skill_skill_fkey" FOREIGN KEY (skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "chapter" CONSTRAINT "chapter_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "course" CONSTRAINT "course_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "partial_skill" CONSTRAINT "fk_skill_id" FOREIGN KEY (skill_id) REFERENCES skill(id) ON DELETE SET NULL
--     TABLE "lesson" CONSTRAINT "lesson_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "resource" CONSTRAINT "resource_parent_skill_id_fkey" FOREIGN KEY (parent_skill_id) REFERENCES skill(id) ON DELETE SET NULL
--     TABLE "skill_link" CONSTRAINT "skill_link_downstream_skill_fkey" FOREIGN KEY (downstream_skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "skill_link" CONSTRAINT "skill_link_upstream_skill_fkey" FOREIGN KEY (upstream_skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "skill_module" CONSTRAINT "skill_module_root_skill_id_fkey" FOREIGN KEY (root_skill_id) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "skill_page" CONSTRAINT "skill_page_skill_id_fkey" FOREIGN KEY (skill_id) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "skill" CONSTRAINT "skill_root_skill_id_fkey" FOREIGN KEY (root_skill_id) REFERENCES skill(id) ON DELETE SET NULL
--     TABLE "skill_set_skill" CONSTRAINT "skill_set_skill_skill_fkey" FOREIGN KEY (skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "snip" CONSTRAINT "snip_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE SET NULL
--     TABLE "user_history" CONSTRAINT "user_history_skill_id_visited_fkey" FOREIGN KEY (skill_id_visited) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "user_skill" CONSTRAINT "user_skill_skill_fkey" FOREIGN KEY (skill) REFERENCES skill(id) ON DELETE CASCADE
--     TABLE "user_skill_sysdata" CONSTRAINT "user_skill_sysdata_skill_fkey" FOREIGN KEY (skill) REFERENCES skill(id)
-- Policies:
--     POLICY "skill DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_skill_memauth vsm
--   WHERE ((vsm.skill_id = skill.id) AND (((vsm.principal_id)::text = (current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('skill.DELETE'::text = ANY (vsm.permissions))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text)))
--     POLICY "skill INSERT" FOR INSERT
--       WITH CHECK (((auth.uid() IS NOT NULL) OR is_admin()))
--     POLICY "skill SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_skill_memauth vsm
--   WHERE ((vsm.skill_id = skill.id) AND (((vsm.principal_id)::text = (current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('skill.SELECT'::text = ANY (vsm.permissions))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text)))
--     POLICY "skill UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_skill_memauth vsm
--   WHERE ((vsm.skill_id = skill.id) AND (((vsm.principal_id)::text = (current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('skill.UPDATE'::text = ANY (vsm.permissions))))) OR is_admin() OR ((created_by)::text = (current_rsn_user_id())::text)))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON skill FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON skill FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     skill__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON skill FOR EACH ROW EXECUTE FUNCTION tgr_rsn_vec_queue_insert_update()
--     skill_set_root_skill_id BEFORE INSERT OR UPDATE ON skill FOR EACH ROW EXECUTE FUNCTION tgr_skill_set_root_skill_id()
--     validate_skill_arrays_trigger BEFORE INSERT OR UPDATE ON skill FOR EACH ROW EXECUTE FUNCTION validate_skill_arrays()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.skill)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.skill)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: skill; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.skill (
    id text DEFAULT public.generate_typed_uuid('skill'::text) NOT NULL,
    _name text NOT NULL,
    _type text,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    context_page text,
    _description text,
    name_and_description text GENERATED ALWAYS AS (((_name || ': '::text) || COALESCE(_description, ''::text))) STORED,
    generated_from_skill_path text[],
    emoji text,
    colorinfo jsonb,
    for_user text,
    root_skill_id text,
    domain text,
    reference_ids text[],
    rsn_vec_ids text[],
    processing_state public.skill_processing_state,
    CONSTRAINT skill__id__check_prefix CHECK (public.is_valid_typed_uuid('skill'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.skill OWNER TO postgres;

--
-- Name: COLUMN skill.context_page; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill.context_page IS 'The page that the skill came from';


--
-- Name: COLUMN skill._description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill._description IS 'The description of the skill. This should disambiguate context.';


--
-- Name: COLUMN skill.root_skill_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill.root_skill_id IS 'The ID of the root skill in the skill tree this skill belongs to';


--
-- Name: COLUMN skill.domain; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill.domain IS 'The domain of the skill';


--
-- Name: COLUMN skill.processing_state; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.skill.processing_state IS 'Tracks the current state of skill creation process. NULL indicates no processing has started.';


--
-- Name: skill skill_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill
    ADD CONSTRAINT skill_pkey PRIMARY KEY (id);


--
-- Name: idx_skill_root_skill_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_skill_root_skill_id ON public.skill USING btree (root_skill_id);


--
-- Name: skill log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.skill FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: skill run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.skill FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: skill skill__tgr_rsn_vec_queue_insert_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER skill__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON public.skill FOR EACH ROW EXECUTE FUNCTION public.tgr_rsn_vec_queue_insert_update();


--
-- Name: skill skill_set_root_skill_id; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER skill_set_root_skill_id BEFORE INSERT OR UPDATE ON public.skill FOR EACH ROW EXECUTE FUNCTION public.tgr_skill_set_root_skill_id();


--
-- Name: skill validate_skill_arrays_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER validate_skill_arrays_trigger BEFORE INSERT OR UPDATE ON public.skill FOR EACH ROW EXECUTE FUNCTION public.validate_skill_arrays();


--
-- Name: skill skill__context_page__fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill
    ADD CONSTRAINT skill__context_page__fkey FOREIGN KEY (context_page) REFERENCES public.rsn_page(id) ON DELETE SET NULL;


--
-- Name: skill skill_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill
    ADD CONSTRAINT skill_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: skill skill_root_skill_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill
    ADD CONSTRAINT skill_root_skill_id_fkey FOREIGN KEY (root_skill_id) REFERENCES public.skill(id) ON DELETE SET NULL;


--
-- Name: skill skill_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skill
    ADD CONSTRAINT skill_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: skill; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.skill ENABLE ROW LEVEL SECURITY;

--
-- Name: skill skill DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill DELETE" ON public.skill FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_skill_memauth vsm
  WHERE ((vsm.skill_id = skill.id) AND (((vsm.principal_id)::text = (public.current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('skill.DELETE'::text = ANY (vsm.permissions))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text)));


--
-- Name: skill skill INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill INSERT" ON public.skill FOR INSERT WITH CHECK (((auth.uid() IS NOT NULL) OR public.is_admin()));


--
-- Name: skill skill SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill SELECT" ON public.skill FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_skill_memauth vsm
  WHERE ((vsm.skill_id = skill.id) AND (((vsm.principal_id)::text = (public.current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('skill.SELECT'::text = ANY (vsm.permissions))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text)));


--
-- Name: skill skill UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "skill UPDATE" ON public.skill FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_skill_memauth vsm
  WHERE ((vsm.skill_id = skill.id) AND (((vsm.principal_id)::text = (public.current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('skill.UPDATE'::text = ANY (vsm.permissions))))) OR public.is_admin() OR ((created_by)::text = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE skill; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.skill TO anon;
GRANT ALL ON TABLE public.skill TO authenticated;
GRANT ALL ON TABLE public.skill TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.skill)
---------------------------------------------------------------------------

