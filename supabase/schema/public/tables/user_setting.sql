---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.user_setting

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.user_setting)
------------------------------
--                                                  Table "public.user_setting"
--                 Column                |           Type           | Collation | Nullable |               Default               
-- --------------------------------------+--------------------------+-----------+----------+-------------------------------------
--  id                                   | text                     |           | not null | generate_typed_uuid('usrset'::text)
--  rsn_user                             | typed_uuid               |           | not null | 
--  metadata                             | jsonb                    |           |          | 
--  ai_about_me                          | text                     |           |          | 
--  ai_instructions                      | text                     |           |          | 
--  created_date                         | timestamp with time zone |           | not null | now()
--  updated_date                         | timestamp with time zone |           | not null | now()
--  created_by                           | typed_uuid               |           |          | 
--  updated_by                           | typed_uuid               |           |          | 
--  feelings                             | jsonb                    |           |          | 
--  podcast_playback_speed               | double precision         |           |          | 1.0
--  ui_theme                             | text                     |           |          | 'system'::text
--  daily_xp_goal                        | integer                  |           | not null | 500
--  temporary_daily_xp_goal              | integer                  |           |          | 
--  temporary_daily_xp_goal_set_datetime | timestamp with time zone |           |          | 
-- Indexes:
--     "user_setting_pkey" PRIMARY KEY, btree (id)
--     "user_setting_rsn_user_unique" UNIQUE CONSTRAINT, btree (rsn_user)
-- Check constraints:
--     "user_setting__id__check_prefix" CHECK (is_valid_typed_uuid('usrset'::text, id::typed_uuid))
--     "user_setting_feelings_formatting" CHECK (feelings IS NULL OR jsonb_matches_schema('{
--     "type": "array",
--     "items": {
--         "type": "object",
--         "properties": {
--             "subject_name": {
--                 "type": "string"
--             },
--             "subject_type": {
--                 "type": "string"
--             },
--             "feeling": {
--                 "type": "string"
--             }
--         }
--     }
-- }'::json, feelings))
--     "user_setting_podcast_playback_speed_check" CHECK (podcast_playback_speed >= 0.5::double precision AND podcast_playback_speed <= 2.0::double precision)
--     "user_setting_ui_theme_check" CHECK (ui_theme = ANY (ARRAY['light'::text, 'dark'::text, 'system'::text]))
-- Foreign-key constraints:
--     "user_setting_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "user_setting_rsn_user_fkey" FOREIGN KEY (rsn_user) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "user_setting_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "user_setting DELETE" FOR DELETE
--       USING (((rsn_user)::text = (current_rsn_user_id())::text))
--     POLICY "user_setting INSERT" FOR INSERT
--       WITH CHECK (((rsn_user)::text = (current_rsn_user_id())::text))
--     POLICY "user_setting SELECT" FOR SELECT
--       USING (((rsn_user)::text = (current_rsn_user_id())::text))
--     POLICY "user_setting UPDATE" FOR UPDATE
--       USING (((rsn_user)::text = (current_rsn_user_id())::text))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON user_setting FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON user_setting FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_setting)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.user_setting)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_setting; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_setting (
    id text DEFAULT public.generate_typed_uuid('usrset'::text) NOT NULL,
    rsn_user public.typed_uuid NOT NULL,
    metadata jsonb,
    ai_about_me text,
    ai_instructions text,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    feelings jsonb,
    podcast_playback_speed double precision DEFAULT 1.0,
    ui_theme text DEFAULT 'system'::text,
    daily_xp_goal integer DEFAULT 500 NOT NULL,
    temporary_daily_xp_goal integer,
    temporary_daily_xp_goal_set_datetime timestamp with time zone,
    CONSTRAINT user_setting__id__check_prefix CHECK (public.is_valid_typed_uuid('usrset'::text, (id)::public.typed_uuid)),
    CONSTRAINT user_setting_feelings_formatting CHECK (((feelings IS NULL) OR extensions.jsonb_matches_schema('{
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "subject_name": {
                "type": "string"
            },
            "subject_type": {
                "type": "string"
            },
            "feeling": {
                "type": "string"
            }
        }
    }
}'::json, feelings))),
    CONSTRAINT user_setting_podcast_playback_speed_check CHECK (((podcast_playback_speed >= (0.5)::double precision) AND (podcast_playback_speed <= (2.0)::double precision))),
    CONSTRAINT user_setting_ui_theme_check CHECK ((ui_theme = ANY (ARRAY['light'::text, 'dark'::text, 'system'::text])))
);


ALTER TABLE public.user_setting OWNER TO postgres;

--
-- Name: COLUMN user_setting.ui_theme; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_setting.ui_theme IS 'User interface theme preference - either light or dark mode';


--
-- Name: user_setting user_setting_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_setting
    ADD CONSTRAINT user_setting_pkey PRIMARY KEY (id);


--
-- Name: user_setting user_setting_rsn_user_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_setting
    ADD CONSTRAINT user_setting_rsn_user_unique UNIQUE (rsn_user);


--
-- Name: user_setting log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.user_setting FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: user_setting run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.user_setting FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: user_setting user_setting_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_setting
    ADD CONSTRAINT user_setting_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_setting user_setting_rsn_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_setting
    ADD CONSTRAINT user_setting_rsn_user_fkey FOREIGN KEY (rsn_user) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: user_setting user_setting_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_setting
    ADD CONSTRAINT user_setting_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_setting; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_setting ENABLE ROW LEVEL SECURITY;

--
-- Name: user_setting user_setting DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_setting DELETE" ON public.user_setting FOR DELETE USING (((rsn_user)::text = (public.current_rsn_user_id())::text));


--
-- Name: user_setting user_setting INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_setting INSERT" ON public.user_setting FOR INSERT WITH CHECK (((rsn_user)::text = (public.current_rsn_user_id())::text));


--
-- Name: user_setting user_setting SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_setting SELECT" ON public.user_setting FOR SELECT USING (((rsn_user)::text = (public.current_rsn_user_id())::text));


--
-- Name: user_setting user_setting UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_setting UPDATE" ON public.user_setting FOR UPDATE USING (((rsn_user)::text = (public.current_rsn_user_id())::text));


--
-- Name: TABLE user_setting; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_setting TO anon;
GRANT ALL ON TABLE public.user_setting TO authenticated;
GRANT ALL ON TABLE public.user_setting TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_setting)
---------------------------------------------------------------------------

