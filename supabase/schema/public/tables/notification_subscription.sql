---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.notification_subscription

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.notification_subscription)
------------------------------
--                                Table "public.notification_subscription"
--     Column    |           Type           | Collation | Nullable |               Default                
-- --------------+--------------------------+-----------+----------+--------------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('notisub'::text)
--  rsn_user_id  | text                     |           | not null | 
--  daily_streak | boolean                  |           | not null | false
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
-- Indexes:
--     "notification_subscription_pkey" PRIMARY KEY, btree (id)
--     "notification_subscription_rsn_user_id_idx" btree (rsn_user_id)
--     "notification_subscription_rsn_user_id_key" UNIQUE CONSTRAINT, btree (rsn_user_id)
-- Check constraints:
--     "notification_subscription_id_check" CHECK (is_valid_typed_uuid('notisub'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "notification_subscription_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "notification_subscription_rsn_user_id_fkey" FOREIGN KEY (rsn_user_id) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "notification_subscription_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "Users can delete their own notification subscriptions" FOR DELETE
--       USING (((current_rsn_user_id())::text = rsn_user_id))
--     POLICY "Users can insert their own notification subscriptions" FOR INSERT
--       WITH CHECK (((current_rsn_user_id())::text = rsn_user_id))
--     POLICY "Users can update their own notification subscriptions" FOR UPDATE
--       USING (((current_rsn_user_id())::text = rsn_user_id))
--     POLICY "Users can view their own notification subscriptions" FOR SELECT
--       USING (((current_rsn_user_id())::text = rsn_user_id))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON notification_subscription FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     tgr_apply_audit_notification_subscription BEFORE UPDATE ON notification_subscription FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.notification_subscription)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.notification_subscription)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: notification_subscription; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notification_subscription (
    id text DEFAULT public.generate_typed_uuid('notisub'::text) NOT NULL,
    rsn_user_id text NOT NULL,
    daily_streak boolean DEFAULT false NOT NULL,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT notification_subscription_id_check CHECK (public.is_valid_typed_uuid('notisub'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.notification_subscription OWNER TO postgres;

--
-- Name: notification_subscription notification_subscription_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_subscription
    ADD CONSTRAINT notification_subscription_pkey PRIMARY KEY (id);


--
-- Name: notification_subscription notification_subscription_rsn_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_subscription
    ADD CONSTRAINT notification_subscription_rsn_user_id_key UNIQUE (rsn_user_id);


--
-- Name: notification_subscription_rsn_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX notification_subscription_rsn_user_id_idx ON public.notification_subscription USING btree (rsn_user_id);


--
-- Name: notification_subscription log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.notification_subscription FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: notification_subscription tgr_apply_audit_notification_subscription; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tgr_apply_audit_notification_subscription BEFORE UPDATE ON public.notification_subscription FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: notification_subscription notification_subscription_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_subscription
    ADD CONSTRAINT notification_subscription_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: notification_subscription notification_subscription_rsn_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_subscription
    ADD CONSTRAINT notification_subscription_rsn_user_id_fkey FOREIGN KEY (rsn_user_id) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: notification_subscription notification_subscription_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_subscription
    ADD CONSTRAINT notification_subscription_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: notification_subscription Users can delete their own notification subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete their own notification subscriptions" ON public.notification_subscription FOR DELETE USING (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: notification_subscription Users can insert their own notification subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own notification subscriptions" ON public.notification_subscription FOR INSERT WITH CHECK (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: notification_subscription Users can update their own notification subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own notification subscriptions" ON public.notification_subscription FOR UPDATE USING (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: notification_subscription Users can view their own notification subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own notification subscriptions" ON public.notification_subscription FOR SELECT USING (((public.current_rsn_user_id())::text = rsn_user_id));


--
-- Name: notification_subscription; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.notification_subscription ENABLE ROW LEVEL SECURITY;

--
-- Name: TABLE notification_subscription; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.notification_subscription TO anon;
GRANT ALL ON TABLE public.notification_subscription TO authenticated;
GRANT ALL ON TABLE public.notification_subscription TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.notification_subscription)
---------------------------------------------------------------------------

