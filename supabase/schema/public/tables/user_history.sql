---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.user_history

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.user_history)
------------------------------
--                                         Table "public.user_history"
--       Column      |           Type           | Collation | Nullable |               Default                
-- ------------------+--------------------------+-----------+----------+--------------------------------------
--  id               | text                     |           | not null | generate_typed_uuid('usrhist'::text)
--  rsn_user_id      | text                     |           |          | 
--  skill_id_visited | text                     |           |          | 
--  created_date     | timestamp with time zone |           | not null | now()
--  updated_date     | timestamp with time zone |           | not null | now()
--  created_by       | text                     |           | not null | 
--  updated_by       | text                     |           | not null | 
--  podcast_id       | text                     |           |          | 
--  course_id        | text                     |           |          | 
-- Indexes:
--     "user_history_pkey" PRIMARY KEY, btree (id)
--     "user_history_unique_course_visit" UNIQUE CONSTRAINT, btree (rsn_user_id, course_id)
--     "user_history_unique_podcast_visit" UNIQUE CONSTRAINT, btree (rsn_user_id, podcast_id)
--     "user_history_unique_skill_visit" UNIQUE CONSTRAINT, btree (rsn_user_id, skill_id_visited)
-- Check constraints:
--     "user_history__id__check_prefix" CHECK (is_valid_typed_uuid('usrhist'::text, id::typed_uuid))
--     "user_history_xor_check" CHECK ((
-- CASE
--     WHEN skill_id_visited IS NOT NULL THEN 1
--     ELSE 0
-- END +
-- CASE
--     WHEN podcast_id IS NOT NULL THEN 1
--     ELSE 0
-- END +
-- CASE
--     WHEN course_id IS NOT NULL THEN 1
--     ELSE 0
-- END) = 1)
-- Foreign-key constraints:
--     "user_history_course_id_fkey" FOREIGN KEY (course_id) REFERENCES course(id) ON DELETE CASCADE
--     "user_history_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "user_history_podcast_id_fkey" FOREIGN KEY (podcast_id) REFERENCES podcast(id) ON DELETE CASCADE
--     "user_history_rsn_user_id_fkey" FOREIGN KEY (rsn_user_id) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "user_history_skill_id_visited_fkey" FOREIGN KEY (skill_id_visited) REFERENCES skill(id) ON DELETE CASCADE
--     "user_history_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE CASCADE
-- Policies:
--     POLICY "user_history DELETE" FOR DELETE
--       USING ((((current_rsn_user_id())::text = rsn_user_id) OR is_admin()))
--     POLICY "user_history INSERT" FOR INSERT
--       WITH CHECK ((((current_rsn_user_id())::text = rsn_user_id) OR is_admin()))
--     POLICY "user_history SELECT" FOR SELECT
--       USING ((((current_rsn_user_id())::text = rsn_user_id) OR is_admin()))
--     POLICY "user_history UPDATE" FOR UPDATE
--       USING ((((current_rsn_user_id())::text = rsn_user_id) OR is_admin()))
-- Triggers:
--     tgr_apply_audit_user_history BEFORE UPDATE ON user_history FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     tgr_log_operation_user_history AFTER INSERT OR DELETE OR UPDATE ON user_history FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_history)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.user_history)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_history (
    id text DEFAULT public.generate_typed_uuid('usrhist'::text) NOT NULL,
    rsn_user_id text,
    skill_id_visited text,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text NOT NULL,
    updated_by text NOT NULL,
    podcast_id text,
    course_id text,
    CONSTRAINT user_history__id__check_prefix CHECK (public.is_valid_typed_uuid('usrhist'::text, (id)::public.typed_uuid)),
    CONSTRAINT user_history_xor_check CHECK ((((
CASE
    WHEN (skill_id_visited IS NOT NULL) THEN 1
    ELSE 0
END +
CASE
    WHEN (podcast_id IS NOT NULL) THEN 1
    ELSE 0
END) +
CASE
    WHEN (course_id IS NOT NULL) THEN 1
    ELSE 0
END) = 1))
);


ALTER TABLE public.user_history OWNER TO postgres;

--
-- Name: TABLE user_history; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_history IS 'Table to store user visit history for skills and podcasts. Users can insert, select, update, and delete their own records.';


--
-- Name: COLUMN user_history.rsn_user_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.rsn_user_id IS 'The ID of the user who visited the skill';


--
-- Name: COLUMN user_history.skill_id_visited; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.skill_id_visited IS 'The ID of the skill that was visited';


--
-- Name: COLUMN user_history.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.created_date IS 'The timestamp when the skill was visited';


--
-- Name: COLUMN user_history.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.updated_date IS 'The timestamp when the skill was visited';


--
-- Name: COLUMN user_history.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.created_by IS 'The user who created the record';


--
-- Name: COLUMN user_history.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.updated_by IS 'The user who updated the record';


--
-- Name: COLUMN user_history.podcast_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.podcast_id IS 'The ID of the podcast that was visited';


--
-- Name: COLUMN user_history.course_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_history.course_id IS 'The ID of the course that was visited';


--
-- Name: user_history user_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_pkey PRIMARY KEY (id);


--
-- Name: user_history user_history_unique_course_visit; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_unique_course_visit UNIQUE (rsn_user_id, course_id);


--
-- Name: user_history user_history_unique_podcast_visit; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_unique_podcast_visit UNIQUE (rsn_user_id, podcast_id);


--
-- Name: user_history user_history_unique_skill_visit; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_unique_skill_visit UNIQUE (rsn_user_id, skill_id_visited);


--
-- Name: user_history tgr_apply_audit_user_history; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tgr_apply_audit_user_history BEFORE UPDATE ON public.user_history FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: user_history tgr_log_operation_user_history; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tgr_log_operation_user_history AFTER INSERT OR DELETE OR UPDATE ON public.user_history FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: user_history user_history_course_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.course(id) ON DELETE CASCADE;


--
-- Name: user_history user_history_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: user_history user_history_podcast_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_podcast_id_fkey FOREIGN KEY (podcast_id) REFERENCES public.podcast(id) ON DELETE CASCADE;


--
-- Name: user_history user_history_rsn_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_rsn_user_id_fkey FOREIGN KEY (rsn_user_id) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: user_history user_history_skill_id_visited_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_skill_id_visited_fkey FOREIGN KEY (skill_id_visited) REFERENCES public.skill(id) ON DELETE CASCADE;


--
-- Name: user_history user_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_history
    ADD CONSTRAINT user_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: user_history; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_history ENABLE ROW LEVEL SECURITY;

--
-- Name: user_history user_history DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_history DELETE" ON public.user_history FOR DELETE USING ((((public.current_rsn_user_id())::text = rsn_user_id) OR public.is_admin()));


--
-- Name: user_history user_history INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_history INSERT" ON public.user_history FOR INSERT WITH CHECK ((((public.current_rsn_user_id())::text = rsn_user_id) OR public.is_admin()));


--
-- Name: user_history user_history SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_history SELECT" ON public.user_history FOR SELECT USING ((((public.current_rsn_user_id())::text = rsn_user_id) OR public.is_admin()));


--
-- Name: user_history user_history UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_history UPDATE" ON public.user_history FOR UPDATE USING ((((public.current_rsn_user_id())::text = rsn_user_id) OR public.is_admin()));


--
-- Name: TABLE user_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_history TO anon;
GRANT ALL ON TABLE public.user_history TO authenticated;
GRANT ALL ON TABLE public.user_history TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_history)
---------------------------------------------------------------------------

