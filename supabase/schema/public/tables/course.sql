---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.course

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.course)
------------------------------
--                                              Table "public.course"
--      Column      |           Type           | Collation | Nullable |                  Default                   
-- -----------------+--------------------------+-----------+----------+--------------------------------------------
--  id              | text                     |           | not null | 'course_'::text || gen_random_uuid()::text
--  _name           | text                     |           | not null | 
--  _description    | text                     |           |          | 
--  for_user        | text                     |           |          | 
--  root_skill      | text                     |           |          | 
--  created_date    | timestamp with time zone |           | not null | now()
--  updated_date    | timestamp with time zone |           | not null | now()
--  created_by      | text                     |           |          | 
--  updated_by      | text                     |           |          | 
--  cover_image_url | text                     |           |          | 
-- Indexes:
--     "course_pkey" PRIMARY KEY, btree (id)
--     "course_created_by_idx" btree (created_by)
--     "course_for_user_idx" btree (for_user)
--     "course_root_skill_idx" btree (root_skill)
-- Check constraints:
--     "course_id_check" CHECK (id ~~ 'course_%'::text)
-- Foreign-key constraints:
--     "course_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "course_for_user_fkey" FOREIGN KEY (for_user) REFERENCES rsn_user(id) ON DELETE CASCADE
--     "course_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE CASCADE
--     "course_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "course_lesson" CONSTRAINT "course_lesson_course_fkey" FOREIGN KEY (course) REFERENCES course(id) ON DELETE CASCADE
--     TABLE "resource" CONSTRAINT "resource_parent_course_id_fkey" FOREIGN KEY (parent_course_id) REFERENCES course(id) ON DELETE SET NULL
--     TABLE "user_history" CONSTRAINT "user_history_course_id_fkey" FOREIGN KEY (course_id) REFERENCES course(id) ON DELETE CASCADE
-- Policies:
--     POLICY "course DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.DELETE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin()))
--     POLICY "course INSERT" FOR INSERT
--       WITH CHECK (((created_by = (current_rsn_user_id())::text) OR is_admin()))
--     POLICY "course SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin() OR (created_by = (current_rsn_user_id())::text)))
--     POLICY "course UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_course_memauth vwm
--   WHERE ((vwm.course_id = course.id) AND ((vwm.principal_id = (current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR is_admin()))
-- Triggers:
--     grant_course_creator_auth AFTER INSERT ON course FOR EACH ROW EXECUTE FUNCTION tgr_grant_entity_creator_authorization('id', 'course')
--     log_course_operation AFTER INSERT OR DELETE OR UPDATE ON course FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_course_tgr_apply_audit BEFORE INSERT OR UPDATE ON course FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.course)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.course)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: course; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.course (
    id text DEFAULT ('course_'::text || (gen_random_uuid())::text) NOT NULL,
    _name text NOT NULL,
    _description text,
    for_user text,
    root_skill text,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    cover_image_url text,
    CONSTRAINT course_id_check CHECK ((id ~~ 'course_%'::text))
);


ALTER TABLE public.course OWNER TO postgres;

--
-- Name: TABLE course; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.course IS 'A course containing ordered lessons and a skill tree';


--
-- Name: COLUMN course.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.id IS 'The unique identifier for the course';


--
-- Name: COLUMN course._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course._name IS 'The name of the course';


--
-- Name: COLUMN course._description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course._description IS 'The description of the course';


--
-- Name: COLUMN course.for_user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.for_user IS 'The user this course is for';


--
-- Name: COLUMN course.root_skill; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.root_skill IS 'The root skill of the course skill tree';


--
-- Name: COLUMN course.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.created_date IS 'The date this course was created';


--
-- Name: COLUMN course.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.updated_date IS 'The date this course was last updated';


--
-- Name: COLUMN course.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.created_by IS 'The user that created this course';


--
-- Name: COLUMN course.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.updated_by IS 'The user that last updated this course';


--
-- Name: COLUMN course.cover_image_url; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.course.cover_image_url IS 'URL to the cover image';


--
-- Name: course course_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_pkey PRIMARY KEY (id);


--
-- Name: course_created_by_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_created_by_idx ON public.course USING btree (created_by);


--
-- Name: course_for_user_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_for_user_idx ON public.course USING btree (for_user);


--
-- Name: course_root_skill_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX course_root_skill_idx ON public.course USING btree (root_skill);


--
-- Name: course grant_course_creator_auth; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER grant_course_creator_auth AFTER INSERT ON public.course FOR EACH ROW EXECUTE FUNCTION public.tgr_grant_entity_creator_authorization('id', 'course');


--
-- Name: course log_course_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_course_operation AFTER INSERT OR DELETE OR UPDATE ON public.course FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: course run_course_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_course_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.course FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: course course_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: course course_for_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_for_user_fkey FOREIGN KEY (for_user) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: course course_root_skill_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_root_skill_fkey FOREIGN KEY (root_skill) REFERENCES public.skill(id) ON DELETE CASCADE;


--
-- Name: course course_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: course; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.course ENABLE ROW LEVEL SECURITY;

--
-- Name: course course DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course DELETE" ON public.course FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.DELETE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin()));


--
-- Name: course course INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course INSERT" ON public.course FOR INSERT WITH CHECK (((created_by = (public.current_rsn_user_id())::text) OR public.is_admin()));


--
-- Name: course course SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course SELECT" ON public.course FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.SELECT'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin() OR (created_by = (public.current_rsn_user_id())::text)));


--
-- Name: course course UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "course UPDATE" ON public.course FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_course_memauth vwm
  WHERE ((vwm.course_id = course.id) AND ((vwm.principal_id = (public.current_rsn_user_id())::text) OR (vwm.is_public = true)) AND ('course.UPDATE'::text = ANY ((vwm.permissions)::text[]))))) OR public.is_admin()));


--
-- Name: TABLE course; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.course TO anon;
GRANT ALL ON TABLE public.course TO authenticated;
GRANT ALL ON TABLE public.course TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.course)
---------------------------------------------------------------------------

