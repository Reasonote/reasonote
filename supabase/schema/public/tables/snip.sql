---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.snip

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.snip)
------------------------------
--                                                Table "public.snip"
--            Column           |           Type           | Collation | Nullable |              Default              
-- ----------------------------+--------------------------+-----------+----------+-----------------------------------
--  id                         | text                     |           | not null | generate_typed_uuid('snip'::text)
--  _name                      | text                     |           | not null | 'Snip on '::text || now()
--  _type                      | text                     |           | not null | 
--  source_url                 | text                     |           |          | 
--  text_content               | text                     |           |          | 
--  metadata                   | jsonb                    |           |          | 
--  _owner                     | text                     |           |          | 
--  created_date               | timestamp with time zone |           | not null | now()
--  updated_date               | timestamp with time zone |           | not null | now()
--  created_by                 | text                     |           |          | 
--  updated_by                 | text                     |           |          | 
--  extraction_state           | extraction_state         |           |          | 'pending'::extraction_state
--  extraction_info            | jsonb                    |           |          | 
--  extraction_error           | text                     |           |          | 
--  page_id                    | text                     |           |          | 
--  auto_title                 | text                     |           |          | 
--  auto_summary               | text                     |           |          | 
--  auto_tags                  | text[]                   |           |          | 
--  auto_last_updated_date     | timestamp with time zone |           |          | 
--  auto_param_update_state    | extraction_state         |           |          | 'pending'::extraction_state
--  auto_param_update_attempts | integer                  |           |          | 0
--  root_skill                 | text                     |           |          | 
--  source_integration         | text                     |           |          | 
--  source_uniq_id             | text                     |           |          | 
-- Indexes:
--     "snip_pkey" PRIMARY KEY, btree (id)
--     "source_uniq_id_unique" UNIQUE CONSTRAINT, btree (source_uniq_id)
-- Check constraints:
--     "snip_id_check" CHECK (is_valid_typed_uuid('snip'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "snip__owner_fkey" FOREIGN KEY (_owner) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "snip_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "snip_root_skill_fkey" FOREIGN KEY (root_skill) REFERENCES skill(id) ON DELETE SET NULL
--     "snip_source_integration_fkey" FOREIGN KEY (source_integration) REFERENCES integration(id) ON DELETE SET NULL
--     "snip_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "resource" CONSTRAINT "resource_child_snip_id_fkey" FOREIGN KEY (child_snip_id) REFERENCES snip(id) ON DELETE SET NULL
-- Policies:
--     POLICY "snip DELETE" FOR DELETE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_snip_memauth vsm
--   WHERE ((vsm.snip_id = snip.id) AND ((vsm.principal_id = (current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('snip.DELETE'::text = ANY (vsm.permissions))))) OR is_admin() OR (_owner = (current_rsn_user_id())::text)))
--     POLICY "snip INSERT" FOR INSERT
--       WITH CHECK (((auth.uid() IS NOT NULL) OR is_admin()))
--     POLICY "snip SELECT" FOR SELECT
--       USING (((EXISTS ( SELECT 1
--    FROM vw_snip_memauth vsm
--   WHERE ((vsm.snip_id = snip.id) AND ((vsm.principal_id = (current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('snip.SELECT'::text = ANY (vsm.permissions))))) OR is_admin() OR (_owner = (current_rsn_user_id())::text)))
--     POLICY "snip UPDATE" FOR UPDATE
--       USING (((EXISTS ( SELECT 1
--    FROM vw_snip_memauth vsm
--   WHERE ((vsm.snip_id = snip.id) AND ((vsm.principal_id = (current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('snip.UPDATE'::text = ANY (vsm.permissions))))) OR is_admin() OR (_owner = (current_rsn_user_id())::text)))
-- Triggers:
--     create_page_from_snip_trigger BEFORE INSERT OR UPDATE ON snip FOR EACH ROW EXECUTE FUNCTION create_page_from_snip()
--     create_snip_skill BEFORE INSERT OR UPDATE ON snip FOR EACH ROW EXECUTE FUNCTION tgr_create_snip_skill()
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON snip FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     mark_extraction_as_unnecessary_trigger BEFORE INSERT OR UPDATE ON snip FOR EACH ROW EXECUTE FUNCTION mark_extraction_as_unnecessary()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON snip FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
--     snip__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON snip FOR EACH ROW EXECUTE FUNCTION tgr_rsn_vec_queue_insert_update()
--     update_name_trigger BEFORE INSERT ON snip FOR EACH ROW EXECUTE FUNCTION update_name()
--     update_snip_skill BEFORE UPDATE OF _name ON snip FOR EACH ROW EXECUTE FUNCTION tgr_update_snip_skill()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.snip)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.snip)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: snip; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.snip (
    id text DEFAULT public.generate_typed_uuid('snip'::text) NOT NULL,
    _name text DEFAULT ('Snip on '::text || now()) NOT NULL,
    _type text NOT NULL,
    source_url text,
    text_content text,
    metadata jsonb,
    _owner text,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    extraction_state public.extraction_state DEFAULT 'pending'::public.extraction_state,
    extraction_info jsonb,
    extraction_error text,
    page_id text,
    auto_title text,
    auto_summary text,
    auto_tags text[],
    auto_last_updated_date timestamp with time zone,
    auto_param_update_state public.extraction_state DEFAULT 'pending'::public.extraction_state,
    auto_param_update_attempts integer DEFAULT 0,
    root_skill text,
    source_integration text,
    source_uniq_id text,
    CONSTRAINT snip_id_check CHECK (public.is_valid_typed_uuid('snip'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.snip OWNER TO postgres;

--
-- Name: TABLE snip; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.snip IS 'An snip is a tool that can be used to analyze a document or a set of documents.';


--
-- Name: COLUMN snip.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.id IS 'The unique identifier for the snip.';


--
-- Name: COLUMN snip._type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip._type IS 'The type of snip. For now, this is text only.';


--
-- Name: COLUMN snip.source_url; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.source_url IS 'The URL where the snip was sourced from.';


--
-- Name: COLUMN snip.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.metadata IS 'The metadata for the snip.';


--
-- Name: COLUMN snip._owner; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip._owner IS 'The owner of the snip. NOTE: If null, there is a limited (2m) window where this record is open for anyone to claim.';


--
-- Name: COLUMN snip.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.created_date IS 'The date that this snip was created.';


--
-- Name: COLUMN snip.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.updated_date IS 'The date that this snip was last updated.';


--
-- Name: COLUMN snip.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.created_by IS 'The user that created this snip.';


--
-- Name: COLUMN snip.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.updated_by IS 'The user that last updated this snip.';


--
-- Name: COLUMN snip.auto_title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.auto_title IS 'The title that was automatically generated for this snip.';


--
-- Name: COLUMN snip.auto_summary; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.auto_summary IS 'The summary that was automatically generated for this snip.';


--
-- Name: COLUMN snip.auto_tags; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.auto_tags IS 'The tags that were automatically generated for this snip.';


--
-- Name: COLUMN snip.auto_last_updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.auto_last_updated_date IS 'The date that the automated params on this snip were last updated.';


--
-- Name: COLUMN snip.auto_param_update_state; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.auto_param_update_state IS 'The state of the last run of the automated parameter update.';


--
-- Name: COLUMN snip.auto_param_update_attempts; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.snip.auto_param_update_attempts IS 'The number of times the automated parameter update has been attempted.';


--
-- Name: snip snip_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT snip_pkey PRIMARY KEY (id);


--
-- Name: snip source_uniq_id_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT source_uniq_id_unique UNIQUE (source_uniq_id);


--
-- Name: snip create_page_from_snip_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER create_page_from_snip_trigger BEFORE INSERT OR UPDATE ON public.snip FOR EACH ROW EXECUTE FUNCTION public.create_page_from_snip();


--
-- Name: snip create_snip_skill; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER create_snip_skill BEFORE INSERT OR UPDATE ON public.snip FOR EACH ROW EXECUTE FUNCTION public.tgr_create_snip_skill();


--
-- Name: snip log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.snip FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: snip mark_extraction_as_unnecessary_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER mark_extraction_as_unnecessary_trigger BEFORE INSERT OR UPDATE ON public.snip FOR EACH ROW EXECUTE FUNCTION public.mark_extraction_as_unnecessary();


--
-- Name: snip run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.snip FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: snip snip__tgr_rsn_vec_queue_insert_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER snip__tgr_rsn_vec_queue_insert_update AFTER INSERT OR UPDATE ON public.snip FOR EACH ROW EXECUTE FUNCTION public.tgr_rsn_vec_queue_insert_update();


--
-- Name: snip update_name_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_name_trigger BEFORE INSERT ON public.snip FOR EACH ROW EXECUTE FUNCTION public.update_name();


--
-- Name: snip update_snip_skill; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_snip_skill BEFORE UPDATE OF _name ON public.snip FOR EACH ROW EXECUTE FUNCTION public.tgr_update_snip_skill();


--
-- Name: snip snip__owner_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT snip__owner_fkey FOREIGN KEY (_owner) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: snip snip_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT snip_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: snip snip_root_skill_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT snip_root_skill_fkey FOREIGN KEY (root_skill) REFERENCES public.skill(id) ON DELETE SET NULL;


--
-- Name: snip snip_source_integration_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT snip_source_integration_fkey FOREIGN KEY (source_integration) REFERENCES public.integration(id) ON DELETE SET NULL;


--
-- Name: snip snip_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snip
    ADD CONSTRAINT snip_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: snip; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.snip ENABLE ROW LEVEL SECURITY;

--
-- Name: snip snip DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "snip DELETE" ON public.snip FOR DELETE USING (((EXISTS ( SELECT 1
   FROM public.vw_snip_memauth vsm
  WHERE ((vsm.snip_id = snip.id) AND ((vsm.principal_id = (public.current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('snip.DELETE'::text = ANY (vsm.permissions))))) OR public.is_admin() OR (_owner = (public.current_rsn_user_id())::text)));


--
-- Name: snip snip INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "snip INSERT" ON public.snip FOR INSERT WITH CHECK (((auth.uid() IS NOT NULL) OR public.is_admin()));


--
-- Name: snip snip SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "snip SELECT" ON public.snip FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.vw_snip_memauth vsm
  WHERE ((vsm.snip_id = snip.id) AND ((vsm.principal_id = (public.current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('snip.SELECT'::text = ANY (vsm.permissions))))) OR public.is_admin() OR (_owner = (public.current_rsn_user_id())::text)));


--
-- Name: snip snip UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "snip UPDATE" ON public.snip FOR UPDATE USING (((EXISTS ( SELECT 1
   FROM public.vw_snip_memauth vsm
  WHERE ((vsm.snip_id = snip.id) AND ((vsm.principal_id = (public.current_rsn_user_id())::text) OR (vsm.is_public = true)) AND ('snip.UPDATE'::text = ANY (vsm.permissions))))) OR public.is_admin() OR (_owner = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE snip; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.snip TO anon;
GRANT ALL ON TABLE public.snip TO authenticated;
GRANT ALL ON TABLE public.snip TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.snip)
---------------------------------------------------------------------------

