---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.user_profile

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.user_profile)
------------------------------
--                                          Table "public.user_profile"
--        Column        |           Type           | Collation | Nullable |               Default                
-- ---------------------+--------------------------+-----------+----------+--------------------------------------
--  id                  | text                     |           | not null | generate_typed_uuid('usrprof'::text)
--  rsn_user_id         | text                     |           | not null | 
--  username            | text                     |           | not null | 
--  display_name        | text                     |           |          | 
--  bio                 | text                     |           |          | 
--  profile_image_url   | text                     |           |          | 
--  show_activity_graph | boolean                  |           |          | true
--  pinned_items        | text[]                   |           |          | '{}'::text[]
--  badges              | jsonb                    |           |          | '[]'::jsonb
--  created_date        | timestamp with time zone |           |          | now()
--  updated_date        | timestamp with time zone |           |          | now()
--  created_by          | text                     |           |          | 
--  updated_by          | text                     |           |          | 
-- Indexes:
--     "user_profile_pkey" PRIMARY KEY, btree (id)
--     "user_profile_rsn_user_id_idx" btree (rsn_user_id)
--     "user_profile_rsn_user_id_key" UNIQUE CONSTRAINT, btree (rsn_user_id)
--     "user_profile_username_idx" btree (username)
--     "user_profile_username_key" UNIQUE CONSTRAINT, btree (username)
-- Check constraints:
--     "profile_username_format" CHECK (username ~ '^[[:alnum:]_]+
------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_profile)
---------------------------------------------------------------------------
::text)
--     "profile_username_length" CHECK (char_length(username) >= 3 AND char_length(username) <= 30)
-- Foreign-key constraints:
--     "user_profile_rsn_user_id_fkey" FOREIGN KEY (rsn_user_id) REFERENCES rsn_user(id) ON DELETE CASCADE
-- Policies:
--     POLICY "User profiles are viewable by everyone" FOR SELECT
--       USING (true)
--     POLICY "Users can insert own user profile" FOR INSERT
--       WITH CHECK (((auth.uid())::text = ( SELECT (rsn_user.auth_id)::text AS auth_id
--    FROM rsn_user
--   WHERE (rsn_user.id = user_profile.rsn_user_id))))
--     POLICY "Users can update own user profile" FOR UPDATE
--       USING (((auth.uid())::text = ( SELECT (rsn_user.auth_id)::text AS auth_id
--    FROM rsn_user
--   WHERE (rsn_user.id = user_profile.rsn_user_id))))
-- Triggers:
--     ensure_username BEFORE INSERT ON user_profile FOR EACH ROW EXECUTE FUNCTION set_default_username()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON user_profile FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_profile)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.user_profile)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_profile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_profile (
    id text DEFAULT public.generate_typed_uuid('usrprof'::text) NOT NULL,
    rsn_user_id text NOT NULL,
    username text NOT NULL,
    display_name text,
    bio text,
    profile_image_url text,
    show_activity_graph boolean DEFAULT true,
    pinned_items text[] DEFAULT '{}'::text[],
    badges jsonb DEFAULT '[]'::jsonb,
    created_date timestamp with time zone DEFAULT now(),
    updated_date timestamp with time zone DEFAULT now(),
    created_by text,
    updated_by text,
    CONSTRAINT profile_username_format CHECK ((username ~ '^[[:alnum:]_]+
------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_profile)
---------------------------------------------------------------------------
::text)),
    CONSTRAINT profile_username_length CHECK (((char_length(username) >= 3) AND (char_length(username) <= 30)))
);


ALTER TABLE public.user_profile OWNER TO postgres;

--
-- Name: user_profile user_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_pkey PRIMARY KEY (id);


--
-- Name: user_profile user_profile_rsn_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_rsn_user_id_key UNIQUE (rsn_user_id);


--
-- Name: user_profile user_profile_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_username_key UNIQUE (username);


--
-- Name: user_profile_rsn_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX user_profile_rsn_user_id_idx ON public.user_profile USING btree (rsn_user_id);


--
-- Name: user_profile_username_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX user_profile_username_idx ON public.user_profile USING btree (username);


--
-- Name: user_profile ensure_username; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ensure_username BEFORE INSERT ON public.user_profile FOR EACH ROW EXECUTE FUNCTION public.set_default_username();


--
-- Name: user_profile run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.user_profile FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: user_profile user_profile_rsn_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_rsn_user_id_fkey FOREIGN KEY (rsn_user_id) REFERENCES public.rsn_user(id) ON DELETE CASCADE;


--
-- Name: user_profile User profiles are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "User profiles are viewable by everyone" ON public.user_profile FOR SELECT USING (true);


--
-- Name: user_profile Users can insert own user profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert own user profile" ON public.user_profile FOR INSERT WITH CHECK (((auth.uid())::text = ( SELECT (rsn_user.auth_id)::text AS auth_id
   FROM public.rsn_user
  WHERE (rsn_user.id = user_profile.rsn_user_id))));


--
-- Name: user_profile Users can update own user profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own user profile" ON public.user_profile FOR UPDATE USING (((auth.uid())::text = ( SELECT (rsn_user.auth_id)::text AS auth_id
   FROM public.rsn_user
  WHERE (rsn_user.id = user_profile.rsn_user_id))));


--
-- Name: user_profile; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_profile ENABLE ROW LEVEL SECURITY;

--
-- Name: TABLE user_profile; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_profile TO anon;
GRANT ALL ON TABLE public.user_profile TO authenticated;
GRANT ALL ON TABLE public.user_profile TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_profile)
---------------------------------------------------------------------------

