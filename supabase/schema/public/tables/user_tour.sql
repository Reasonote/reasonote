---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.user_tour

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.user_tour)
------------------------------
--                                         Table "public.user_tour"
--     Column    |           Type           | Collation | Nullable |                Default                
-- --------------+--------------------------+-----------+----------+---------------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('usertour'::text)
--  tour_name    | text                     |           |          | 
--  _user        | text                     |           |          | 
--  metadata     | jsonb                    |           |          | 
--  tour_status  | user_tour_status         |           |          | 
--  tour_state   | jsonb                    |           |          | 
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | typed_uuid               |           |          | 
--  updated_by   | typed_uuid               |           |          | 
-- Indexes:
--     "user_tour_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "user_lesson_instance__id__check_prefix" CHECK (is_valid_typed_uuid('usertour'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "user_tour__user_fkey" FOREIGN KEY (_user) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "user_tour_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "user_tour_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "user_tour DELETE" FOR DELETE
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR (_user = (current_rsn_user_id())::text)))
--     POLICY "user_tour INSERT" FOR INSERT
--       WITH CHECK ((((created_by)::text = (current_rsn_user_id())::text) OR (_user = (current_rsn_user_id())::text)))
--     POLICY "user_tour SELECT" FOR SELECT
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR (_user = (current_rsn_user_id())::text)))
--     POLICY "user_tour UPDATE" FOR UPDATE
--       USING ((((created_by)::text = (current_rsn_user_id())::text) OR (_user = (current_rsn_user_id())::text)))
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON user_tour FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON user_tour FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_tour)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.user_tour)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_tour; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_tour (
    id text DEFAULT public.generate_typed_uuid('usertour'::text) NOT NULL,
    tour_name text,
    _user text,
    metadata jsonb,
    tour_status public.user_tour_status,
    tour_state jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    CONSTRAINT user_lesson_instance__id__check_prefix CHECK (public.is_valid_typed_uuid('usertour'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.user_tour OWNER TO postgres;

--
-- Name: TABLE user_tour; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_tour IS 'User tour completion tracking';


--
-- Name: COLUMN user_tour.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.id IS 'Primary key';


--
-- Name: COLUMN user_tour.tour_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.tour_name IS 'Name of the tour';


--
-- Name: COLUMN user_tour._user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour._user IS 'User ID';


--
-- Name: COLUMN user_tour.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.metadata IS 'Metadata';


--
-- Name: COLUMN user_tour.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.created_date IS 'Created date';


--
-- Name: COLUMN user_tour.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.updated_date IS 'Updated date';


--
-- Name: COLUMN user_tour.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.created_by IS 'Created by';


--
-- Name: COLUMN user_tour.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_tour.updated_by IS 'Updated by';


--
-- Name: user_tour user_tour_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tour
    ADD CONSTRAINT user_tour_pkey PRIMARY KEY (id);


--
-- Name: user_tour log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.user_tour FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: user_tour run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.user_tour FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: user_tour user_tour__user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tour
    ADD CONSTRAINT user_tour__user_fkey FOREIGN KEY (_user) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_tour user_tour_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tour
    ADD CONSTRAINT user_tour_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_tour user_tour_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tour
    ADD CONSTRAINT user_tour_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_tour; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_tour ENABLE ROW LEVEL SECURITY;

--
-- Name: user_tour user_tour DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_tour DELETE" ON public.user_tour FOR DELETE USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: user_tour user_tour INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_tour INSERT" ON public.user_tour FOR INSERT WITH CHECK ((((created_by)::text = (public.current_rsn_user_id())::text) OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: user_tour user_tour SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_tour SELECT" ON public.user_tour FOR SELECT USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: user_tour user_tour UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_tour UPDATE" ON public.user_tour FOR UPDATE USING ((((created_by)::text = (public.current_rsn_user_id())::text) OR (_user = (public.current_rsn_user_id())::text)));


--
-- Name: TABLE user_tour; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_tour TO anon;
GRANT ALL ON TABLE public.user_tour TO authenticated;
GRANT ALL ON TABLE public.user_tour TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_tour)
---------------------------------------------------------------------------

