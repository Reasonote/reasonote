---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.user_activity_feedback

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.user_activity_feedback)
------------------------------
--                                  Table "public.user_activity_feedback"
--     Column    |           Type           | Collation | Nullable |                Default                
-- --------------+--------------------------+-----------+----------+---------------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('usractfb'::text)
--  activity     | text                     |           |          | 
--  _value       | double precision         |           |          | 
--  _description | text                     |           |          | 
--  metadata     | jsonb                    |           |          | 
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | typed_uuid               |           |          | 
--  updated_by   | typed_uuid               |           |          | 
--  _tags        | text[]                   |           |          | 
-- Indexes:
--     "user_activity_feedback_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "user_activity_feedback__id__check_prefix" CHECK (is_valid_typed_uuid('usractfb'::text, id::typed_uuid))
--     "user_activity_feedback__value_check" CHECK (_value >= '-1'::integer::double precision AND _value <= 1::double precision)
-- Foreign-key constraints:
--     "user_activity_feedback_activity_fkey" FOREIGN KEY (activity) REFERENCES activity(id) ON DELETE CASCADE
--     "user_activity_feedback_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "user_activity_feedback_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "user_activity_feedback DELETE" FOR DELETE
--       USING (true)
--     POLICY "user_activity_feedback INSERT" FOR INSERT
--       WITH CHECK (true)
--     POLICY "user_activity_feedback SELECT" FOR SELECT
--       USING (true)
--     POLICY "user_activity_feedback UPDATE" FOR UPDATE
--       USING (true)
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON user_activity_feedback FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON user_activity_feedback FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.user_activity_feedback)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.user_activity_feedback)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_activity_feedback; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_activity_feedback (
    id text DEFAULT public.generate_typed_uuid('usractfb'::text) NOT NULL,
    activity text,
    _value double precision,
    _description text,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by public.typed_uuid,
    updated_by public.typed_uuid,
    _tags text[],
    CONSTRAINT user_activity_feedback__id__check_prefix CHECK (public.is_valid_typed_uuid('usractfb'::text, (id)::public.typed_uuid)),
    CONSTRAINT user_activity_feedback__value_check CHECK (((_value >= ('-1'::integer)::double precision) AND (_value <= (1)::double precision)))
);


ALTER TABLE public.user_activity_feedback OWNER TO postgres;

--
-- Name: TABLE user_activity_feedback; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_activity_feedback IS 'A user''s feedback for an activity';


--
-- Name: COLUMN user_activity_feedback.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.id IS 'The unique identifier for the user activity feedback';


--
-- Name: COLUMN user_activity_feedback.activity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.activity IS 'The activity that the user activity feedback is for';


--
-- Name: COLUMN user_activity_feedback._value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback._value IS 'The value of the user activity feedback -- a number between -1 and 1. -1 is negative feedback, 0 is neutral feedback, and 1 is positive feedback';


--
-- Name: COLUMN user_activity_feedback._description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback._description IS 'The feedback of the user activity feedback';


--
-- Name: COLUMN user_activity_feedback.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.metadata IS 'The metadata of the user activity feedback';


--
-- Name: COLUMN user_activity_feedback.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.created_date IS 'The date the user activity feedback was created';


--
-- Name: COLUMN user_activity_feedback.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.updated_date IS 'The date the user activity feedback was last updated';


--
-- Name: COLUMN user_activity_feedback.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.created_by IS 'The user that created the user activity feedback';


--
-- Name: COLUMN user_activity_feedback.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback.updated_by IS 'The user that last updated the user activity feedback';


--
-- Name: COLUMN user_activity_feedback._tags; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_activity_feedback._tags IS 'Array of feedback tags describing the type of feedback (e.g., "unclear_instructions", "technical_issue", etc.)';


--
-- Name: user_activity_feedback user_activity_feedback_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_feedback
    ADD CONSTRAINT user_activity_feedback_pkey PRIMARY KEY (id);


--
-- Name: user_activity_feedback log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.user_activity_feedback FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: user_activity_feedback run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.user_activity_feedback FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: user_activity_feedback user_activity_feedback_activity_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_feedback
    ADD CONSTRAINT user_activity_feedback_activity_fkey FOREIGN KEY (activity) REFERENCES public.activity(id) ON DELETE CASCADE;


--
-- Name: user_activity_feedback user_activity_feedback_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_feedback
    ADD CONSTRAINT user_activity_feedback_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_activity_feedback user_activity_feedback_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_activity_feedback
    ADD CONSTRAINT user_activity_feedback_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: user_activity_feedback; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_activity_feedback ENABLE ROW LEVEL SECURITY;

--
-- Name: user_activity_feedback user_activity_feedback DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_feedback DELETE" ON public.user_activity_feedback FOR DELETE USING (true);


--
-- Name: user_activity_feedback user_activity_feedback INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_feedback INSERT" ON public.user_activity_feedback FOR INSERT WITH CHECK (true);


--
-- Name: user_activity_feedback user_activity_feedback SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_feedback SELECT" ON public.user_activity_feedback FOR SELECT USING (true);


--
-- Name: user_activity_feedback user_activity_feedback UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user_activity_feedback UPDATE" ON public.user_activity_feedback FOR UPDATE USING (true);


--
-- Name: TABLE user_activity_feedback; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_activity_feedback TO anon;
GRANT ALL ON TABLE public.user_activity_feedback TO authenticated;
GRANT ALL ON TABLE public.user_activity_feedback TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.user_activity_feedback)
---------------------------------------------------------------------------

