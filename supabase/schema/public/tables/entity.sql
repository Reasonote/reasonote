---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.entity

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.entity)
------------------------------
--                                        Table "public.entity"
--     Column    |           Type           | Collation | Nullable |              Default              
-- --------------+--------------------------+-----------+----------+-----------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('enty'::text)
--  e_name       | text                     |           |          | 
--  e_type       | text                     |           |          | 
--  e_data       | jsonb                    |           |          | 
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
-- Indexes:
--     "entity_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "entity__id__check_prefix" CHECK (is_valid_typed_uuid('enty'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "entity_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "entity_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Policies:
--     POLICY "entity DELETE" FOR DELETE
--       USING (true)
--     POLICY "entity INSERT" FOR INSERT
--       WITH CHECK (true)
--     POLICY "entity SELECT" FOR SELECT
--       USING (true)
--     POLICY "entity UPDATE" FOR UPDATE
--       USING (true)
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON entity FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON entity FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.entity)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.entity)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: entity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.entity (
    id text DEFAULT public.generate_typed_uuid('enty'::text) NOT NULL,
    e_name text,
    e_type text,
    e_data jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT entity__id__check_prefix CHECK (public.is_valid_typed_uuid('enty'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.entity OWNER TO postgres;

--
-- Name: TABLE entity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.entity IS 'A thing that exists.';


--
-- Name: COLUMN entity.e_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.entity.e_name IS 'The name of the entity.';


--
-- Name: entity entity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.entity
    ADD CONSTRAINT entity_pkey PRIMARY KEY (id);


--
-- Name: entity log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.entity FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: entity run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.entity FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: entity entity_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.entity
    ADD CONSTRAINT entity_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: entity entity_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.entity
    ADD CONSTRAINT entity_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: entity; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.entity ENABLE ROW LEVEL SECURITY;

--
-- Name: entity entity DELETE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "entity DELETE" ON public.entity FOR DELETE USING (true);


--
-- Name: entity entity INSERT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "entity INSERT" ON public.entity FOR INSERT WITH CHECK (true);


--
-- Name: entity entity SELECT; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "entity SELECT" ON public.entity FOR SELECT USING (true);


--
-- Name: entity entity UPDATE; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "entity UPDATE" ON public.entity FOR UPDATE USING (true);


--
-- Name: TABLE entity; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.entity TO anon;
GRANT ALL ON TABLE public.entity TO authenticated;
GRANT ALL ON TABLE public.entity TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.entity)
---------------------------------------------------------------------------

