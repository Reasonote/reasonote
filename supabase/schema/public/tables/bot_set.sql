---------------------------------------------------------------------------
-- 
-- ⚠️ DO NOT EDIT THIS FILE!
-- THIS FILE WAS AUTOMATICALLY GENERATED FROM THE CONTENTS OF A CLEANLY-MIGRATED DATABASE.
-- 
-- ℹ️ To change the contents of this file, create a new migration under 'supabase/migrations/'
-- that makes the change you would like to see.
-- 
---------------------------------------------------------------------------
-- Table: public.bot_set

---------------------------------------------------------------------------
-- BEGIN: TABLE DESCRIPTION (TABLE: public.bot_set)
------------------------------
--                                         Table "public.bot_set"
--     Column    |           Type           | Collation | Nullable |               Default               
-- --------------+--------------------------+-----------+----------+-------------------------------------
--  id           | text                     |           | not null | generate_typed_uuid('botset'::text)
--  _name        | text                     |           |          | 
--  for_user     | text                     |           |          | 
--  _description | text                     |           |          | 
--  metadata     | jsonb                    |           |          | 
--  created_date | timestamp with time zone |           | not null | now()
--  updated_date | timestamp with time zone |           | not null | now()
--  created_by   | text                     |           |          | 
--  updated_by   | text                     |           |          | 
-- Indexes:
--     "bot_set_pkey" PRIMARY KEY, btree (id)
-- Check constraints:
--     "bot_set__id__check_prefix" CHECK (is_valid_typed_uuid('botset'::text, id::typed_uuid))
-- Foreign-key constraints:
--     "bot_set_created_by_fkey" FOREIGN KEY (created_by) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "bot_set_for_user_fkey" FOREIGN KEY (for_user) REFERENCES rsn_user(id) ON DELETE SET NULL
--     "bot_set_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES rsn_user(id) ON DELETE SET NULL
-- Referenced by:
--     TABLE "bot_set_bot" CONSTRAINT "bot_set_bot_bot_set_fkey" FOREIGN KEY (bot_set) REFERENCES bot_set(id) ON DELETE CASCADE
-- Policies:
--     POLICY "bot_set__anon__delete" FOR DELETE
--       TO anon
--       USING (false)
--     POLICY "bot_set__anon__insert" FOR INSERT
--       TO anon
--       WITH CHECK (false)
--     POLICY "bot_set__anon__select" FOR SELECT
--       TO anon
--       USING (false)
--     POLICY "bot_set__anon__update" FOR UPDATE
--       TO anon
--       USING (false)
--     POLICY "bot_set__authenticated__delete" FOR DELETE
--       TO authenticated
--       USING (
-- CASE
--     WHEN (for_user IS NOT NULL) THEN (for_user = (current_rsn_user_id())::text)
--     ELSE true
-- END)
--     POLICY "bot_set__authenticated__insert" FOR INSERT
--       TO authenticated
--       WITH CHECK (
-- CASE
--     WHEN (for_user IS NOT NULL) THEN (for_user = (current_rsn_user_id())::text)
--     ELSE true
-- END)
--     POLICY "bot_set__authenticated__select" FOR SELECT
--       TO authenticated
--       USING (
-- CASE
--     WHEN (for_user IS NOT NULL) THEN (for_user = (current_rsn_user_id())::text)
--     ELSE true
-- END)
--     POLICY "bot_set__authenticated__update" FOR UPDATE
--       TO authenticated
--       USING (
-- CASE
--     WHEN (for_user IS NOT NULL) THEN (for_user = (current_rsn_user_id())::text)
--     ELSE true
-- END)
--     POLICY "bot_set__service_role__delete" FOR DELETE
--       TO service_role
--       USING (true)
--     POLICY "bot_set__service_role__insert" FOR INSERT
--       TO service_role
--       WITH CHECK (true)
--     POLICY "bot_set__service_role__select" FOR SELECT
--       TO service_role
--       USING (true)
--     POLICY "bot_set__service_role__update" FOR UPDATE
--       TO service_role
--       USING (true)
-- Triggers:
--     log_operation AFTER INSERT OR DELETE OR UPDATE ON bot_set FOR EACH ROW EXECUTE FUNCTION tgr_log_operation()
--     run_tgr_apply_audit BEFORE INSERT OR UPDATE ON bot_set FOR EACH ROW EXECUTE FUNCTION tgr_apply_audit()
-- 
-- 

------------------------------
-- END: TABLE DESCRIPTION (TABLE: public.bot_set)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
-- BEGIN: PG_DUMP RESULT (TABLE: public.bot_set)
------------------------------
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: bot_set; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bot_set (
    id text DEFAULT public.generate_typed_uuid('botset'::text) NOT NULL,
    _name text,
    for_user text,
    _description text,
    metadata jsonb,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    updated_date timestamp with time zone DEFAULT now() NOT NULL,
    created_by text,
    updated_by text,
    CONSTRAINT bot_set__id__check_prefix CHECK (public.is_valid_typed_uuid('botset'::text, (id)::public.typed_uuid))
);


ALTER TABLE public.bot_set OWNER TO postgres;

--
-- Name: TABLE bot_set; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.bot_set IS 'A set of bots';


--
-- Name: COLUMN bot_set.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.id IS 'The unique identifier for the bot set';


--
-- Name: COLUMN bot_set._name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set._name IS 'The name of the bot set';


--
-- Name: COLUMN bot_set.for_user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.for_user IS 'If this is a user''s personal bot set, this will be the user''s id';


--
-- Name: COLUMN bot_set._description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set._description IS 'The description of the bot set';


--
-- Name: COLUMN bot_set.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.metadata IS 'The metadata for the bot set';


--
-- Name: COLUMN bot_set.created_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.created_date IS 'The date the bot set was created';


--
-- Name: COLUMN bot_set.updated_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.updated_date IS 'The date the bot set was last updated';


--
-- Name: COLUMN bot_set.created_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.created_by IS 'The user that created the bot set';


--
-- Name: COLUMN bot_set.updated_by; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.bot_set.updated_by IS 'The user that last updated the bot set';


--
-- Name: bot_set bot_set_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set
    ADD CONSTRAINT bot_set_pkey PRIMARY KEY (id);


--
-- Name: bot_set log_operation; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_operation AFTER INSERT OR DELETE OR UPDATE ON public.bot_set FOR EACH ROW EXECUTE FUNCTION public.tgr_log_operation();


--
-- Name: bot_set run_tgr_apply_audit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER run_tgr_apply_audit BEFORE INSERT OR UPDATE ON public.bot_set FOR EACH ROW EXECUTE FUNCTION public.tgr_apply_audit();


--
-- Name: bot_set bot_set_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set
    ADD CONSTRAINT bot_set_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot_set bot_set_for_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set
    ADD CONSTRAINT bot_set_for_user_fkey FOREIGN KEY (for_user) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot_set bot_set_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_set
    ADD CONSTRAINT bot_set_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.rsn_user(id) ON DELETE SET NULL;


--
-- Name: bot_set; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.bot_set ENABLE ROW LEVEL SECURITY;

--
-- Name: bot_set bot_set__anon__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__anon__delete ON public.bot_set FOR DELETE TO anon USING (false);


--
-- Name: bot_set bot_set__anon__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__anon__insert ON public.bot_set FOR INSERT TO anon WITH CHECK (false);


--
-- Name: bot_set bot_set__anon__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__anon__select ON public.bot_set FOR SELECT TO anon USING (false);


--
-- Name: bot_set bot_set__anon__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__anon__update ON public.bot_set FOR UPDATE TO anon USING (false);


--
-- Name: bot_set bot_set__authenticated__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__authenticated__delete ON public.bot_set FOR DELETE TO authenticated USING (
CASE
    WHEN (for_user IS NOT NULL) THEN (for_user = (public.current_rsn_user_id())::text)
    ELSE true
END);


--
-- Name: bot_set bot_set__authenticated__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__authenticated__insert ON public.bot_set FOR INSERT TO authenticated WITH CHECK (
CASE
    WHEN (for_user IS NOT NULL) THEN (for_user = (public.current_rsn_user_id())::text)
    ELSE true
END);


--
-- Name: bot_set bot_set__authenticated__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__authenticated__select ON public.bot_set FOR SELECT TO authenticated USING (
CASE
    WHEN (for_user IS NOT NULL) THEN (for_user = (public.current_rsn_user_id())::text)
    ELSE true
END);


--
-- Name: bot_set bot_set__authenticated__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__authenticated__update ON public.bot_set FOR UPDATE TO authenticated USING (
CASE
    WHEN (for_user IS NOT NULL) THEN (for_user = (public.current_rsn_user_id())::text)
    ELSE true
END);


--
-- Name: bot_set bot_set__service_role__delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__service_role__delete ON public.bot_set FOR DELETE TO service_role USING (true);


--
-- Name: bot_set bot_set__service_role__insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__service_role__insert ON public.bot_set FOR INSERT TO service_role WITH CHECK (true);


--
-- Name: bot_set bot_set__service_role__select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__service_role__select ON public.bot_set FOR SELECT TO service_role USING (true);


--
-- Name: bot_set bot_set__service_role__update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY bot_set__service_role__update ON public.bot_set FOR UPDATE TO service_role USING (true);


--
-- Name: TABLE bot_set; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.bot_set TO anon;
GRANT ALL ON TABLE public.bot_set TO authenticated;
GRANT ALL ON TABLE public.bot_set TO service_role;


--
-- PostgreSQL database dump complete
--



------------------------------
-- END: PG_DUMP RESULT (TABLE: public.bot_set)
---------------------------------------------------------------------------

