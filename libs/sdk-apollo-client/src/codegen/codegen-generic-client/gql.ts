/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n    fragment AccessLevelPermissionFlatFrag on AccessLevelPermission {\n        accessLevel\n        createdBy\n        createdDate\n        entityType\n        permissionCode\n        updatedBy\n        updatedDate\n    }\n": types.AccessLevelPermissionFlatFragFragmentDoc,
    "\n    fragment AccessLevelPermissionDeleteResponseFlatFrag on AccessLevelPermissionDeleteResponse {\n        affectedCount\n    }\n": types.AccessLevelPermissionDeleteResponseFlatFragFragmentDoc,
    "\n    fragment AccessLevelPermissionEdgeFlatFrag on AccessLevelPermissionEdge {\n        cursor\n    }\n": types.AccessLevelPermissionEdgeFlatFragFragmentDoc,
    "\n    fragment AccessLevelPermissionInsertResponseFlatFrag on AccessLevelPermissionInsertResponse {\n        affectedCount\n    }\n": types.AccessLevelPermissionInsertResponseFlatFragFragmentDoc,
    "\n    fragment AccessLevelPermissionUpdateResponseFlatFrag on AccessLevelPermissionUpdateResponse {\n        affectedCount\n    }\n": types.AccessLevelPermissionUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ActivityFlatFrag on Activity {\n        createdBy\n        createdDate\n        genInstructions\n        generatedForSkillPaths\n        generatedForUser\n        id\n        metadata\n        name\n        source\n        type\n        typeConfig\n        updatedBy\n        updatedDate\n    }\n": types.ActivityFlatFragFragmentDoc,
    "\n    fragment ActivityDeleteResponseFlatFrag on ActivityDeleteResponse {\n        affectedCount\n    }\n": types.ActivityDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ActivityEdgeFlatFrag on ActivityEdge {\n        cursor\n    }\n": types.ActivityEdgeFlatFragFragmentDoc,
    "\n    fragment ActivityInsertResponseFlatFrag on ActivityInsertResponse {\n        affectedCount\n    }\n": types.ActivityInsertResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySetFlatFrag on ActivitySet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n": types.ActivitySetFlatFragFragmentDoc,
    "\n    fragment ActivitySetActivityFlatFrag on ActivitySetActivity {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n": types.ActivitySetActivityFlatFragFragmentDoc,
    "\n    fragment ActivitySetActivityDeleteResponseFlatFrag on ActivitySetActivityDeleteResponse {\n        affectedCount\n    }\n": types.ActivitySetActivityDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySetActivityEdgeFlatFrag on ActivitySetActivityEdge {\n        cursor\n    }\n": types.ActivitySetActivityEdgeFlatFragFragmentDoc,
    "\n    fragment ActivitySetActivityInsertResponseFlatFrag on ActivitySetActivityInsertResponse {\n        affectedCount\n    }\n": types.ActivitySetActivityInsertResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySetActivityUpdateResponseFlatFrag on ActivitySetActivityUpdateResponse {\n        affectedCount\n    }\n": types.ActivitySetActivityUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySetDeleteResponseFlatFrag on ActivitySetDeleteResponse {\n        affectedCount\n    }\n": types.ActivitySetDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySetEdgeFlatFrag on ActivitySetEdge {\n        cursor\n    }\n": types.ActivitySetEdgeFlatFragFragmentDoc,
    "\n    fragment ActivitySetInsertResponseFlatFrag on ActivitySetInsertResponse {\n        affectedCount\n    }\n": types.ActivitySetInsertResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySetUpdateResponseFlatFrag on ActivitySetUpdateResponse {\n        affectedCount\n    }\n": types.ActivitySetUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySkillFlatFrag on ActivitySkill {\n        createdBy\n        createdDate\n        id\n        metadata\n        type\n        updatedBy\n        updatedDate\n        weight\n    }\n": types.ActivitySkillFlatFragFragmentDoc,
    "\n    fragment ActivitySkillDeleteResponseFlatFrag on ActivitySkillDeleteResponse {\n        affectedCount\n    }\n": types.ActivitySkillDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySkillEdgeFlatFrag on ActivitySkillEdge {\n        cursor\n    }\n": types.ActivitySkillEdgeFlatFragFragmentDoc,
    "\n    fragment ActivitySkillInsertResponseFlatFrag on ActivitySkillInsertResponse {\n        affectedCount\n    }\n": types.ActivitySkillInsertResponseFlatFragFragmentDoc,
    "\n    fragment ActivitySkillUpdateResponseFlatFrag on ActivitySkillUpdateResponse {\n        affectedCount\n    }\n": types.ActivitySkillUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ActivityUpdateResponseFlatFrag on ActivityUpdateResponse {\n        affectedCount\n    }\n": types.ActivityUpdateResponseFlatFragFragmentDoc,
    "\n    fragment AnalyzerFlatFrag on Analyzer {\n        aiJsonschema\n        aiPrompt\n        createdBy\n        createdDate\n        description\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n": types.AnalyzerFlatFragFragmentDoc,
    "\n    fragment AnalyzerDeleteResponseFlatFrag on AnalyzerDeleteResponse {\n        affectedCount\n    }\n": types.AnalyzerDeleteResponseFlatFragFragmentDoc,
    "\n    fragment AnalyzerEdgeFlatFrag on AnalyzerEdge {\n        cursor\n    }\n": types.AnalyzerEdgeFlatFragFragmentDoc,
    "\n    fragment AnalyzerInsertResponseFlatFrag on AnalyzerInsertResponse {\n        affectedCount\n    }\n": types.AnalyzerInsertResponseFlatFragFragmentDoc,
    "\n    fragment AnalyzerUpdateResponseFlatFrag on AnalyzerUpdateResponse {\n        affectedCount\n    }\n": types.AnalyzerUpdateResponseFlatFragFragmentDoc,
    "\n    fragment BlogPostFlatFrag on BlogPost {\n        content\n        createdBy\n        createdDate\n        id\n        isPublished\n        shortDescription\n        slug\n        tags\n        title\n        updatedBy\n        updatedDate\n    }\n": types.BlogPostFlatFragFragmentDoc,
    "\n    fragment BlogPostDeleteResponseFlatFrag on BlogPostDeleteResponse {\n        affectedCount\n    }\n": types.BlogPostDeleteResponseFlatFragFragmentDoc,
    "\n    fragment BlogPostEdgeFlatFrag on BlogPostEdge {\n        cursor\n    }\n": types.BlogPostEdgeFlatFragFragmentDoc,
    "\n    fragment BlogPostInsertResponseFlatFrag on BlogPostInsertResponse {\n        affectedCount\n    }\n": types.BlogPostInsertResponseFlatFragFragmentDoc,
    "\n    fragment BlogPostUpdateResponseFlatFrag on BlogPostUpdateResponse {\n        affectedCount\n    }\n": types.BlogPostUpdateResponseFlatFragFragmentDoc,
    "\n    fragment BotFlatFrag on Bot {\n        avatarEmoji\n        avatarUrl\n        createdBy\n        createdDate\n        description\n        extras\n        forkedFrom\n        id\n        isPublic\n        name\n        prompt\n        updatedBy\n        updatedDate\n    }\n": types.BotFlatFragFragmentDoc,
    "\n    fragment BotDeleteResponseFlatFrag on BotDeleteResponse {\n        affectedCount\n    }\n": types.BotDeleteResponseFlatFragFragmentDoc,
    "\n    fragment BotEdgeFlatFrag on BotEdge {\n        cursor\n    }\n": types.BotEdgeFlatFragFragmentDoc,
    "\n    fragment BotInsertResponseFlatFrag on BotInsertResponse {\n        affectedCount\n    }\n": types.BotInsertResponseFlatFragFragmentDoc,
    "\n    fragment BotSetFlatFrag on BotSet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n": types.BotSetFlatFragFragmentDoc,
    "\n    fragment BotSetBotFlatFrag on BotSetBot {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n": types.BotSetBotFlatFragFragmentDoc,
    "\n    fragment BotSetBotDeleteResponseFlatFrag on BotSetBotDeleteResponse {\n        affectedCount\n    }\n": types.BotSetBotDeleteResponseFlatFragFragmentDoc,
    "\n    fragment BotSetBotEdgeFlatFrag on BotSetBotEdge {\n        cursor\n    }\n": types.BotSetBotEdgeFlatFragFragmentDoc,
    "\n    fragment BotSetBotInsertResponseFlatFrag on BotSetBotInsertResponse {\n        affectedCount\n    }\n": types.BotSetBotInsertResponseFlatFragFragmentDoc,
    "\n    fragment BotSetBotUpdateResponseFlatFrag on BotSetBotUpdateResponse {\n        affectedCount\n    }\n": types.BotSetBotUpdateResponseFlatFragFragmentDoc,
    "\n    fragment BotSetDeleteResponseFlatFrag on BotSetDeleteResponse {\n        affectedCount\n    }\n": types.BotSetDeleteResponseFlatFragFragmentDoc,
    "\n    fragment BotSetEdgeFlatFrag on BotSetEdge {\n        cursor\n    }\n": types.BotSetEdgeFlatFragFragmentDoc,
    "\n    fragment BotSetInsertResponseFlatFrag on BotSetInsertResponse {\n        affectedCount\n    }\n": types.BotSetInsertResponseFlatFragFragmentDoc,
    "\n    fragment BotSetUpdateResponseFlatFrag on BotSetUpdateResponse {\n        affectedCount\n    }\n": types.BotSetUpdateResponseFlatFragFragmentDoc,
    "\n    fragment BotUpdateResponseFlatFrag on BotUpdateResponse {\n        affectedCount\n    }\n": types.BotUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ChapterFlatFrag on Chapter {\n        createdBy\n        createdDate\n        forUser\n        icon\n        id\n        metadata\n        name\n        rootSkill\n        rootSkillOrder\n        rootSkillPath\n        summary\n        updatedBy\n        updatedDate\n    }\n": types.ChapterFlatFragFragmentDoc,
    "\n    fragment ChapterDeleteResponseFlatFrag on ChapterDeleteResponse {\n        affectedCount\n    }\n": types.ChapterDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ChapterEdgeFlatFrag on ChapterEdge {\n        cursor\n    }\n": types.ChapterEdgeFlatFragFragmentDoc,
    "\n    fragment ChapterInsertResponseFlatFrag on ChapterInsertResponse {\n        affectedCount\n    }\n": types.ChapterInsertResponseFlatFragFragmentDoc,
    "\n    fragment ChapterUpdateResponseFlatFrag on ChapterUpdateResponse {\n        affectedCount\n    }\n": types.ChapterUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ChatFlatFrag on Chat {\n        autoTitle\n        createdBy\n        createdDate\n        id\n        isPublic\n        manualTitle\n        topic\n        updatedBy\n        updatedDate\n    }\n": types.ChatFlatFragFragmentDoc,
    "\n    fragment ChatDeleteResponseFlatFrag on ChatDeleteResponse {\n        affectedCount\n    }\n": types.ChatDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ChatEdgeFlatFrag on ChatEdge {\n        cursor\n    }\n": types.ChatEdgeFlatFragFragmentDoc,
    "\n    fragment ChatInsertResponseFlatFrag on ChatInsertResponse {\n        affectedCount\n    }\n": types.ChatInsertResponseFlatFragFragmentDoc,
    "\n    fragment ChatMessageFlatFrag on ChatMessage {\n        body\n        botId\n        chatId\n        contextData\n        contextId\n        contextType\n        createdBy\n        createdByBot\n        createdDate\n        functionCall\n        id\n        role\n        updatedBy\n        updatedDate\n    }\n": types.ChatMessageFlatFragFragmentDoc,
    "\n    fragment ChatMessageDeleteResponseFlatFrag on ChatMessageDeleteResponse {\n        affectedCount\n    }\n": types.ChatMessageDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ChatMessageEdgeFlatFrag on ChatMessageEdge {\n        cursor\n    }\n": types.ChatMessageEdgeFlatFragFragmentDoc,
    "\n    fragment ChatMessageInsertResponseFlatFrag on ChatMessageInsertResponse {\n        affectedCount\n    }\n": types.ChatMessageInsertResponseFlatFragFragmentDoc,
    "\n    fragment ChatMessageUpdateResponseFlatFrag on ChatMessageUpdateResponse {\n        affectedCount\n    }\n": types.ChatMessageUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ChatUpdateResponseFlatFrag on ChatUpdateResponse {\n        affectedCount\n    }\n": types.ChatUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ChromeExtensionEventFlatFrag on ChromeExtensionEvent {\n        createdBy\n        createdDate\n        eventType\n        id\n        metadata\n        pageTitle\n        rsnUserId\n        siteUrl\n        updatedBy\n        updatedDate\n        viewedAt\n    }\n": types.ChromeExtensionEventFlatFragFragmentDoc,
    "\n    fragment ChromeExtensionEventDeleteResponseFlatFrag on ChromeExtensionEventDeleteResponse {\n        affectedCount\n    }\n": types.ChromeExtensionEventDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ChromeExtensionEventEdgeFlatFrag on ChromeExtensionEventEdge {\n        cursor\n    }\n": types.ChromeExtensionEventEdgeFlatFragFragmentDoc,
    "\n    fragment ChromeExtensionEventInsertResponseFlatFrag on ChromeExtensionEventInsertResponse {\n        affectedCount\n    }\n": types.ChromeExtensionEventInsertResponseFlatFragFragmentDoc,
    "\n    fragment ChromeExtensionEventUpdateResponseFlatFrag on ChromeExtensionEventUpdateResponse {\n        affectedCount\n    }\n": types.ChromeExtensionEventUpdateResponseFlatFragFragmentDoc,
    "\n    fragment CourseFlatFrag on Course {\n        coverImageUrl\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        name\n        rootSkill\n        updatedBy\n        updatedDate\n    }\n": types.CourseFlatFragFragmentDoc,
    "\n    fragment CourseDeleteResponseFlatFrag on CourseDeleteResponse {\n        affectedCount\n    }\n": types.CourseDeleteResponseFlatFragFragmentDoc,
    "\n    fragment CourseEdgeFlatFrag on CourseEdge {\n        cursor\n    }\n": types.CourseEdgeFlatFragFragmentDoc,
    "\n    fragment CourseInsertResponseFlatFrag on CourseInsertResponse {\n        affectedCount\n    }\n": types.CourseInsertResponseFlatFragFragmentDoc,
    "\n    fragment CourseLessonFlatFrag on CourseLesson {\n        createdBy\n        createdDate\n        id\n        orderIndex\n        updatedBy\n        updatedDate\n    }\n": types.CourseLessonFlatFragFragmentDoc,
    "\n    fragment CourseLessonDeleteResponseFlatFrag on CourseLessonDeleteResponse {\n        affectedCount\n    }\n": types.CourseLessonDeleteResponseFlatFragFragmentDoc,
    "\n    fragment CourseLessonEdgeFlatFrag on CourseLessonEdge {\n        cursor\n    }\n": types.CourseLessonEdgeFlatFragFragmentDoc,
    "\n    fragment CourseLessonInsertResponseFlatFrag on CourseLessonInsertResponse {\n        affectedCount\n    }\n": types.CourseLessonInsertResponseFlatFragFragmentDoc,
    "\n    fragment CourseLessonUpdateResponseFlatFrag on CourseLessonUpdateResponse {\n        affectedCount\n    }\n": types.CourseLessonUpdateResponseFlatFragFragmentDoc,
    "\n    fragment CourseUpdateResponseFlatFrag on CourseUpdateResponse {\n        affectedCount\n    }\n": types.CourseUpdateResponseFlatFragFragmentDoc,
    "\n    fragment EmailSubscriptionFlatFrag on EmailSubscription {\n        accountUpdates\n        createdBy\n        createdDate\n        edtechUpdates\n        id\n        newsletter\n        productUpdates\n        resendSynced\n        rsnUserId\n        updatedBy\n        updatedDate\n    }\n": types.EmailSubscriptionFlatFragFragmentDoc,
    "\n    fragment EmailSubscriptionDeleteResponseFlatFrag on EmailSubscriptionDeleteResponse {\n        affectedCount\n    }\n": types.EmailSubscriptionDeleteResponseFlatFragFragmentDoc,
    "\n    fragment EmailSubscriptionEdgeFlatFrag on EmailSubscriptionEdge {\n        cursor\n    }\n": types.EmailSubscriptionEdgeFlatFragFragmentDoc,
    "\n    fragment EmailSubscriptionInsertResponseFlatFrag on EmailSubscriptionInsertResponse {\n        affectedCount\n    }\n": types.EmailSubscriptionInsertResponseFlatFragFragmentDoc,
    "\n    fragment EmailSubscriptionUpdateResponseFlatFrag on EmailSubscriptionUpdateResponse {\n        affectedCount\n    }\n": types.EmailSubscriptionUpdateResponseFlatFragFragmentDoc,
    "\n    fragment EntityFlatFrag on Entity {\n        createdBy\n        createdDate\n        eData\n        eName\n        eType\n        id\n        updatedBy\n        updatedDate\n    }\n": types.EntityFlatFragFragmentDoc,
    "\n    fragment EntityDeleteResponseFlatFrag on EntityDeleteResponse {\n        affectedCount\n    }\n": types.EntityDeleteResponseFlatFragFragmentDoc,
    "\n    fragment EntityEdgeFlatFrag on EntityEdge {\n        cursor\n    }\n": types.EntityEdgeFlatFragFragmentDoc,
    "\n    fragment EntityInsertResponseFlatFrag on EntityInsertResponse {\n        affectedCount\n    }\n": types.EntityInsertResponseFlatFragFragmentDoc,
    "\n    fragment EntityTypeFlatFrag on EntityType {\n        abbreviation\n        createdBy\n        createdDate\n        entityType\n        updatedBy\n        updatedDate\n    }\n": types.EntityTypeFlatFragFragmentDoc,
    "\n    fragment EntityTypeAccessLevelFlatFrag on EntityTypeAccessLevel {\n        accessLevel\n        createdBy\n        createdDate\n        updatedBy\n        updatedDate\n    }\n": types.EntityTypeAccessLevelFlatFragFragmentDoc,
    "\n    fragment EntityTypeAccessLevelDeleteResponseFlatFrag on EntityTypeAccessLevelDeleteResponse {\n        affectedCount\n    }\n": types.EntityTypeAccessLevelDeleteResponseFlatFragFragmentDoc,
    "\n    fragment EntityTypeAccessLevelEdgeFlatFrag on EntityTypeAccessLevelEdge {\n        cursor\n    }\n": types.EntityTypeAccessLevelEdgeFlatFragFragmentDoc,
    "\n    fragment EntityTypeAccessLevelInsertResponseFlatFrag on EntityTypeAccessLevelInsertResponse {\n        affectedCount\n    }\n": types.EntityTypeAccessLevelInsertResponseFlatFragFragmentDoc,
    "\n    fragment EntityTypeAccessLevelUpdateResponseFlatFrag on EntityTypeAccessLevelUpdateResponse {\n        affectedCount\n    }\n": types.EntityTypeAccessLevelUpdateResponseFlatFragFragmentDoc,
    "\n    fragment EntityTypeDeleteResponseFlatFrag on EntityTypeDeleteResponse {\n        affectedCount\n    }\n": types.EntityTypeDeleteResponseFlatFragFragmentDoc,
    "\n    fragment EntityTypeEdgeFlatFrag on EntityTypeEdge {\n        cursor\n    }\n": types.EntityTypeEdgeFlatFragFragmentDoc,
    "\n    fragment EntityTypeInsertResponseFlatFrag on EntityTypeInsertResponse {\n        affectedCount\n    }\n": types.EntityTypeInsertResponseFlatFragFragmentDoc,
    "\n    fragment EntityTypeUpdateResponseFlatFrag on EntityTypeUpdateResponse {\n        affectedCount\n    }\n": types.EntityTypeUpdateResponseFlatFragFragmentDoc,
    "\n    fragment EntityUpdateResponseFlatFrag on EntityUpdateResponse {\n        affectedCount\n    }\n": types.EntityUpdateResponseFlatFragFragmentDoc,
    "\n    fragment GoalFlatFrag on Goal {\n        completedDate\n        createdBy\n        createdDate\n        dueDate\n        id\n        isCompleted\n        metadata\n        name\n        type\n        updatedBy\n        updatedDate\n    }\n": types.GoalFlatFragFragmentDoc,
    "\n    fragment GoalDeleteResponseFlatFrag on GoalDeleteResponse {\n        affectedCount\n    }\n": types.GoalDeleteResponseFlatFragFragmentDoc,
    "\n    fragment GoalEdgeFlatFrag on GoalEdge {\n        cursor\n    }\n": types.GoalEdgeFlatFragFragmentDoc,
    "\n    fragment GoalInsertResponseFlatFrag on GoalInsertResponse {\n        affectedCount\n    }\n": types.GoalInsertResponseFlatFragFragmentDoc,
    "\n    fragment GoalUpdateResponseFlatFrag on GoalUpdateResponse {\n        affectedCount\n    }\n": types.GoalUpdateResponseFlatFragFragmentDoc,
    "\n    fragment GroupFlatFrag on Group {\n        groupName\n        id\n    }\n": types.GroupFlatFragFragmentDoc,
    "\n    fragment GroupDeleteResponseFlatFrag on GroupDeleteResponse {\n        affectedCount\n    }\n": types.GroupDeleteResponseFlatFragFragmentDoc,
    "\n    fragment GroupEdgeFlatFrag on GroupEdge {\n        cursor\n    }\n": types.GroupEdgeFlatFragFragmentDoc,
    "\n    fragment GroupInsertResponseFlatFrag on GroupInsertResponse {\n        affectedCount\n    }\n": types.GroupInsertResponseFlatFragFragmentDoc,
    "\n    fragment GroupUpdateResponseFlatFrag on GroupUpdateResponse {\n        affectedCount\n    }\n": types.GroupUpdateResponseFlatFragFragmentDoc,
    "\n    fragment IntegrationFlatFrag on Integration {\n        createdBy\n        createdDate\n        forUser\n        id\n        lastSynced\n        metadata\n        type\n        updatedBy\n        updatedDate\n    }\n": types.IntegrationFlatFragFragmentDoc,
    "\n    fragment IntegrationDeleteResponseFlatFrag on IntegrationDeleteResponse {\n        affectedCount\n    }\n": types.IntegrationDeleteResponseFlatFragFragmentDoc,
    "\n    fragment IntegrationEdgeFlatFrag on IntegrationEdge {\n        cursor\n    }\n": types.IntegrationEdgeFlatFragFragmentDoc,
    "\n    fragment IntegrationInsertResponseFlatFrag on IntegrationInsertResponse {\n        affectedCount\n    }\n": types.IntegrationInsertResponseFlatFragFragmentDoc,
    "\n    fragment IntegrationTokenFlatFrag on IntegrationToken {\n        createdBy\n        createdDate\n        id\n        integrationId\n        metadata\n        token\n        updatedBy\n        updatedDate\n    }\n": types.IntegrationTokenFlatFragFragmentDoc,
    "\n    fragment IntegrationTokenDeleteResponseFlatFrag on IntegrationTokenDeleteResponse {\n        affectedCount\n    }\n": types.IntegrationTokenDeleteResponseFlatFragFragmentDoc,
    "\n    fragment IntegrationTokenEdgeFlatFrag on IntegrationTokenEdge {\n        cursor\n    }\n": types.IntegrationTokenEdgeFlatFragFragmentDoc,
    "\n    fragment IntegrationTokenInsertResponseFlatFrag on IntegrationTokenInsertResponse {\n        affectedCount\n    }\n": types.IntegrationTokenInsertResponseFlatFragFragmentDoc,
    "\n    fragment IntegrationTokenUpdateResponseFlatFrag on IntegrationTokenUpdateResponse {\n        affectedCount\n    }\n": types.IntegrationTokenUpdateResponseFlatFragFragmentDoc,
    "\n    fragment IntegrationUpdateResponseFlatFrag on IntegrationUpdateResponse {\n        affectedCount\n    }\n": types.IntegrationUpdateResponseFlatFragFragmentDoc,
    "\n    fragment JournalFlatFrag on Journal {\n        createdBy\n        createdDate\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n": types.JournalFlatFragFragmentDoc,
    "\n    fragment JournalDeleteResponseFlatFrag on JournalDeleteResponse {\n        affectedCount\n    }\n": types.JournalDeleteResponseFlatFragFragmentDoc,
    "\n    fragment JournalEdgeFlatFrag on JournalEdge {\n        cursor\n    }\n": types.JournalEdgeFlatFragFragmentDoc,
    "\n    fragment JournalInsertResponseFlatFrag on JournalInsertResponse {\n        affectedCount\n    }\n": types.JournalInsertResponseFlatFragFragmentDoc,
    "\n    fragment JournalUpdateResponseFlatFrag on JournalUpdateResponse {\n        affectedCount\n    }\n": types.JournalUpdateResponseFlatFragFragmentDoc,
    "\n    fragment LessonFlatFrag on Lesson {\n        chapterOrder\n        createdBy\n        createdDate\n        forUser\n        icon\n        id\n        lessonType\n        metadata\n        name\n        rootSkill\n        rootSkillPath\n        snipIds\n        summary\n        updatedBy\n        updatedDate\n    }\n": types.LessonFlatFragFragmentDoc,
    "\n    fragment LessonActivityFlatFrag on LessonActivity {\n        createdBy\n        createdDate\n        id\n        metadata\n        position\n        updatedBy\n        updatedDate\n    }\n": types.LessonActivityFlatFragFragmentDoc,
    "\n    fragment LessonActivityDeleteResponseFlatFrag on LessonActivityDeleteResponse {\n        affectedCount\n    }\n": types.LessonActivityDeleteResponseFlatFragFragmentDoc,
    "\n    fragment LessonActivityEdgeFlatFrag on LessonActivityEdge {\n        cursor\n    }\n": types.LessonActivityEdgeFlatFragFragmentDoc,
    "\n    fragment LessonActivityInsertResponseFlatFrag on LessonActivityInsertResponse {\n        affectedCount\n    }\n": types.LessonActivityInsertResponseFlatFragFragmentDoc,
    "\n    fragment LessonActivityUpdateResponseFlatFrag on LessonActivityUpdateResponse {\n        affectedCount\n    }\n": types.LessonActivityUpdateResponseFlatFragFragmentDoc,
    "\n    fragment LessonDeleteResponseFlatFrag on LessonDeleteResponse {\n        affectedCount\n    }\n": types.LessonDeleteResponseFlatFragFragmentDoc,
    "\n    fragment LessonEdgeFlatFrag on LessonEdge {\n        cursor\n    }\n": types.LessonEdgeFlatFragFragmentDoc,
    "\n    fragment LessonInsertResponseFlatFrag on LessonInsertResponse {\n        affectedCount\n    }\n": types.LessonInsertResponseFlatFragFragmentDoc,
    "\n    fragment LessonSessionFlatFrag on LessonSession {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n        user\n    }\n": types.LessonSessionFlatFragFragmentDoc,
    "\n    fragment LessonSessionDeleteResponseFlatFrag on LessonSessionDeleteResponse {\n        affectedCount\n    }\n": types.LessonSessionDeleteResponseFlatFragFragmentDoc,
    "\n    fragment LessonSessionEdgeFlatFrag on LessonSessionEdge {\n        cursor\n    }\n": types.LessonSessionEdgeFlatFragFragmentDoc,
    "\n    fragment LessonSessionInsertResponseFlatFrag on LessonSessionInsertResponse {\n        affectedCount\n    }\n": types.LessonSessionInsertResponseFlatFragFragmentDoc,
    "\n    fragment LessonSessionUpdateResponseFlatFrag on LessonSessionUpdateResponse {\n        affectedCount\n    }\n": types.LessonSessionUpdateResponseFlatFragFragmentDoc,
    "\n    fragment LessonUpdateResponseFlatFrag on LessonUpdateResponse {\n        affectedCount\n    }\n": types.LessonUpdateResponseFlatFragFragmentDoc,
    "\n    fragment MemauthFlatFrag on Memauth {\n        accessLevel\n        createdBy\n        createdDate\n        id\n        isPublic\n        principalBotId\n        principalGroupId\n        principalId\n        principalType\n        principalUserId\n        resourceEntityId\n        resourceEntityType\n        updatedBy\n        updatedDate\n    }\n": types.MemauthFlatFragFragmentDoc,
    "\n    fragment MemauthDeleteResponseFlatFrag on MemauthDeleteResponse {\n        affectedCount\n    }\n": types.MemauthDeleteResponseFlatFragFragmentDoc,
    "\n    fragment MemauthEdgeFlatFrag on MemauthEdge {\n        cursor\n    }\n": types.MemauthEdgeFlatFragFragmentDoc,
    "\n    fragment MemauthInsertResponseFlatFrag on MemauthInsertResponse {\n        affectedCount\n    }\n": types.MemauthInsertResponseFlatFragFragmentDoc,
    "\n    fragment MemauthUpdateResponseFlatFrag on MemauthUpdateResponse {\n        affectedCount\n    }\n": types.MemauthUpdateResponseFlatFragFragmentDoc,
    "\n    fragment MemberAuthorizationFlatFrag on MemberAuthorization {\n        accessLevel\n        agentId\n        agentType\n        botId\n        createdBy\n        createdDate\n        grantedBotId\n        grantedChatId\n        grantedEntityId\n        grantedEntityType\n        grantedGroupId\n        groupId\n        id\n        isBaseAccessLevel\n        updatedBy\n        updatedDate\n        userId\n    }\n": types.MemberAuthorizationFlatFragFragmentDoc,
    "\n    fragment MemberAuthorizationConnectionFlatFrag on MemberAuthorizationConnection {\n        totalCount\n    }\n": types.MemberAuthorizationConnectionFlatFragFragmentDoc,
    "\n    fragment MemberAuthorizationDeleteResponseFlatFrag on MemberAuthorizationDeleteResponse {\n        affectedCount\n    }\n": types.MemberAuthorizationDeleteResponseFlatFragFragmentDoc,
    "\n    fragment MemberAuthorizationEdgeFlatFrag on MemberAuthorizationEdge {\n        cursor\n    }\n": types.MemberAuthorizationEdgeFlatFragFragmentDoc,
    "\n    fragment MemberAuthorizationInsertResponseFlatFrag on MemberAuthorizationInsertResponse {\n        affectedCount\n    }\n": types.MemberAuthorizationInsertResponseFlatFragFragmentDoc,
    "\n    fragment MemberAuthorizationUpdateResponseFlatFrag on MemberAuthorizationUpdateResponse {\n        affectedCount\n    }\n": types.MemberAuthorizationUpdateResponseFlatFragFragmentDoc,
    "\n    fragment MutationFlatFrag on Mutation {\n        anonKey\n        baseUrl\n        cleanup\n        createRsnUserFromToken\n        currentUserHasPassword\n        currtest\n        dbPrivs\n        envName\n        httpResetCurlopt\n        inTodo\n        isAdmin\n        numFailed\n        popFromPodcastQueue\n        reasonoteAppUrl\n        tablePrivs\n        throwIfNotLocal\n        todo\n    }\n": types.MutationFlatFragFragmentDoc,
    "\n    fragment NotificationSubscriptionFlatFrag on NotificationSubscription {\n        createdBy\n        createdDate\n        dailyStreak\n        id\n        rsnUserId\n        updatedBy\n        updatedDate\n    }\n": types.NotificationSubscriptionFlatFragFragmentDoc,
    "\n    fragment NotificationSubscriptionDeleteResponseFlatFrag on NotificationSubscriptionDeleteResponse {\n        affectedCount\n    }\n": types.NotificationSubscriptionDeleteResponseFlatFragFragmentDoc,
    "\n    fragment NotificationSubscriptionEdgeFlatFrag on NotificationSubscriptionEdge {\n        cursor\n    }\n": types.NotificationSubscriptionEdgeFlatFragFragmentDoc,
    "\n    fragment NotificationSubscriptionInsertResponseFlatFrag on NotificationSubscriptionInsertResponse {\n        affectedCount\n    }\n": types.NotificationSubscriptionInsertResponseFlatFragFragmentDoc,
    "\n    fragment NotificationSubscriptionUpdateResponseFlatFrag on NotificationSubscriptionUpdateResponse {\n        affectedCount\n    }\n": types.NotificationSubscriptionUpdateResponseFlatFragFragmentDoc,
    "\n    fragment OperationLogFlatFrag on OperationLog {\n        entityId\n        eventDate\n        id\n        jsonbDiff\n        operationLevel\n        operationType\n        operationWhen\n        processStatus\n        processedDate\n        rsnUserId\n        tableName\n        triggerName\n    }\n": types.OperationLogFlatFragFragmentDoc,
    "\n    fragment OperationLogConnectionFlatFrag on OperationLogConnection {\n        totalCount\n    }\n": types.OperationLogConnectionFlatFragFragmentDoc,
    "\n    fragment OperationLogDeleteResponseFlatFrag on OperationLogDeleteResponse {\n        affectedCount\n    }\n": types.OperationLogDeleteResponseFlatFragFragmentDoc,
    "\n    fragment OperationLogEdgeFlatFrag on OperationLogEdge {\n        cursor\n    }\n": types.OperationLogEdgeFlatFragFragmentDoc,
    "\n    fragment OperationLogInsertResponseFlatFrag on OperationLogInsertResponse {\n        affectedCount\n    }\n": types.OperationLogInsertResponseFlatFragFragmentDoc,
    "\n    fragment OperationLogUpdateResponseFlatFrag on OperationLogUpdateResponse {\n        affectedCount\n    }\n": types.OperationLogUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PageInfoFlatFrag on PageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n    }\n": types.PageInfoFlatFragFragmentDoc,
    "\n    fragment PartialSkillFlatFrag on PartialSkill {\n        createdBy\n        createdDate\n        emoji\n        goals\n        id\n        pages\n        skillDescription\n        skillId\n        skillName\n        updatedBy\n        updatedDate\n        userInput\n        userLevel\n    }\n": types.PartialSkillFlatFragFragmentDoc,
    "\n    fragment PartialSkillDeleteResponseFlatFrag on PartialSkillDeleteResponse {\n        affectedCount\n    }\n": types.PartialSkillDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PartialSkillEdgeFlatFrag on PartialSkillEdge {\n        cursor\n    }\n": types.PartialSkillEdgeFlatFragFragmentDoc,
    "\n    fragment PartialSkillInsertResponseFlatFrag on PartialSkillInsertResponse {\n        affectedCount\n    }\n": types.PartialSkillInsertResponseFlatFragFragmentDoc,
    "\n    fragment PartialSkillUpdateResponseFlatFrag on PartialSkillUpdateResponse {\n        affectedCount\n    }\n": types.PartialSkillUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PermissionFlatFrag on Permission {\n        createdBy\n        createdDate\n        description\n        permissionCode\n        updatedBy\n        updatedDate\n    }\n": types.PermissionFlatFragFragmentDoc,
    "\n    fragment PermissionDeleteResponseFlatFrag on PermissionDeleteResponse {\n        affectedCount\n    }\n": types.PermissionDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PermissionEdgeFlatFrag on PermissionEdge {\n        cursor\n    }\n": types.PermissionEdgeFlatFragFragmentDoc,
    "\n    fragment PermissionInsertResponseFlatFrag on PermissionInsertResponse {\n        affectedCount\n    }\n": types.PermissionInsertResponseFlatFragFragmentDoc,
    "\n    fragment PermissionUpdateResponseFlatFrag on PermissionUpdateResponse {\n        affectedCount\n    }\n": types.PermissionUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PodcastFlatFrag on Podcast {\n        createdBy\n        createdDate\n        forSkillPath\n        forUser\n        id\n        isSharedVersion\n        metadata\n        originalPodcastId\n        outline\n        podcastType\n        specialInstructions\n        title\n        topic\n        transcript\n        updatedBy\n        updatedDate\n    }\n": types.PodcastFlatFragFragmentDoc,
    "\n    fragment PodcastAudioFlatFrag on PodcastAudio {\n        audioFile\n        createdBy\n        createdDate\n        id\n        podcastLineId\n        speed\n        updatedBy\n        updatedDate\n    }\n": types.PodcastAudioFlatFragFragmentDoc,
    "\n    fragment PodcastAudioDeleteResponseFlatFrag on PodcastAudioDeleteResponse {\n        affectedCount\n    }\n": types.PodcastAudioDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PodcastAudioEdgeFlatFrag on PodcastAudioEdge {\n        cursor\n    }\n": types.PodcastAudioEdgeFlatFragFragmentDoc,
    "\n    fragment PodcastAudioInsertResponseFlatFrag on PodcastAudioInsertResponse {\n        affectedCount\n    }\n": types.PodcastAudioInsertResponseFlatFragFragmentDoc,
    "\n    fragment PodcastAudioUpdateResponseFlatFrag on PodcastAudioUpdateResponse {\n        affectedCount\n    }\n": types.PodcastAudioUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PodcastDeleteResponseFlatFrag on PodcastDeleteResponse {\n        affectedCount\n    }\n": types.PodcastDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PodcastEdgeFlatFrag on PodcastEdge {\n        cursor\n    }\n": types.PodcastEdgeFlatFragFragmentDoc,
    "\n    fragment PodcastInsertResponseFlatFrag on PodcastInsertResponse {\n        affectedCount\n    }\n": types.PodcastInsertResponseFlatFragFragmentDoc,
    "\n    fragment PodcastLineFlatFrag on PodcastLine {\n        createdBy\n        createdDate\n        dialogue\n        digDeeperTopics\n        id\n        lineNumber\n        podcastId\n        speaker\n        updatedBy\n        updatedDate\n    }\n": types.PodcastLineFlatFragFragmentDoc,
    "\n    fragment PodcastLineDeleteResponseFlatFrag on PodcastLineDeleteResponse {\n        affectedCount\n    }\n": types.PodcastLineDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PodcastLineEdgeFlatFrag on PodcastLineEdge {\n        cursor\n    }\n": types.PodcastLineEdgeFlatFragFragmentDoc,
    "\n    fragment PodcastLineInsertResponseFlatFrag on PodcastLineInsertResponse {\n        affectedCount\n    }\n": types.PodcastLineInsertResponseFlatFragFragmentDoc,
    "\n    fragment PodcastLineUpdateResponseFlatFrag on PodcastLineUpdateResponse {\n        affectedCount\n    }\n": types.PodcastLineUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PodcastQueueItemFlatFrag on PodcastQueueItem {\n        createdAt\n        forUser\n        id\n        podcastId\n        position\n    }\n": types.PodcastQueueItemFlatFragFragmentDoc,
    "\n    fragment PodcastQueueItemDeleteResponseFlatFrag on PodcastQueueItemDeleteResponse {\n        affectedCount\n    }\n": types.PodcastQueueItemDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PodcastQueueItemEdgeFlatFrag on PodcastQueueItemEdge {\n        cursor\n    }\n": types.PodcastQueueItemEdgeFlatFragFragmentDoc,
    "\n    fragment PodcastQueueItemInsertResponseFlatFrag on PodcastQueueItemInsertResponse {\n        affectedCount\n    }\n": types.PodcastQueueItemInsertResponseFlatFragFragmentDoc,
    "\n    fragment PodcastQueueItemUpdateResponseFlatFrag on PodcastQueueItemUpdateResponse {\n        affectedCount\n    }\n": types.PodcastQueueItemUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PodcastUpdateResponseFlatFrag on PodcastUpdateResponse {\n        affectedCount\n    }\n": types.PodcastUpdateResponseFlatFragFragmentDoc,
    "\n    fragment PushNotificationSubscriptionFlatFrag on PushNotificationSubscription {\n        auth\n        createdBy\n        createdDate\n        endpoint\n        id\n        lastUsedDate\n        p256dh\n        rsnUserId\n        updatedBy\n        updatedDate\n        userAgent\n    }\n": types.PushNotificationSubscriptionFlatFragFragmentDoc,
    "\n    fragment PushNotificationSubscriptionDeleteResponseFlatFrag on PushNotificationSubscriptionDeleteResponse {\n        affectedCount\n    }\n": types.PushNotificationSubscriptionDeleteResponseFlatFragFragmentDoc,
    "\n    fragment PushNotificationSubscriptionEdgeFlatFrag on PushNotificationSubscriptionEdge {\n        cursor\n    }\n": types.PushNotificationSubscriptionEdgeFlatFragFragmentDoc,
    "\n    fragment PushNotificationSubscriptionInsertResponseFlatFrag on PushNotificationSubscriptionInsertResponse {\n        affectedCount\n    }\n": types.PushNotificationSubscriptionInsertResponseFlatFragFragmentDoc,
    "\n    fragment PushNotificationSubscriptionUpdateResponseFlatFrag on PushNotificationSubscriptionUpdateResponse {\n        affectedCount\n    }\n": types.PushNotificationSubscriptionUpdateResponseFlatFragFragmentDoc,
    "\n    fragment QueryFlatFrag on Query {\n        currentRsnUserId\n        isVerbose\n        osName\n        pgVersion\n        pgVersionNum\n        pgtapVersion\n        rsnSystemUserAuthId\n        rsnSystemUserId\n    }\n": types.QueryFlatFragFragmentDoc,
    "\n    fragment ReferenceFlatFrag on Reference {\n        createdBy\n        createdDate\n        id\n        isExact\n        rawContent\n        refId\n        rsnVecId\n        updatedBy\n        updatedDate\n    }\n": types.ReferenceFlatFragFragmentDoc,
    "\n    fragment ReferenceDeleteResponseFlatFrag on ReferenceDeleteResponse {\n        affectedCount\n    }\n": types.ReferenceDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ReferenceEdgeFlatFrag on ReferenceEdge {\n        cursor\n    }\n": types.ReferenceEdgeFlatFragFragmentDoc,
    "\n    fragment ReferenceInsertResponseFlatFrag on ReferenceInsertResponse {\n        affectedCount\n    }\n": types.ReferenceInsertResponseFlatFragFragmentDoc,
    "\n    fragment ReferenceUpdateResponseFlatFrag on ReferenceUpdateResponse {\n        affectedCount\n    }\n": types.ReferenceUpdateResponseFlatFragFragmentDoc,
    "\n    fragment ResourceFlatFrag on Resource {\n        childPageId\n        childSnipId\n        createdBy\n        createdDate\n        id\n        metadata\n        parentCourseId\n        parentPodcastId\n        parentSkillId\n        updatedBy\n        updatedDate\n    }\n": types.ResourceFlatFragFragmentDoc,
    "\n    fragment ResourceDeleteResponseFlatFrag on ResourceDeleteResponse {\n        affectedCount\n    }\n": types.ResourceDeleteResponseFlatFragFragmentDoc,
    "\n    fragment ResourceEdgeFlatFrag on ResourceEdge {\n        cursor\n    }\n": types.ResourceEdgeFlatFragFragmentDoc,
    "\n    fragment ResourceInsertResponseFlatFrag on ResourceInsertResponse {\n        affectedCount\n    }\n": types.ResourceInsertResponseFlatFragFragmentDoc,
    "\n    fragment ResourceUpdateResponseFlatFrag on ResourceUpdateResponse {\n        affectedCount\n    }\n": types.ResourceUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnPageFlatFrag on RsnPage {\n        body\n        bodyLength\n        bodySha256\n        createdBy\n        createdDate\n        description\n        fileType\n        id\n        metadata\n        name\n        originalFilename\n        parent\n        storagePath\n        updatedBy\n        updatedDate\n    }\n": types.RsnPageFlatFragFragmentDoc,
    "\n    fragment RsnPageDeleteResponseFlatFrag on RsnPageDeleteResponse {\n        affectedCount\n    }\n": types.RsnPageDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnPageEdgeFlatFrag on RsnPageEdge {\n        cursor\n    }\n": types.RsnPageEdgeFlatFragFragmentDoc,
    "\n    fragment RsnPageInsertResponseFlatFrag on RsnPageInsertResponse {\n        affectedCount\n    }\n": types.RsnPageInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnPageUpdateResponseFlatFrag on RsnPageUpdateResponse {\n        affectedCount\n    }\n": types.RsnPageUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnPageVectorFlatFrag on RsnPageVector {\n        createdBy\n        createdDate\n        embedding\n        id\n        rawContent\n        rsnPageId\n        rsnPageOffset\n        updatedBy\n        updatedDate\n    }\n": types.RsnPageVectorFlatFragFragmentDoc,
    "\n    fragment RsnPageVectorDeleteResponseFlatFrag on RsnPageVectorDeleteResponse {\n        affectedCount\n    }\n": types.RsnPageVectorDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnPageVectorEdgeFlatFrag on RsnPageVectorEdge {\n        cursor\n    }\n": types.RsnPageVectorEdgeFlatFragFragmentDoc,
    "\n    fragment RsnPageVectorInsertResponseFlatFrag on RsnPageVectorInsertResponse {\n        affectedCount\n    }\n": types.RsnPageVectorInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnPageVectorUpdateResponseFlatFrag on RsnPageVectorUpdateResponse {\n        affectedCount\n    }\n": types.RsnPageVectorUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnUserFlatFrag on RsnUser {\n        authEmail\n        authId\n        familyName\n        firstLoginDate\n        givenName\n        id\n        lastLoginDate\n        role\n        timezone\n        username\n    }\n": types.RsnUserFlatFragFragmentDoc,
    "\n    fragment RsnUserDeleteResponseFlatFrag on RsnUserDeleteResponse {\n        affectedCount\n    }\n": types.RsnUserDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnUserEdgeFlatFrag on RsnUserEdge {\n        cursor\n    }\n": types.RsnUserEdgeFlatFragFragmentDoc,
    "\n    fragment RsnUserInsertResponseFlatFrag on RsnUserInsertResponse {\n        affectedCount\n    }\n": types.RsnUserInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnUserSysdataFlatFrag on RsnUserSysdata {\n        authEmail\n        authId\n        dailyXpGoalCelebrationTime\n        extraLicenseInfo\n        hasOnboarded\n        id\n        rsnUserId\n    }\n": types.RsnUserSysdataFlatFragFragmentDoc,
    "\n    fragment RsnUserSysdataDeleteResponseFlatFrag on RsnUserSysdataDeleteResponse {\n        affectedCount\n    }\n": types.RsnUserSysdataDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnUserSysdataEdgeFlatFrag on RsnUserSysdataEdge {\n        cursor\n    }\n": types.RsnUserSysdataEdgeFlatFragFragmentDoc,
    "\n    fragment RsnUserSysdataInsertResponseFlatFrag on RsnUserSysdataInsertResponse {\n        affectedCount\n    }\n": types.RsnUserSysdataInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnUserSysdataUpdateResponseFlatFrag on RsnUserSysdataUpdateResponse {\n        affectedCount\n    }\n": types.RsnUserSysdataUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnUserUpdateResponseFlatFrag on RsnUserUpdateResponse {\n        affectedCount\n    }\n": types.RsnUserUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecFlatFrag on RsnVec {\n        colname\n        colpath\n        colpathStr\n        contentOffset\n        createdBy\n        createdDate\n        embedding\n        embeddingOpenaiTextEmbedding3Small\n        id\n        rawContent\n        refId\n        tablename\n        updatedBy\n        updatedDate\n    }\n": types.RsnVecFlatFragFragmentDoc,
    "\n    fragment RsnVecConfigFlatFrag on RsnVecConfig {\n        colname\n        colpath\n        id\n        tablename\n    }\n": types.RsnVecConfigFlatFragFragmentDoc,
    "\n    fragment RsnVecConfigDeleteResponseFlatFrag on RsnVecConfigDeleteResponse {\n        affectedCount\n    }\n": types.RsnVecConfigDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecConfigEdgeFlatFrag on RsnVecConfigEdge {\n        cursor\n    }\n": types.RsnVecConfigEdgeFlatFragFragmentDoc,
    "\n    fragment RsnVecConfigInsertResponseFlatFrag on RsnVecConfigInsertResponse {\n        affectedCount\n    }\n": types.RsnVecConfigInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecConfigUpdateResponseFlatFrag on RsnVecConfigUpdateResponse {\n        affectedCount\n    }\n": types.RsnVecConfigUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecDeleteResponseFlatFrag on RsnVecDeleteResponse {\n        affectedCount\n    }\n": types.RsnVecDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecEdgeFlatFrag on RsnVecEdge {\n        cursor\n    }\n": types.RsnVecEdgeFlatFragFragmentDoc,
    "\n    fragment RsnVecInsertResponseFlatFrag on RsnVecInsertResponse {\n        affectedCount\n    }\n": types.RsnVecInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecQueueFlatFrag on RsnVecQueue {\n        colname\n        colpath\n        colpathStr\n        createdBy\n        createdDate\n        id\n        refId\n        tablename\n        updatedBy\n        updatedDate\n    }\n": types.RsnVecQueueFlatFragFragmentDoc,
    "\n    fragment RsnVecQueueDeleteResponseFlatFrag on RsnVecQueueDeleteResponse {\n        affectedCount\n    }\n": types.RsnVecQueueDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecQueueEdgeFlatFrag on RsnVecQueueEdge {\n        cursor\n    }\n": types.RsnVecQueueEdgeFlatFragFragmentDoc,
    "\n    fragment RsnVecQueueInsertResponseFlatFrag on RsnVecQueueInsertResponse {\n        affectedCount\n    }\n": types.RsnVecQueueInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecQueueUpdateResponseFlatFrag on RsnVecQueueUpdateResponse {\n        affectedCount\n    }\n": types.RsnVecQueueUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsnVecUpdateResponseFlatFrag on RsnVecUpdateResponse {\n        affectedCount\n    }\n": types.RsnVecUpdateResponseFlatFragFragmentDoc,
    "\n    fragment RsncoreTableAbbreviationsFlatFrag on RsncoreTableAbbreviations {\n        abbreviation\n        id\n        tablename\n    }\n": types.RsncoreTableAbbreviationsFlatFragFragmentDoc,
    "\n    fragment RsncoreTableAbbreviationsDeleteResponseFlatFrag on RsncoreTableAbbreviationsDeleteResponse {\n        affectedCount\n    }\n": types.RsncoreTableAbbreviationsDeleteResponseFlatFragFragmentDoc,
    "\n    fragment RsncoreTableAbbreviationsEdgeFlatFrag on RsncoreTableAbbreviationsEdge {\n        cursor\n    }\n": types.RsncoreTableAbbreviationsEdgeFlatFragFragmentDoc,
    "\n    fragment RsncoreTableAbbreviationsInsertResponseFlatFrag on RsncoreTableAbbreviationsInsertResponse {\n        affectedCount\n    }\n": types.RsncoreTableAbbreviationsInsertResponseFlatFragFragmentDoc,
    "\n    fragment RsncoreTableAbbreviationsUpdateResponseFlatFrag on RsncoreTableAbbreviationsUpdateResponse {\n        affectedCount\n    }\n": types.RsncoreTableAbbreviationsUpdateResponseFlatFragFragmentDoc,
    "\n    fragment SkillFlatFrag on Skill {\n        colorinfo\n        contextPage\n        createdBy\n        createdDate\n        description\n        domain\n        emoji\n        forUser\n        generatedFromSkillPath\n        id\n        metadata\n        name\n        nameAndDescription\n        processingState\n        referenceIds\n        rootSkillId\n        rsnVecIds\n        type\n        updatedBy\n        updatedDate\n    }\n": types.SkillFlatFragFragmentDoc,
    "\n    fragment SkillDeleteResponseFlatFrag on SkillDeleteResponse {\n        affectedCount\n    }\n": types.SkillDeleteResponseFlatFragFragmentDoc,
    "\n    fragment SkillEdgeFlatFrag on SkillEdge {\n        cursor\n    }\n": types.SkillEdgeFlatFragFragmentDoc,
    "\n    fragment SkillInsertResponseFlatFrag on SkillInsertResponse {\n        affectedCount\n    }\n": types.SkillInsertResponseFlatFragFragmentDoc,
    "\n    fragment SkillLinkFlatFrag on SkillLink {\n        createdBy\n        createdDate\n        downstreamSkill\n        id\n        metadata\n        type\n        updatedBy\n        updatedDate\n        upstreamSkill\n        weight\n    }\n": types.SkillLinkFlatFragFragmentDoc,
    "\n    fragment SkillLinkDeleteResponseFlatFrag on SkillLinkDeleteResponse {\n        affectedCount\n    }\n": types.SkillLinkDeleteResponseFlatFragFragmentDoc,
    "\n    fragment SkillLinkEdgeFlatFrag on SkillLinkEdge {\n        cursor\n    }\n": types.SkillLinkEdgeFlatFragFragmentDoc,
    "\n    fragment SkillLinkInsertResponseFlatFrag on SkillLinkInsertResponse {\n        affectedCount\n    }\n": types.SkillLinkInsertResponseFlatFragFragmentDoc,
    "\n    fragment SkillLinkUpdateResponseFlatFrag on SkillLinkUpdateResponse {\n        affectedCount\n    }\n": types.SkillLinkUpdateResponseFlatFragFragmentDoc,
    "\n    fragment SkillModuleFlatFrag on SkillModule {\n        childrenIds\n        createdBy\n        createdDate\n        id\n        name\n        position\n        rootSkillId\n        updatedBy\n        updatedDate\n    }\n": types.SkillModuleFlatFragFragmentDoc,
    "\n    fragment SkillModuleDeleteResponseFlatFrag on SkillModuleDeleteResponse {\n        affectedCount\n    }\n": types.SkillModuleDeleteResponseFlatFragFragmentDoc,
    "\n    fragment SkillModuleEdgeFlatFrag on SkillModuleEdge {\n        cursor\n    }\n": types.SkillModuleEdgeFlatFragFragmentDoc,
    "\n    fragment SkillModuleInsertResponseFlatFrag on SkillModuleInsertResponse {\n        affectedCount\n    }\n": types.SkillModuleInsertResponseFlatFragFragmentDoc,
    "\n    fragment SkillModuleUpdateResponseFlatFrag on SkillModuleUpdateResponse {\n        affectedCount\n    }\n": types.SkillModuleUpdateResponseFlatFragFragmentDoc,
    "\n    fragment SkillSetFlatFrag on SkillSet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n": types.SkillSetFlatFragFragmentDoc,
    "\n    fragment SkillSetDeleteResponseFlatFrag on SkillSetDeleteResponse {\n        affectedCount\n    }\n": types.SkillSetDeleteResponseFlatFragFragmentDoc,
    "\n    fragment SkillSetEdgeFlatFrag on SkillSetEdge {\n        cursor\n    }\n": types.SkillSetEdgeFlatFragFragmentDoc,
    "\n    fragment SkillSetInsertResponseFlatFrag on SkillSetInsertResponse {\n        affectedCount\n    }\n": types.SkillSetInsertResponseFlatFragFragmentDoc,
    "\n    fragment SkillSetSkillFlatFrag on SkillSetSkill {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n": types.SkillSetSkillFlatFragFragmentDoc,
    "\n    fragment SkillSetSkillDeleteResponseFlatFrag on SkillSetSkillDeleteResponse {\n        affectedCount\n    }\n": types.SkillSetSkillDeleteResponseFlatFragFragmentDoc,
    "\n    fragment SkillSetSkillEdgeFlatFrag on SkillSetSkillEdge {\n        cursor\n    }\n": types.SkillSetSkillEdgeFlatFragFragmentDoc,
    "\n    fragment SkillSetSkillInsertResponseFlatFrag on SkillSetSkillInsertResponse {\n        affectedCount\n    }\n": types.SkillSetSkillInsertResponseFlatFragFragmentDoc,
    "\n    fragment SkillSetSkillUpdateResponseFlatFrag on SkillSetSkillUpdateResponse {\n        affectedCount\n    }\n": types.SkillSetSkillUpdateResponseFlatFragFragmentDoc,
    "\n    fragment SkillSetUpdateResponseFlatFrag on SkillSetUpdateResponse {\n        affectedCount\n    }\n": types.SkillSetUpdateResponseFlatFragFragmentDoc,
    "\n    fragment SkillUpdateResponseFlatFrag on SkillUpdateResponse {\n        affectedCount\n    }\n": types.SkillUpdateResponseFlatFragFragmentDoc,
    "\n    fragment SnipFlatFrag on Snip {\n        autoLastUpdatedDate\n        autoParamUpdateAttempts\n        autoParamUpdateState\n        autoSummary\n        autoTags\n        autoTitle\n        createdBy\n        createdDate\n        extractionError\n        extractionInfo\n        extractionState\n        id\n        metadata\n        name\n        owner\n        pageId\n        rootSkill\n        sourceIntegration\n        sourceUniqId\n        sourceUrl\n        textContent\n        type\n        updatedBy\n        updatedDate\n    }\n": types.SnipFlatFragFragmentDoc,
    "\n    fragment SnipDeleteResponseFlatFrag on SnipDeleteResponse {\n        affectedCount\n    }\n": types.SnipDeleteResponseFlatFragFragmentDoc,
    "\n    fragment SnipEdgeFlatFrag on SnipEdge {\n        cursor\n    }\n": types.SnipEdgeFlatFragFragmentDoc,
    "\n    fragment SnipInsertResponseFlatFrag on SnipInsertResponse {\n        affectedCount\n    }\n": types.SnipInsertResponseFlatFragFragmentDoc,
    "\n    fragment SnipUpdateResponseFlatFrag on SnipUpdateResponse {\n        affectedCount\n    }\n": types.SnipUpdateResponseFlatFragFragmentDoc,
    "\n    fragment StripeCustomersFlatFrag on StripeCustomers {\n        attrs\n        created\n        description\n        email\n        id\n        name\n    }\n": types.StripeCustomersFlatFragFragmentDoc,
    "\n    fragment StripeCustomersDeleteResponseFlatFrag on StripeCustomersDeleteResponse {\n        affectedCount\n    }\n": types.StripeCustomersDeleteResponseFlatFragFragmentDoc,
    "\n    fragment StripeCustomersEdgeFlatFrag on StripeCustomersEdge {\n        cursor\n    }\n": types.StripeCustomersEdgeFlatFragFragmentDoc,
    "\n    fragment StripeCustomersInsertResponseFlatFrag on StripeCustomersInsertResponse {\n        affectedCount\n    }\n": types.StripeCustomersInsertResponseFlatFragFragmentDoc,
    "\n    fragment StripeCustomersUpdateResponseFlatFrag on StripeCustomersUpdateResponse {\n        affectedCount\n    }\n": types.StripeCustomersUpdateResponseFlatFragFragmentDoc,
    "\n    fragment StripeProductsFlatFrag on StripeProducts {\n        active\n        attrs\n        created\n        defaultPrice\n        description\n        id\n        name\n        updated\n    }\n": types.StripeProductsFlatFragFragmentDoc,
    "\n    fragment StripeProductsDeleteResponseFlatFrag on StripeProductsDeleteResponse {\n        affectedCount\n    }\n": types.StripeProductsDeleteResponseFlatFragFragmentDoc,
    "\n    fragment StripeProductsEdgeFlatFrag on StripeProductsEdge {\n        cursor\n    }\n": types.StripeProductsEdgeFlatFragFragmentDoc,
    "\n    fragment StripeProductsInsertResponseFlatFrag on StripeProductsInsertResponse {\n        affectedCount\n    }\n": types.StripeProductsInsertResponseFlatFragFragmentDoc,
    "\n    fragment StripeProductsUpdateResponseFlatFrag on StripeProductsUpdateResponse {\n        affectedCount\n    }\n": types.StripeProductsUpdateResponseFlatFragFragmentDoc,
    "\n    fragment StripeSubscriptionsFlatFrag on StripeSubscriptions {\n        attrs\n        canceledAt\n        cancellationReason\n        currency\n        currentPeriodEnd\n        currentPeriodStart\n        customer\n        id\n        items\n        status\n        stripeProductId\n    }\n": types.StripeSubscriptionsFlatFragFragmentDoc,
    "\n    fragment StripeSubscriptionsDeleteResponseFlatFrag on StripeSubscriptionsDeleteResponse {\n        affectedCount\n    }\n": types.StripeSubscriptionsDeleteResponseFlatFragFragmentDoc,
    "\n    fragment StripeSubscriptionsEdgeFlatFrag on StripeSubscriptionsEdge {\n        cursor\n    }\n": types.StripeSubscriptionsEdgeFlatFragFragmentDoc,
    "\n    fragment StripeSubscriptionsInsertResponseFlatFrag on StripeSubscriptionsInsertResponse {\n        affectedCount\n    }\n": types.StripeSubscriptionsInsertResponseFlatFragFragmentDoc,
    "\n    fragment StripeSubscriptionsUpdateResponseFlatFrag on StripeSubscriptionsUpdateResponse {\n        affectedCount\n    }\n": types.StripeSubscriptionsUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserActivityFeedbackFlatFrag on UserActivityFeedback {\n        createdBy\n        createdDate\n        description\n        id\n        metadata\n        tags\n        updatedBy\n        updatedDate\n        value\n    }\n": types.UserActivityFeedbackFlatFragFragmentDoc,
    "\n    fragment UserActivityFeedbackDeleteResponseFlatFrag on UserActivityFeedbackDeleteResponse {\n        affectedCount\n    }\n": types.UserActivityFeedbackDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserActivityFeedbackEdgeFlatFrag on UserActivityFeedbackEdge {\n        cursor\n    }\n": types.UserActivityFeedbackEdgeFlatFragFragmentDoc,
    "\n    fragment UserActivityFeedbackInsertResponseFlatFrag on UserActivityFeedbackInsertResponse {\n        affectedCount\n    }\n": types.UserActivityFeedbackInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserActivityFeedbackUpdateResponseFlatFrag on UserActivityFeedbackUpdateResponse {\n        affectedCount\n    }\n": types.UserActivityFeedbackUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserActivityResultFlatFrag on UserActivityResult {\n        createdBy\n        createdDate\n        id\n        lessonSessionId\n        metadata\n        resultData\n        score\n        scoreNormalized\n        skipReason\n        skipped\n        submitResult\n        updatedBy\n        updatedDate\n        user\n    }\n": types.UserActivityResultFlatFragFragmentDoc,
    "\n    fragment UserActivityResultDeleteResponseFlatFrag on UserActivityResultDeleteResponse {\n        affectedCount\n    }\n": types.UserActivityResultDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserActivityResultEdgeFlatFrag on UserActivityResultEdge {\n        cursor\n    }\n": types.UserActivityResultEdgeFlatFragFragmentDoc,
    "\n    fragment UserActivityResultInsertResponseFlatFrag on UserActivityResultInsertResponse {\n        affectedCount\n    }\n": types.UserActivityResultInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserActivityResultUpdateResponseFlatFrag on UserActivityResultUpdateResponse {\n        affectedCount\n    }\n": types.UserActivityResultUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserHistoryFlatFrag on UserHistory {\n        courseId\n        createdBy\n        createdDate\n        id\n        podcastId\n        rsnUserId\n        skillIdVisited\n        updatedBy\n        updatedDate\n    }\n": types.UserHistoryFlatFragFragmentDoc,
    "\n    fragment UserHistoryDeleteResponseFlatFrag on UserHistoryDeleteResponse {\n        affectedCount\n    }\n": types.UserHistoryDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserHistoryEdgeFlatFrag on UserHistoryEdge {\n        cursor\n    }\n": types.UserHistoryEdgeFlatFragFragmentDoc,
    "\n    fragment UserHistoryInsertResponseFlatFrag on UserHistoryInsertResponse {\n        affectedCount\n    }\n": types.UserHistoryInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserHistoryUpdateResponseFlatFrag on UserHistoryUpdateResponse {\n        affectedCount\n    }\n": types.UserHistoryUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserLessonResultFlatFrag on UserLessonResult {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n        user\n    }\n": types.UserLessonResultFlatFragFragmentDoc,
    "\n    fragment UserLessonResultDeleteResponseFlatFrag on UserLessonResultDeleteResponse {\n        affectedCount\n    }\n": types.UserLessonResultDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserLessonResultEdgeFlatFrag on UserLessonResultEdge {\n        cursor\n    }\n": types.UserLessonResultEdgeFlatFragFragmentDoc,
    "\n    fragment UserLessonResultInsertResponseFlatFrag on UserLessonResultInsertResponse {\n        affectedCount\n    }\n": types.UserLessonResultInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserLessonResultUpdateResponseFlatFrag on UserLessonResultUpdateResponse {\n        affectedCount\n    }\n": types.UserLessonResultUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserProfileFlatFrag on UserProfile {\n        badges\n        bio\n        createdBy\n        createdDate\n        displayName\n        id\n        pinnedItems\n        profileImageUrl\n        rsnUserId\n        showActivityGraph\n        updatedBy\n        updatedDate\n        username\n    }\n": types.UserProfileFlatFragFragmentDoc,
    "\n    fragment UserProfileDeleteResponseFlatFrag on UserProfileDeleteResponse {\n        affectedCount\n    }\n": types.UserProfileDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserProfileEdgeFlatFrag on UserProfileEdge {\n        cursor\n    }\n": types.UserProfileEdgeFlatFragFragmentDoc,
    "\n    fragment UserProfileInsertResponseFlatFrag on UserProfileInsertResponse {\n        affectedCount\n    }\n": types.UserProfileInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserProfileUpdateResponseFlatFrag on UserProfileUpdateResponse {\n        affectedCount\n    }\n": types.UserProfileUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserSettingFlatFrag on UserSetting {\n        aiAboutMe\n        aiInstructions\n        createdBy\n        createdDate\n        dailyXpGoal\n        feelings\n        id\n        metadata\n        podcastPlaybackSpeed\n        temporaryDailyXpGoal\n        temporaryDailyXpGoalSetDatetime\n        uiTheme\n        updatedBy\n        updatedDate\n    }\n": types.UserSettingFlatFragFragmentDoc,
    "\n    fragment UserSettingDeleteResponseFlatFrag on UserSettingDeleteResponse {\n        affectedCount\n    }\n": types.UserSettingDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserSettingEdgeFlatFrag on UserSettingEdge {\n        cursor\n    }\n": types.UserSettingEdgeFlatFragFragmentDoc,
    "\n    fragment UserSettingInsertResponseFlatFrag on UserSettingInsertResponse {\n        affectedCount\n    }\n": types.UserSettingInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserSettingUpdateResponseFlatFrag on UserSettingUpdateResponse {\n        affectedCount\n    }\n": types.UserSettingUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserSkillFlatFrag on UserSkill {\n        createdBy\n        createdDate\n        currentChapter\n        id\n        interestReasons\n        metadata\n        selfAssignedLevel\n        specifics\n        updatedBy\n        updatedDate\n    }\n": types.UserSkillFlatFragFragmentDoc,
    "\n    fragment UserSkillDeleteResponseFlatFrag on UserSkillDeleteResponse {\n        affectedCount\n    }\n": types.UserSkillDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserSkillEdgeFlatFrag on UserSkillEdge {\n        cursor\n    }\n": types.UserSkillEdgeFlatFragFragmentDoc,
    "\n    fragment UserSkillInsertResponseFlatFrag on UserSkillInsertResponse {\n        affectedCount\n    }\n": types.UserSkillInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserSkillSysdataFlatFrag on UserSkillSysdata {\n        dailyXp\n        highestLevelShown\n        id\n        lastDailyReset\n        practiceScore\n        totalXp\n    }\n": types.UserSkillSysdataFlatFragFragmentDoc,
    "\n    fragment UserSkillSysdataDeleteResponseFlatFrag on UserSkillSysdataDeleteResponse {\n        affectedCount\n    }\n": types.UserSkillSysdataDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserSkillSysdataEdgeFlatFrag on UserSkillSysdataEdge {\n        cursor\n    }\n": types.UserSkillSysdataEdgeFlatFragFragmentDoc,
    "\n    fragment UserSkillSysdataInsertResponseFlatFrag on UserSkillSysdataInsertResponse {\n        affectedCount\n    }\n": types.UserSkillSysdataInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserSkillSysdataUpdateResponseFlatFrag on UserSkillSysdataUpdateResponse {\n        affectedCount\n    }\n": types.UserSkillSysdataUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserSkillUpdateResponseFlatFrag on UserSkillUpdateResponse {\n        affectedCount\n    }\n": types.UserSkillUpdateResponseFlatFragFragmentDoc,
    "\n    fragment UserTourFlatFrag on UserTour {\n        createdBy\n        createdDate\n        id\n        metadata\n        tourName\n        tourState\n        tourStatus\n        updatedBy\n        updatedDate\n        user\n    }\n": types.UserTourFlatFragFragmentDoc,
    "\n    fragment UserTourDeleteResponseFlatFrag on UserTourDeleteResponse {\n        affectedCount\n    }\n": types.UserTourDeleteResponseFlatFragFragmentDoc,
    "\n    fragment UserTourEdgeFlatFrag on UserTourEdge {\n        cursor\n    }\n": types.UserTourEdgeFlatFragFragmentDoc,
    "\n    fragment UserTourInsertResponseFlatFrag on UserTourInsertResponse {\n        affectedCount\n    }\n": types.UserTourInsertResponseFlatFragFragmentDoc,
    "\n    fragment UserTourUpdateResponseFlatFrag on UserTourUpdateResponse {\n        affectedCount\n    }\n": types.UserTourUpdateResponseFlatFragFragmentDoc,
    "\n    mutation createAccessLevelPermissionFlat($objects: [AccessLevelPermissionInsertInput!]!) {\n        insertIntoAccessLevelPermissionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...AccessLevelPermissionFlatFrag\n            }\n        }\n    }\n": types.CreateAccessLevelPermissionFlatDocument,
    "\n    mutation createActivityFlat($objects: [ActivityInsertInput!]!) {\n        insertIntoActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivityFlatFrag\n            }\n        }\n    }\n": types.CreateActivityFlatDocument,
    "\n    mutation createActivitySetFlat($objects: [ActivitySetInsertInput!]!) {\n        insertIntoActivitySetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySetFlatFrag\n            }\n        }\n    }\n": types.CreateActivitySetFlatDocument,
    "\n    mutation createActivitySetActivityFlat($objects: [ActivitySetActivityInsertInput!]!) {\n        insertIntoActivitySetActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySetActivityFlatFrag\n            }\n        }\n    }\n": types.CreateActivitySetActivityFlatDocument,
    "\n    mutation createActivitySkillFlat($objects: [ActivitySkillInsertInput!]!) {\n        insertIntoActivitySkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySkillFlatFrag\n            }\n        }\n    }\n": types.CreateActivitySkillFlatDocument,
    "\n    mutation createAnalyzerFlat($objects: [AnalyzerInsertInput!]!) {\n        insertIntoAnalyzerCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...AnalyzerFlatFrag\n            }\n        }\n    }\n": types.CreateAnalyzerFlatDocument,
    "\n    mutation createBlogPostFlat($objects: [BlogPostInsertInput!]!) {\n        insertIntoBlogPostCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BlogPostFlatFrag\n            }\n        }\n    }\n": types.CreateBlogPostFlatDocument,
    "\n    mutation createBotFlat($objects: [BotInsertInput!]!) {\n        insertIntoBotCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotFlatFrag\n            }\n        }\n    }\n": types.CreateBotFlatDocument,
    "\n    mutation createBotSetFlat($objects: [BotSetInsertInput!]!) {\n        insertIntoBotSetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotSetFlatFrag\n            }\n        }\n    }\n": types.CreateBotSetFlatDocument,
    "\n    mutation createBotSetBotFlat($objects: [BotSetBotInsertInput!]!) {\n        insertIntoBotSetBotCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotSetBotFlatFrag\n            }\n        }\n    }\n": types.CreateBotSetBotFlatDocument,
    "\n    mutation createChapterFlat($objects: [ChapterInsertInput!]!) {\n        insertIntoChapterCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChapterFlatFrag\n            }\n        }\n    }\n": types.CreateChapterFlatDocument,
    "\n    mutation createChatFlat($objects: [ChatInsertInput!]!) {\n        insertIntoChatCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChatFlatFrag\n            }\n        }\n    }\n": types.CreateChatFlatDocument,
    "\n    mutation createChatMessageFlat($objects: [ChatMessageInsertInput!]!) {\n        insertIntoChatMessageCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChatMessageFlatFrag\n            }\n        }\n    }\n": types.CreateChatMessageFlatDocument,
    "\n    mutation createChromeExtensionEventFlat($objects: [ChromeExtensionEventInsertInput!]!) {\n        insertIntoChromeExtensionEventCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChromeExtensionEventFlatFrag\n            }\n        }\n    }\n": types.CreateChromeExtensionEventFlatDocument,
    "\n    mutation createCourseFlat($objects: [CourseInsertInput!]!) {\n        insertIntoCourseCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...CourseFlatFrag\n            }\n        }\n    }\n": types.CreateCourseFlatDocument,
    "\n    mutation createCourseLessonFlat($objects: [CourseLessonInsertInput!]!) {\n        insertIntoCourseLessonCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...CourseLessonFlatFrag\n            }\n        }\n    }\n": types.CreateCourseLessonFlatDocument,
    "\n    mutation createEmailSubscriptionFlat($objects: [EmailSubscriptionInsertInput!]!) {\n        insertIntoEmailSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EmailSubscriptionFlatFrag\n            }\n        }\n    }\n": types.CreateEmailSubscriptionFlatDocument,
    "\n    mutation createEntityFlat($objects: [EntityInsertInput!]!) {\n        insertIntoEntityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityFlatFrag\n            }\n        }\n    }\n": types.CreateEntityFlatDocument,
    "\n    mutation createEntityTypeFlat($objects: [EntityTypeInsertInput!]!) {\n        insertIntoEntityTypeCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityTypeFlatFrag\n            }\n        }\n    }\n": types.CreateEntityTypeFlatDocument,
    "\n    mutation createEntityTypeAccessLevelFlat($objects: [EntityTypeAccessLevelInsertInput!]!) {\n        insertIntoEntityTypeAccessLevelCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityTypeAccessLevelFlatFrag\n            }\n        }\n    }\n": types.CreateEntityTypeAccessLevelFlatDocument,
    "\n    mutation createGoalFlat($objects: [GoalInsertInput!]!) {\n        insertIntoGoalCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...GoalFlatFrag\n            }\n        }\n    }\n": types.CreateGoalFlatDocument,
    "\n    mutation createGroupFlat($objects: [GroupInsertInput!]!) {\n        insertIntoGroupCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...GroupFlatFrag\n            }\n        }\n    }\n": types.CreateGroupFlatDocument,
    "\n    mutation createIntegrationFlat($objects: [IntegrationInsertInput!]!) {\n        insertIntoIntegrationCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...IntegrationFlatFrag\n            }\n        }\n    }\n": types.CreateIntegrationFlatDocument,
    "\n    mutation createIntegrationTokenFlat($objects: [IntegrationTokenInsertInput!]!) {\n        insertIntoIntegrationTokenCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...IntegrationTokenFlatFrag\n            }\n        }\n    }\n": types.CreateIntegrationTokenFlatDocument,
    "\n    mutation createJournalFlat($objects: [JournalInsertInput!]!) {\n        insertIntoJournalCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...JournalFlatFrag\n            }\n        }\n    }\n": types.CreateJournalFlatDocument,
    "\n    mutation createLessonFlat($objects: [LessonInsertInput!]!) {\n        insertIntoLessonCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonFlatFrag\n            }\n        }\n    }\n": types.CreateLessonFlatDocument,
    "\n    mutation createLessonActivityFlat($objects: [LessonActivityInsertInput!]!) {\n        insertIntoLessonActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonActivityFlatFrag\n            }\n        }\n    }\n": types.CreateLessonActivityFlatDocument,
    "\n    mutation createLessonSessionFlat($objects: [LessonSessionInsertInput!]!) {\n        insertIntoLessonSessionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonSessionFlatFrag\n            }\n        }\n    }\n": types.CreateLessonSessionFlatDocument,
    "\n    mutation createMemauthFlat($objects: [MemauthInsertInput!]!) {\n        insertIntoMemauthCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...MemauthFlatFrag\n            }\n        }\n    }\n": types.CreateMemauthFlatDocument,
    "\n    mutation createMemberAuthorizationFlat($objects: [MemberAuthorizationInsertInput!]!) {\n        insertIntoMemberAuthorizationCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...MemberAuthorizationFlatFrag\n            }\n        }\n    }\n": types.CreateMemberAuthorizationFlatDocument,
    "\n    mutation createNotificationSubscriptionFlat($objects: [NotificationSubscriptionInsertInput!]!) {\n        insertIntoNotificationSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...NotificationSubscriptionFlatFrag\n            }\n        }\n    }\n": types.CreateNotificationSubscriptionFlatDocument,
    "\n    mutation createOperationLogFlat($objects: [OperationLogInsertInput!]!) {\n        insertIntoOperationLogCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...OperationLogFlatFrag\n            }\n        }\n    }\n": types.CreateOperationLogFlatDocument,
    "\n    mutation createPartialSkillFlat($objects: [PartialSkillInsertInput!]!) {\n        insertIntoPartialSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PartialSkillFlatFrag\n            }\n        }\n    }\n": types.CreatePartialSkillFlatDocument,
    "\n    mutation createPermissionFlat($objects: [PermissionInsertInput!]!) {\n        insertIntoPermissionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PermissionFlatFrag\n            }\n        }\n    }\n": types.CreatePermissionFlatDocument,
    "\n    mutation createPodcastFlat($objects: [PodcastInsertInput!]!) {\n        insertIntoPodcastCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastFlatFrag\n            }\n        }\n    }\n": types.CreatePodcastFlatDocument,
    "\n    mutation createPodcastAudioFlat($objects: [PodcastAudioInsertInput!]!) {\n        insertIntoPodcastAudioCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastAudioFlatFrag\n            }\n        }\n    }\n": types.CreatePodcastAudioFlatDocument,
    "\n    mutation createPodcastLineFlat($objects: [PodcastLineInsertInput!]!) {\n        insertIntoPodcastLineCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastLineFlatFrag\n            }\n        }\n    }\n": types.CreatePodcastLineFlatDocument,
    "\n    mutation createPodcastQueueItemFlat($objects: [PodcastQueueItemInsertInput!]!) {\n        insertIntoPodcastQueueItemCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastQueueItemFlatFrag\n            }\n        }\n    }\n": types.CreatePodcastQueueItemFlatDocument,
    "\n    mutation createPushNotificationSubscriptionFlat($objects: [PushNotificationSubscriptionInsertInput!]!) {\n        insertIntoPushNotificationSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PushNotificationSubscriptionFlatFrag\n            }\n        }\n    }\n": types.CreatePushNotificationSubscriptionFlatDocument,
    "\n    mutation createReferenceFlat($objects: [ReferenceInsertInput!]!) {\n        insertIntoReferenceCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ReferenceFlatFrag\n            }\n        }\n    }\n": types.CreateReferenceFlatDocument,
    "\n    mutation createResourceFlat($objects: [ResourceInsertInput!]!) {\n        insertIntoResourceCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ResourceFlatFrag\n            }\n        }\n    }\n": types.CreateResourceFlatDocument,
    "\n    mutation createRsnPageFlat($objects: [RsnPageInsertInput!]!) {\n        insertIntoRsnPageCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnPageFlatFrag\n            }\n        }\n    }\n": types.CreateRsnPageFlatDocument,
    "\n    mutation createRsnPageVectorFlat($objects: [RsnPageVectorInsertInput!]!) {\n        insertIntoRsnPageVectorCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnPageVectorFlatFrag\n            }\n        }\n    }\n": types.CreateRsnPageVectorFlatDocument,
    "\n    mutation createRsnUserFlat($objects: [RsnUserInsertInput!]!) {\n        insertIntoRsnUserCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnUserFlatFrag\n            }\n        }\n    }\n": types.CreateRsnUserFlatDocument,
    "\n    mutation createRsnUserSysdataFlat($objects: [RsnUserSysdataInsertInput!]!) {\n        insertIntoRsnUserSysdataCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnUserSysdataFlatFrag\n            }\n        }\n    }\n": types.CreateRsnUserSysdataFlatDocument,
    "\n    mutation createRsnVecFlat($objects: [RsnVecInsertInput!]!) {\n        insertIntoRsnVecCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecFlatFrag\n            }\n        }\n    }\n": types.CreateRsnVecFlatDocument,
    "\n    mutation createRsnVecConfigFlat($objects: [RsnVecConfigInsertInput!]!) {\n        insertIntoRsnVecConfigCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecConfigFlatFrag\n            }\n        }\n    }\n": types.CreateRsnVecConfigFlatDocument,
    "\n    mutation createRsnVecQueueFlat($objects: [RsnVecQueueInsertInput!]!) {\n        insertIntoRsnVecQueueCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecQueueFlatFrag\n            }\n        }\n    }\n": types.CreateRsnVecQueueFlatDocument,
    "\n    mutation createRsncoreTableAbbreviationsFlat($objects: [RsncoreTableAbbreviationsInsertInput!]!) {\n        insertIntoRsncoreTableAbbreviationsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsncoreTableAbbreviationsFlatFrag\n            }\n        }\n    }\n": types.CreateRsncoreTableAbbreviationsFlatDocument,
    "\n    mutation createSkillFlat($objects: [SkillInsertInput!]!) {\n        insertIntoSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillFlatFrag\n            }\n        }\n    }\n": types.CreateSkillFlatDocument,
    "\n    mutation createSkillLinkFlat($objects: [SkillLinkInsertInput!]!) {\n        insertIntoSkillLinkCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillLinkFlatFrag\n            }\n        }\n    }\n": types.CreateSkillLinkFlatDocument,
    "\n    mutation createSkillModuleFlat($objects: [SkillModuleInsertInput!]!) {\n        insertIntoSkillModuleCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillModuleFlatFrag\n            }\n        }\n    }\n": types.CreateSkillModuleFlatDocument,
    "\n    mutation createSkillSetFlat($objects: [SkillSetInsertInput!]!) {\n        insertIntoSkillSetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillSetFlatFrag\n            }\n        }\n    }\n": types.CreateSkillSetFlatDocument,
    "\n    mutation createSkillSetSkillFlat($objects: [SkillSetSkillInsertInput!]!) {\n        insertIntoSkillSetSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillSetSkillFlatFrag\n            }\n        }\n    }\n": types.CreateSkillSetSkillFlatDocument,
    "\n    mutation createSnipFlat($objects: [SnipInsertInput!]!) {\n        insertIntoSnipCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SnipFlatFrag\n            }\n        }\n    }\n": types.CreateSnipFlatDocument,
    "\n    mutation createStripeCustomersFlat($objects: [StripeCustomersInsertInput!]!) {\n        insertIntoStripeCustomersCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeCustomersFlatFrag\n            }\n        }\n    }\n": types.CreateStripeCustomersFlatDocument,
    "\n    mutation createStripeProductsFlat($objects: [StripeProductsInsertInput!]!) {\n        insertIntoStripeProductsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeProductsFlatFrag\n            }\n        }\n    }\n": types.CreateStripeProductsFlatDocument,
    "\n    mutation createStripeSubscriptionsFlat($objects: [StripeSubscriptionsInsertInput!]!) {\n        insertIntoStripeSubscriptionsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeSubscriptionsFlatFrag\n            }\n        }\n    }\n": types.CreateStripeSubscriptionsFlatDocument,
    "\n    mutation createUserActivityFeedbackFlat($objects: [UserActivityFeedbackInsertInput!]!) {\n        insertIntoUserActivityFeedbackCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserActivityFeedbackFlatFrag\n            }\n        }\n    }\n": types.CreateUserActivityFeedbackFlatDocument,
    "\n    mutation createUserActivityResultFlat($objects: [UserActivityResultInsertInput!]!) {\n        insertIntoUserActivityResultCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserActivityResultFlatFrag\n            }\n        }\n    }\n": types.CreateUserActivityResultFlatDocument,
    "\n    mutation createUserHistoryFlat($objects: [UserHistoryInsertInput!]!) {\n        insertIntoUserHistoryCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserHistoryFlatFrag\n            }\n        }\n    }\n": types.CreateUserHistoryFlatDocument,
    "\n    mutation createUserLessonResultFlat($objects: [UserLessonResultInsertInput!]!) {\n        insertIntoUserLessonResultCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserLessonResultFlatFrag\n            }\n        }\n    }\n": types.CreateUserLessonResultFlatDocument,
    "\n    mutation createUserProfileFlat($objects: [UserProfileInsertInput!]!) {\n        insertIntoUserProfileCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserProfileFlatFrag\n            }\n        }\n    }\n": types.CreateUserProfileFlatDocument,
    "\n    mutation createUserSettingFlat($objects: [UserSettingInsertInput!]!) {\n        insertIntoUserSettingCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSettingFlatFrag\n            }\n        }\n    }\n": types.CreateUserSettingFlatDocument,
    "\n    mutation createUserSkillFlat($objects: [UserSkillInsertInput!]!) {\n        insertIntoUserSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSkillFlatFrag\n            }\n        }\n    }\n": types.CreateUserSkillFlatDocument,
    "\n    mutation createUserSkillSysdataFlat($objects: [UserSkillSysdataInsertInput!]!) {\n        insertIntoUserSkillSysdataCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSkillSysdataFlatFrag\n            }\n        }\n    }\n": types.CreateUserSkillSysdataFlatDocument,
    "\n    mutation createUserTourFlat($objects: [UserTourInsertInput!]!) {\n        insertIntoUserTourCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserTourFlatFrag\n            }\n        }\n    }\n": types.CreateUserTourFlatDocument,
    "\n    mutation updateAccessLevelPermissionFlat($set: AccessLevelPermissionUpdateInput!, $filter: AccessLevelPermissionFilter, $atMost: Int!) {\n        updateAccessLevelPermissionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...AccessLevelPermissionFlatFrag\n            }\n        }\n    }\n": types.UpdateAccessLevelPermissionFlatDocument,
    "\n    mutation updateActivityFlat($set: ActivityUpdateInput!, $filter: ActivityFilter, $atMost: Int!) {\n        updateActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivityFlatFrag\n            }\n        }\n    }\n": types.UpdateActivityFlatDocument,
    "\n    mutation updateActivitySetFlat($set: ActivitySetUpdateInput!, $filter: ActivitySetFilter, $atMost: Int!) {\n        updateActivitySetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySetFlatFrag\n            }\n        }\n    }\n": types.UpdateActivitySetFlatDocument,
    "\n    mutation updateActivitySetActivityFlat($set: ActivitySetActivityUpdateInput!, $filter: ActivitySetActivityFilter, $atMost: Int!) {\n        updateActivitySetActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySetActivityFlatFrag\n            }\n        }\n    }\n": types.UpdateActivitySetActivityFlatDocument,
    "\n    mutation updateActivitySkillFlat($set: ActivitySkillUpdateInput!, $filter: ActivitySkillFilter, $atMost: Int!) {\n        updateActivitySkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySkillFlatFrag\n            }\n        }\n    }\n": types.UpdateActivitySkillFlatDocument,
    "\n    mutation updateAnalyzerFlat($set: AnalyzerUpdateInput!, $filter: AnalyzerFilter, $atMost: Int!) {\n        updateAnalyzerCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...AnalyzerFlatFrag\n            }\n        }\n    }\n": types.UpdateAnalyzerFlatDocument,
    "\n    mutation updateBlogPostFlat($set: BlogPostUpdateInput!, $filter: BlogPostFilter, $atMost: Int!) {\n        updateBlogPostCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BlogPostFlatFrag\n            }\n        }\n    }\n": types.UpdateBlogPostFlatDocument,
    "\n    mutation updateBotFlat($set: BotUpdateInput!, $filter: BotFilter, $atMost: Int!) {\n        updateBotCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotFlatFrag\n            }\n        }\n    }\n": types.UpdateBotFlatDocument,
    "\n    mutation updateBotSetFlat($set: BotSetUpdateInput!, $filter: BotSetFilter, $atMost: Int!) {\n        updateBotSetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotSetFlatFrag\n            }\n        }\n    }\n": types.UpdateBotSetFlatDocument,
    "\n    mutation updateBotSetBotFlat($set: BotSetBotUpdateInput!, $filter: BotSetBotFilter, $atMost: Int!) {\n        updateBotSetBotCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotSetBotFlatFrag\n            }\n        }\n    }\n": types.UpdateBotSetBotFlatDocument,
    "\n    mutation updateChapterFlat($set: ChapterUpdateInput!, $filter: ChapterFilter, $atMost: Int!) {\n        updateChapterCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChapterFlatFrag\n            }\n        }\n    }\n": types.UpdateChapterFlatDocument,
    "\n    mutation updateChatFlat($set: ChatUpdateInput!, $filter: ChatFilter, $atMost: Int!) {\n        updateChatCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChatFlatFrag\n            }\n        }\n    }\n": types.UpdateChatFlatDocument,
    "\n    mutation updateChatMessageFlat($set: ChatMessageUpdateInput!, $filter: ChatMessageFilter, $atMost: Int!) {\n        updateChatMessageCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChatMessageFlatFrag\n            }\n        }\n    }\n": types.UpdateChatMessageFlatDocument,
    "\n    mutation updateChromeExtensionEventFlat($set: ChromeExtensionEventUpdateInput!, $filter: ChromeExtensionEventFilter, $atMost: Int!) {\n        updateChromeExtensionEventCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChromeExtensionEventFlatFrag\n            }\n        }\n    }\n": types.UpdateChromeExtensionEventFlatDocument,
    "\n    mutation updateCourseFlat($set: CourseUpdateInput!, $filter: CourseFilter, $atMost: Int!) {\n        updateCourseCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...CourseFlatFrag\n            }\n        }\n    }\n": types.UpdateCourseFlatDocument,
    "\n    mutation updateCourseLessonFlat($set: CourseLessonUpdateInput!, $filter: CourseLessonFilter, $atMost: Int!) {\n        updateCourseLessonCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...CourseLessonFlatFrag\n            }\n        }\n    }\n": types.UpdateCourseLessonFlatDocument,
    "\n    mutation updateEmailSubscriptionFlat($set: EmailSubscriptionUpdateInput!, $filter: EmailSubscriptionFilter, $atMost: Int!) {\n        updateEmailSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EmailSubscriptionFlatFrag\n            }\n        }\n    }\n": types.UpdateEmailSubscriptionFlatDocument,
    "\n    mutation updateEntityFlat($set: EntityUpdateInput!, $filter: EntityFilter, $atMost: Int!) {\n        updateEntityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityFlatFrag\n            }\n        }\n    }\n": types.UpdateEntityFlatDocument,
    "\n    mutation updateEntityTypeFlat($set: EntityTypeUpdateInput!, $filter: EntityTypeFilter, $atMost: Int!) {\n        updateEntityTypeCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityTypeFlatFrag\n            }\n        }\n    }\n": types.UpdateEntityTypeFlatDocument,
    "\n    mutation updateEntityTypeAccessLevelFlat($set: EntityTypeAccessLevelUpdateInput!, $filter: EntityTypeAccessLevelFilter, $atMost: Int!) {\n        updateEntityTypeAccessLevelCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityTypeAccessLevelFlatFrag\n            }\n        }\n    }\n": types.UpdateEntityTypeAccessLevelFlatDocument,
    "\n    mutation updateGoalFlat($set: GoalUpdateInput!, $filter: GoalFilter, $atMost: Int!) {\n        updateGoalCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...GoalFlatFrag\n            }\n        }\n    }\n": types.UpdateGoalFlatDocument,
    "\n    mutation updateGroupFlat($set: GroupUpdateInput!, $filter: GroupFilter, $atMost: Int!) {\n        updateGroupCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...GroupFlatFrag\n            }\n        }\n    }\n": types.UpdateGroupFlatDocument,
    "\n    mutation updateIntegrationFlat($set: IntegrationUpdateInput!, $filter: IntegrationFilter, $atMost: Int!) {\n        updateIntegrationCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...IntegrationFlatFrag\n            }\n        }\n    }\n": types.UpdateIntegrationFlatDocument,
    "\n    mutation updateIntegrationTokenFlat($set: IntegrationTokenUpdateInput!, $filter: IntegrationTokenFilter, $atMost: Int!) {\n        updateIntegrationTokenCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...IntegrationTokenFlatFrag\n            }\n        }\n    }\n": types.UpdateIntegrationTokenFlatDocument,
    "\n    mutation updateJournalFlat($set: JournalUpdateInput!, $filter: JournalFilter, $atMost: Int!) {\n        updateJournalCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...JournalFlatFrag\n            }\n        }\n    }\n": types.UpdateJournalFlatDocument,
    "\n    mutation updateLessonFlat($set: LessonUpdateInput!, $filter: LessonFilter, $atMost: Int!) {\n        updateLessonCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonFlatFrag\n            }\n        }\n    }\n": types.UpdateLessonFlatDocument,
    "\n    mutation updateLessonActivityFlat($set: LessonActivityUpdateInput!, $filter: LessonActivityFilter, $atMost: Int!) {\n        updateLessonActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonActivityFlatFrag\n            }\n        }\n    }\n": types.UpdateLessonActivityFlatDocument,
    "\n    mutation updateLessonSessionFlat($set: LessonSessionUpdateInput!, $filter: LessonSessionFilter, $atMost: Int!) {\n        updateLessonSessionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonSessionFlatFrag\n            }\n        }\n    }\n": types.UpdateLessonSessionFlatDocument,
    "\n    mutation updateMemauthFlat($set: MemauthUpdateInput!, $filter: MemauthFilter, $atMost: Int!) {\n        updateMemauthCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...MemauthFlatFrag\n            }\n        }\n    }\n": types.UpdateMemauthFlatDocument,
    "\n    mutation updateMemberAuthorizationFlat($set: MemberAuthorizationUpdateInput!, $filter: MemberAuthorizationFilter, $atMost: Int!) {\n        updateMemberAuthorizationCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...MemberAuthorizationFlatFrag\n            }\n        }\n    }\n": types.UpdateMemberAuthorizationFlatDocument,
    "\n    mutation updateNotificationSubscriptionFlat($set: NotificationSubscriptionUpdateInput!, $filter: NotificationSubscriptionFilter, $atMost: Int!) {\n        updateNotificationSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...NotificationSubscriptionFlatFrag\n            }\n        }\n    }\n": types.UpdateNotificationSubscriptionFlatDocument,
    "\n    mutation updateOperationLogFlat($set: OperationLogUpdateInput!, $filter: OperationLogFilter, $atMost: Int!) {\n        updateOperationLogCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...OperationLogFlatFrag\n            }\n        }\n    }\n": types.UpdateOperationLogFlatDocument,
    "\n    mutation updatePartialSkillFlat($set: PartialSkillUpdateInput!, $filter: PartialSkillFilter, $atMost: Int!) {\n        updatePartialSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PartialSkillFlatFrag\n            }\n        }\n    }\n": types.UpdatePartialSkillFlatDocument,
    "\n    mutation updatePermissionFlat($set: PermissionUpdateInput!, $filter: PermissionFilter, $atMost: Int!) {\n        updatePermissionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PermissionFlatFrag\n            }\n        }\n    }\n": types.UpdatePermissionFlatDocument,
    "\n    mutation updatePodcastFlat($set: PodcastUpdateInput!, $filter: PodcastFilter, $atMost: Int!) {\n        updatePodcastCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastFlatFrag\n            }\n        }\n    }\n": types.UpdatePodcastFlatDocument,
    "\n    mutation updatePodcastAudioFlat($set: PodcastAudioUpdateInput!, $filter: PodcastAudioFilter, $atMost: Int!) {\n        updatePodcastAudioCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastAudioFlatFrag\n            }\n        }\n    }\n": types.UpdatePodcastAudioFlatDocument,
    "\n    mutation updatePodcastLineFlat($set: PodcastLineUpdateInput!, $filter: PodcastLineFilter, $atMost: Int!) {\n        updatePodcastLineCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastLineFlatFrag\n            }\n        }\n    }\n": types.UpdatePodcastLineFlatDocument,
    "\n    mutation updatePodcastQueueItemFlat($set: PodcastQueueItemUpdateInput!, $filter: PodcastQueueItemFilter, $atMost: Int!) {\n        updatePodcastQueueItemCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastQueueItemFlatFrag\n            }\n        }\n    }\n": types.UpdatePodcastQueueItemFlatDocument,
    "\n    mutation updatePushNotificationSubscriptionFlat($set: PushNotificationSubscriptionUpdateInput!, $filter: PushNotificationSubscriptionFilter, $atMost: Int!) {\n        updatePushNotificationSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PushNotificationSubscriptionFlatFrag\n            }\n        }\n    }\n": types.UpdatePushNotificationSubscriptionFlatDocument,
    "\n    mutation updateReferenceFlat($set: ReferenceUpdateInput!, $filter: ReferenceFilter, $atMost: Int!) {\n        updateReferenceCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ReferenceFlatFrag\n            }\n        }\n    }\n": types.UpdateReferenceFlatDocument,
    "\n    mutation updateResourceFlat($set: ResourceUpdateInput!, $filter: ResourceFilter, $atMost: Int!) {\n        updateResourceCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ResourceFlatFrag\n            }\n        }\n    }\n": types.UpdateResourceFlatDocument,
    "\n    mutation updateRsnPageFlat($set: RsnPageUpdateInput!, $filter: RsnPageFilter, $atMost: Int!) {\n        updateRsnPageCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnPageFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnPageFlatDocument,
    "\n    mutation updateRsnPageVectorFlat($set: RsnPageVectorUpdateInput!, $filter: RsnPageVectorFilter, $atMost: Int!) {\n        updateRsnPageVectorCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnPageVectorFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnPageVectorFlatDocument,
    "\n    mutation updateRsnUserFlat($set: RsnUserUpdateInput!, $filter: RsnUserFilter, $atMost: Int!) {\n        updateRsnUserCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnUserFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnUserFlatDocument,
    "\n    mutation updateRsnUserSysdataFlat($set: RsnUserSysdataUpdateInput!, $filter: RsnUserSysdataFilter, $atMost: Int!) {\n        updateRsnUserSysdataCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnUserSysdataFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnUserSysdataFlatDocument,
    "\n    mutation updateRsnVecFlat($set: RsnVecUpdateInput!, $filter: RsnVecFilter, $atMost: Int!) {\n        updateRsnVecCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnVecFlatDocument,
    "\n    mutation updateRsnVecConfigFlat($set: RsnVecConfigUpdateInput!, $filter: RsnVecConfigFilter, $atMost: Int!) {\n        updateRsnVecConfigCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecConfigFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnVecConfigFlatDocument,
    "\n    mutation updateRsnVecQueueFlat($set: RsnVecQueueUpdateInput!, $filter: RsnVecQueueFilter, $atMost: Int!) {\n        updateRsnVecQueueCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecQueueFlatFrag\n            }\n        }\n    }\n": types.UpdateRsnVecQueueFlatDocument,
    "\n    mutation updateRsncoreTableAbbreviationsFlat($set: RsncoreTableAbbreviationsUpdateInput!, $filter: RsncoreTableAbbreviationsFilter, $atMost: Int!) {\n        updateRsncoreTableAbbreviationsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsncoreTableAbbreviationsFlatFrag\n            }\n        }\n    }\n": types.UpdateRsncoreTableAbbreviationsFlatDocument,
    "\n    mutation updateSkillFlat($set: SkillUpdateInput!, $filter: SkillFilter, $atMost: Int!) {\n        updateSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillFlatFrag\n            }\n        }\n    }\n": types.UpdateSkillFlatDocument,
    "\n    mutation updateSkillLinkFlat($set: SkillLinkUpdateInput!, $filter: SkillLinkFilter, $atMost: Int!) {\n        updateSkillLinkCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillLinkFlatFrag\n            }\n        }\n    }\n": types.UpdateSkillLinkFlatDocument,
    "\n    mutation updateSkillModuleFlat($set: SkillModuleUpdateInput!, $filter: SkillModuleFilter, $atMost: Int!) {\n        updateSkillModuleCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillModuleFlatFrag\n            }\n        }\n    }\n": types.UpdateSkillModuleFlatDocument,
    "\n    mutation updateSkillSetFlat($set: SkillSetUpdateInput!, $filter: SkillSetFilter, $atMost: Int!) {\n        updateSkillSetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillSetFlatFrag\n            }\n        }\n    }\n": types.UpdateSkillSetFlatDocument,
    "\n    mutation updateSkillSetSkillFlat($set: SkillSetSkillUpdateInput!, $filter: SkillSetSkillFilter, $atMost: Int!) {\n        updateSkillSetSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillSetSkillFlatFrag\n            }\n        }\n    }\n": types.UpdateSkillSetSkillFlatDocument,
    "\n    mutation updateSnipFlat($set: SnipUpdateInput!, $filter: SnipFilter, $atMost: Int!) {\n        updateSnipCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SnipFlatFrag\n            }\n        }\n    }\n": types.UpdateSnipFlatDocument,
    "\n    mutation updateStripeCustomersFlat($set: StripeCustomersUpdateInput!, $filter: StripeCustomersFilter, $atMost: Int!) {\n        updateStripeCustomersCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeCustomersFlatFrag\n            }\n        }\n    }\n": types.UpdateStripeCustomersFlatDocument,
    "\n    mutation updateStripeProductsFlat($set: StripeProductsUpdateInput!, $filter: StripeProductsFilter, $atMost: Int!) {\n        updateStripeProductsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeProductsFlatFrag\n            }\n        }\n    }\n": types.UpdateStripeProductsFlatDocument,
    "\n    mutation updateStripeSubscriptionsFlat($set: StripeSubscriptionsUpdateInput!, $filter: StripeSubscriptionsFilter, $atMost: Int!) {\n        updateStripeSubscriptionsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeSubscriptionsFlatFrag\n            }\n        }\n    }\n": types.UpdateStripeSubscriptionsFlatDocument,
    "\n    mutation updateUserActivityFeedbackFlat($set: UserActivityFeedbackUpdateInput!, $filter: UserActivityFeedbackFilter, $atMost: Int!) {\n        updateUserActivityFeedbackCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserActivityFeedbackFlatFrag\n            }\n        }\n    }\n": types.UpdateUserActivityFeedbackFlatDocument,
    "\n    mutation updateUserActivityResultFlat($set: UserActivityResultUpdateInput!, $filter: UserActivityResultFilter, $atMost: Int!) {\n        updateUserActivityResultCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserActivityResultFlatFrag\n            }\n        }\n    }\n": types.UpdateUserActivityResultFlatDocument,
    "\n    mutation updateUserHistoryFlat($set: UserHistoryUpdateInput!, $filter: UserHistoryFilter, $atMost: Int!) {\n        updateUserHistoryCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserHistoryFlatFrag\n            }\n        }\n    }\n": types.UpdateUserHistoryFlatDocument,
    "\n    mutation updateUserLessonResultFlat($set: UserLessonResultUpdateInput!, $filter: UserLessonResultFilter, $atMost: Int!) {\n        updateUserLessonResultCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserLessonResultFlatFrag\n            }\n        }\n    }\n": types.UpdateUserLessonResultFlatDocument,
    "\n    mutation updateUserProfileFlat($set: UserProfileUpdateInput!, $filter: UserProfileFilter, $atMost: Int!) {\n        updateUserProfileCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserProfileFlatFrag\n            }\n        }\n    }\n": types.UpdateUserProfileFlatDocument,
    "\n    mutation updateUserSettingFlat($set: UserSettingUpdateInput!, $filter: UserSettingFilter, $atMost: Int!) {\n        updateUserSettingCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSettingFlatFrag\n            }\n        }\n    }\n": types.UpdateUserSettingFlatDocument,
    "\n    mutation updateUserSkillFlat($set: UserSkillUpdateInput!, $filter: UserSkillFilter, $atMost: Int!) {\n        updateUserSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSkillFlatFrag\n            }\n        }\n    }\n": types.UpdateUserSkillFlatDocument,
    "\n    mutation updateUserSkillSysdataFlat($set: UserSkillSysdataUpdateInput!, $filter: UserSkillSysdataFilter, $atMost: Int!) {\n        updateUserSkillSysdataCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSkillSysdataFlatFrag\n            }\n        }\n    }\n": types.UpdateUserSkillSysdataFlatDocument,
    "\n    mutation updateUserTourFlat($set: UserTourUpdateInput!, $filter: UserTourFilter, $atMost: Int!) {\n        updateUserTourCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserTourFlatFrag\n            }\n        }\n    }\n": types.UpdateUserTourFlatDocument,
    "\n    mutation deleteActivityFlat($atMost: Int!, $filter: ActivityFilter) {\n        deleteFromActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteActivityFlatDocument,
    "\n    mutation deleteActivitySetFlat($atMost: Int!, $filter: ActivitySetFilter) {\n        deleteFromActivitySetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteActivitySetFlatDocument,
    "\n    mutation deleteActivitySetActivityFlat($atMost: Int!, $filter: ActivitySetActivityFilter) {\n        deleteFromActivitySetActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteActivitySetActivityFlatDocument,
    "\n    mutation deleteActivitySkillFlat($atMost: Int!, $filter: ActivitySkillFilter) {\n        deleteFromActivitySkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteActivitySkillFlatDocument,
    "\n    mutation deleteAnalyzerFlat($atMost: Int!, $filter: AnalyzerFilter) {\n        deleteFromAnalyzerCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteAnalyzerFlatDocument,
    "\n    mutation deleteBlogPostFlat($atMost: Int!, $filter: BlogPostFilter) {\n        deleteFromBlogPostCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteBlogPostFlatDocument,
    "\n    mutation deleteBotFlat($atMost: Int!, $filter: BotFilter) {\n        deleteFromBotCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteBotFlatDocument,
    "\n    mutation deleteBotSetFlat($atMost: Int!, $filter: BotSetFilter) {\n        deleteFromBotSetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteBotSetFlatDocument,
    "\n    mutation deleteBotSetBotFlat($atMost: Int!, $filter: BotSetBotFilter) {\n        deleteFromBotSetBotCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteBotSetBotFlatDocument,
    "\n    mutation deleteChapterFlat($atMost: Int!, $filter: ChapterFilter) {\n        deleteFromChapterCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteChapterFlatDocument,
    "\n    mutation deleteChatFlat($atMost: Int!, $filter: ChatFilter) {\n        deleteFromChatCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteChatFlatDocument,
    "\n    mutation deleteChatMessageFlat($atMost: Int!, $filter: ChatMessageFilter) {\n        deleteFromChatMessageCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteChatMessageFlatDocument,
    "\n    mutation deleteChromeExtensionEventFlat($atMost: Int!, $filter: ChromeExtensionEventFilter) {\n        deleteFromChromeExtensionEventCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteChromeExtensionEventFlatDocument,
    "\n    mutation deleteCourseFlat($atMost: Int!, $filter: CourseFilter) {\n        deleteFromCourseCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteCourseFlatDocument,
    "\n    mutation deleteCourseLessonFlat($atMost: Int!, $filter: CourseLessonFilter) {\n        deleteFromCourseLessonCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteCourseLessonFlatDocument,
    "\n    mutation deleteEmailSubscriptionFlat($atMost: Int!, $filter: EmailSubscriptionFilter) {\n        deleteFromEmailSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteEmailSubscriptionFlatDocument,
    "\n    mutation deleteEntityFlat($atMost: Int!, $filter: EntityFilter) {\n        deleteFromEntityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteEntityFlatDocument,
    "\n    mutation deleteGoalFlat($atMost: Int!, $filter: GoalFilter) {\n        deleteFromGoalCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteGoalFlatDocument,
    "\n    mutation deleteGroupFlat($atMost: Int!, $filter: GroupFilter) {\n        deleteFromGroupCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteGroupFlatDocument,
    "\n    mutation deleteIntegrationFlat($atMost: Int!, $filter: IntegrationFilter) {\n        deleteFromIntegrationCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteIntegrationFlatDocument,
    "\n    mutation deleteIntegrationTokenFlat($atMost: Int!, $filter: IntegrationTokenFilter) {\n        deleteFromIntegrationTokenCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteIntegrationTokenFlatDocument,
    "\n    mutation deleteJournalFlat($atMost: Int!, $filter: JournalFilter) {\n        deleteFromJournalCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteJournalFlatDocument,
    "\n    mutation deleteLessonFlat($atMost: Int!, $filter: LessonFilter) {\n        deleteFromLessonCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteLessonFlatDocument,
    "\n    mutation deleteLessonActivityFlat($atMost: Int!, $filter: LessonActivityFilter) {\n        deleteFromLessonActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteLessonActivityFlatDocument,
    "\n    mutation deleteLessonSessionFlat($atMost: Int!, $filter: LessonSessionFilter) {\n        deleteFromLessonSessionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteLessonSessionFlatDocument,
    "\n    mutation deleteMemauthFlat($atMost: Int!, $filter: MemauthFilter) {\n        deleteFromMemauthCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteMemauthFlatDocument,
    "\n    mutation deleteMemberAuthorizationFlat($atMost: Int!, $filter: MemberAuthorizationFilter) {\n        deleteFromMemberAuthorizationCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteMemberAuthorizationFlatDocument,
    "\n    mutation deleteNotificationSubscriptionFlat($atMost: Int!, $filter: NotificationSubscriptionFilter) {\n        deleteFromNotificationSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteNotificationSubscriptionFlatDocument,
    "\n    mutation deleteOperationLogFlat($atMost: Int!, $filter: OperationLogFilter) {\n        deleteFromOperationLogCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteOperationLogFlatDocument,
    "\n    mutation deletePartialSkillFlat($atMost: Int!, $filter: PartialSkillFilter) {\n        deleteFromPartialSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeletePartialSkillFlatDocument,
    "\n    mutation deletePodcastFlat($atMost: Int!, $filter: PodcastFilter) {\n        deleteFromPodcastCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeletePodcastFlatDocument,
    "\n    mutation deletePodcastAudioFlat($atMost: Int!, $filter: PodcastAudioFilter) {\n        deleteFromPodcastAudioCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeletePodcastAudioFlatDocument,
    "\n    mutation deletePodcastLineFlat($atMost: Int!, $filter: PodcastLineFilter) {\n        deleteFromPodcastLineCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeletePodcastLineFlatDocument,
    "\n    mutation deletePodcastQueueItemFlat($atMost: Int!, $filter: PodcastQueueItemFilter) {\n        deleteFromPodcastQueueItemCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeletePodcastQueueItemFlatDocument,
    "\n    mutation deletePushNotificationSubscriptionFlat($atMost: Int!, $filter: PushNotificationSubscriptionFilter) {\n        deleteFromPushNotificationSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeletePushNotificationSubscriptionFlatDocument,
    "\n    mutation deleteReferenceFlat($atMost: Int!, $filter: ReferenceFilter) {\n        deleteFromReferenceCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteReferenceFlatDocument,
    "\n    mutation deleteResourceFlat($atMost: Int!, $filter: ResourceFilter) {\n        deleteFromResourceCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteResourceFlatDocument,
    "\n    mutation deleteRsnPageFlat($atMost: Int!, $filter: RsnPageFilter) {\n        deleteFromRsnPageCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnPageFlatDocument,
    "\n    mutation deleteRsnPageVectorFlat($atMost: Int!, $filter: RsnPageVectorFilter) {\n        deleteFromRsnPageVectorCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnPageVectorFlatDocument,
    "\n    mutation deleteRsnUserFlat($atMost: Int!, $filter: RsnUserFilter) {\n        deleteFromRsnUserCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnUserFlatDocument,
    "\n    mutation deleteRsnUserSysdataFlat($atMost: Int!, $filter: RsnUserSysdataFilter) {\n        deleteFromRsnUserSysdataCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnUserSysdataFlatDocument,
    "\n    mutation deleteRsnVecFlat($atMost: Int!, $filter: RsnVecFilter) {\n        deleteFromRsnVecCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnVecFlatDocument,
    "\n    mutation deleteRsnVecConfigFlat($atMost: Int!, $filter: RsnVecConfigFilter) {\n        deleteFromRsnVecConfigCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnVecConfigFlatDocument,
    "\n    mutation deleteRsnVecQueueFlat($atMost: Int!, $filter: RsnVecQueueFilter) {\n        deleteFromRsnVecQueueCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsnVecQueueFlatDocument,
    "\n    mutation deleteRsncoreTableAbbreviationsFlat($atMost: Int!, $filter: RsncoreTableAbbreviationsFilter) {\n        deleteFromRsncoreTableAbbreviationsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteRsncoreTableAbbreviationsFlatDocument,
    "\n    mutation deleteSkillFlat($atMost: Int!, $filter: SkillFilter) {\n        deleteFromSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteSkillFlatDocument,
    "\n    mutation deleteSkillLinkFlat($atMost: Int!, $filter: SkillLinkFilter) {\n        deleteFromSkillLinkCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteSkillLinkFlatDocument,
    "\n    mutation deleteSkillModuleFlat($atMost: Int!, $filter: SkillModuleFilter) {\n        deleteFromSkillModuleCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteSkillModuleFlatDocument,
    "\n    mutation deleteSkillSetFlat($atMost: Int!, $filter: SkillSetFilter) {\n        deleteFromSkillSetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteSkillSetFlatDocument,
    "\n    mutation deleteSkillSetSkillFlat($atMost: Int!, $filter: SkillSetSkillFilter) {\n        deleteFromSkillSetSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteSkillSetSkillFlatDocument,
    "\n    mutation deleteSnipFlat($atMost: Int!, $filter: SnipFilter) {\n        deleteFromSnipCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteSnipFlatDocument,
    "\n    mutation deleteStripeCustomersFlat($atMost: Int!, $filter: StripeCustomersFilter) {\n        deleteFromStripeCustomersCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteStripeCustomersFlatDocument,
    "\n    mutation deleteStripeProductsFlat($atMost: Int!, $filter: StripeProductsFilter) {\n        deleteFromStripeProductsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteStripeProductsFlatDocument,
    "\n    mutation deleteStripeSubscriptionsFlat($atMost: Int!, $filter: StripeSubscriptionsFilter) {\n        deleteFromStripeSubscriptionsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteStripeSubscriptionsFlatDocument,
    "\n    mutation deleteUserActivityFeedbackFlat($atMost: Int!, $filter: UserActivityFeedbackFilter) {\n        deleteFromUserActivityFeedbackCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserActivityFeedbackFlatDocument,
    "\n    mutation deleteUserActivityResultFlat($atMost: Int!, $filter: UserActivityResultFilter) {\n        deleteFromUserActivityResultCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserActivityResultFlatDocument,
    "\n    mutation deleteUserHistoryFlat($atMost: Int!, $filter: UserHistoryFilter) {\n        deleteFromUserHistoryCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserHistoryFlatDocument,
    "\n    mutation deleteUserLessonResultFlat($atMost: Int!, $filter: UserLessonResultFilter) {\n        deleteFromUserLessonResultCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserLessonResultFlatDocument,
    "\n    mutation deleteUserProfileFlat($atMost: Int!, $filter: UserProfileFilter) {\n        deleteFromUserProfileCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserProfileFlatDocument,
    "\n    mutation deleteUserSettingFlat($atMost: Int!, $filter: UserSettingFilter) {\n        deleteFromUserSettingCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserSettingFlatDocument,
    "\n    mutation deleteUserSkillFlat($atMost: Int!, $filter: UserSkillFilter) {\n        deleteFromUserSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserSkillFlatDocument,
    "\n    mutation deleteUserSkillSysdataFlat($atMost: Int!, $filter: UserSkillSysdataFilter) {\n        deleteFromUserSkillSysdataCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserSkillSysdataFlatDocument,
    "\n    mutation deleteUserTourFlat($atMost: Int!, $filter: UserTourFilter) {\n        deleteFromUserTourCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n": types.DeleteUserTourFlatDocument,
    "\n    query getAccessLevelPermissionFlat (\n        $filter: AccessLevelPermissionFilter\n        $orderBy: [AccessLevelPermissionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        accessLevelPermissionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...AccessLevelPermissionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetAccessLevelPermissionFlatDocument,
    "\n    query getActivityFlat (\n        $filter: ActivityFilter\n        $orderBy: [ActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetActivityFlatDocument,
    "\n    query getActivitySetFlat (\n        $filter: ActivitySetFilter\n        $orderBy: [ActivitySetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetActivitySetFlatDocument,
    "\n    query getActivitySetActivityFlat (\n        $filter: ActivitySetActivityFilter\n        $orderBy: [ActivitySetActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySetActivityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetActivitySetActivityFlatDocument,
    "\n    query getActivitySkillFlat (\n        $filter: ActivitySkillFilter\n        $orderBy: [ActivitySkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetActivitySkillFlatDocument,
    "\n    query getAnalyzerFlat (\n        $filter: AnalyzerFilter\n        $orderBy: [AnalyzerOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        analyzerCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...AnalyzerFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetAnalyzerFlatDocument,
    "\n    query getBlogPostFlat (\n        $filter: BlogPostFilter\n        $orderBy: [BlogPostOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        blogPostCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BlogPostFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetBlogPostFlatDocument,
    "\n    query getBotFlat (\n        $filter: BotFilter\n        $orderBy: [BotOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetBotFlatDocument,
    "\n    query getBotSetFlat (\n        $filter: BotSetFilter\n        $orderBy: [BotSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetBotSetFlatDocument,
    "\n    query getBotSetBotFlat (\n        $filter: BotSetBotFilter\n        $orderBy: [BotSetBotOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botSetBotCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetBotFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetBotSetBotFlatDocument,
    "\n    query getChapterFlat (\n        $filter: ChapterFilter\n        $orderBy: [ChapterOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chapterCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChapterFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetChapterFlatDocument,
    "\n    query getChatFlat (\n        $filter: ChatFilter\n        $orderBy: [ChatOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chatCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChatFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetChatFlatDocument,
    "\n    query getChatMessageFlat (\n        $filter: ChatMessageFilter\n        $orderBy: [ChatMessageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chatMessageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChatMessageFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetChatMessageFlatDocument,
    "\n    query getChromeExtensionEventFlat (\n        $filter: ChromeExtensionEventFilter\n        $orderBy: [ChromeExtensionEventOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chromeExtensionEventCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChromeExtensionEventFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetChromeExtensionEventFlatDocument,
    "\n    query getCourseFlat (\n        $filter: CourseFilter\n        $orderBy: [CourseOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        courseCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...CourseFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetCourseFlatDocument,
    "\n    query getCourseLessonFlat (\n        $filter: CourseLessonFilter\n        $orderBy: [CourseLessonOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        courseLessonCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...CourseLessonFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetCourseLessonFlatDocument,
    "\n    query getEmailSubscriptionFlat (\n        $filter: EmailSubscriptionFilter\n        $orderBy: [EmailSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        emailSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EmailSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetEmailSubscriptionFlatDocument,
    "\n    query getEntityFlat (\n        $filter: EntityFilter\n        $orderBy: [EntityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetEntityFlatDocument,
    "\n    query getEntityTypeFlat (\n        $filter: EntityTypeFilter\n        $orderBy: [EntityTypeOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityTypeCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityTypeFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetEntityTypeFlatDocument,
    "\n    query getEntityTypeAccessLevelFlat (\n        $filter: EntityTypeAccessLevelFilter\n        $orderBy: [EntityTypeAccessLevelOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityTypeAccessLevelCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityTypeAccessLevelFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetEntityTypeAccessLevelFlatDocument,
    "\n    query getGoalFlat (\n        $filter: GoalFilter\n        $orderBy: [GoalOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        goalCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...GoalFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetGoalFlatDocument,
    "\n    query getGroupFlat (\n        $filter: GroupFilter\n        $orderBy: [GroupOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        groupCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...GroupFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetGroupFlatDocument,
    "\n    query getIntegrationFlat (\n        $filter: IntegrationFilter\n        $orderBy: [IntegrationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        integrationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...IntegrationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetIntegrationFlatDocument,
    "\n    query getIntegrationTokenFlat (\n        $filter: IntegrationTokenFilter\n        $orderBy: [IntegrationTokenOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        integrationTokenCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...IntegrationTokenFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetIntegrationTokenFlatDocument,
    "\n    query getJournalFlat (\n        $filter: JournalFilter\n        $orderBy: [JournalOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        journalCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...JournalFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetJournalFlatDocument,
    "\n    query getLessonFlat (\n        $filter: LessonFilter\n        $orderBy: [LessonOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetLessonFlatDocument,
    "\n    query getLessonActivityFlat (\n        $filter: LessonActivityFilter\n        $orderBy: [LessonActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonActivityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetLessonActivityFlatDocument,
    "\n    query getLessonSessionFlat (\n        $filter: LessonSessionFilter\n        $orderBy: [LessonSessionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonSessionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonSessionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetLessonSessionFlatDocument,
    "\n    query getMemauthFlat (\n        $filter: MemauthFilter\n        $orderBy: [MemauthOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memauthCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...MemauthFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetMemauthFlatDocument,
    "\n    query getMemberAuthorizationFlat (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...MemberAuthorizationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetMemberAuthorizationFlatDocument,
    "\n    query getNotificationSubscriptionFlat (\n        $filter: NotificationSubscriptionFilter\n        $orderBy: [NotificationSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        notificationSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...NotificationSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetNotificationSubscriptionFlatDocument,
    "\n    query getOperationLogFlat (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...OperationLogFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetOperationLogFlatDocument,
    "\n    query getPartialSkillFlat (\n        $filter: PartialSkillFilter\n        $orderBy: [PartialSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        partialSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PartialSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPartialSkillFlatDocument,
    "\n    query getPermissionFlat (\n        $filter: PermissionFilter\n        $orderBy: [PermissionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        permissionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PermissionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPermissionFlatDocument,
    "\n    query getPodcastFlat (\n        $filter: PodcastFilter\n        $orderBy: [PodcastOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPodcastFlatDocument,
    "\n    query getPodcastAudioFlat (\n        $filter: PodcastAudioFilter\n        $orderBy: [PodcastAudioOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastAudioCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastAudioFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPodcastAudioFlatDocument,
    "\n    query getPodcastLineFlat (\n        $filter: PodcastLineFilter\n        $orderBy: [PodcastLineOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastLineCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastLineFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPodcastLineFlatDocument,
    "\n    query getPodcastQueueItemFlat (\n        $filter: PodcastQueueItemFilter\n        $orderBy: [PodcastQueueItemOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastQueueItemCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastQueueItemFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPodcastQueueItemFlatDocument,
    "\n    query getPushNotificationSubscriptionFlat (\n        $filter: PushNotificationSubscriptionFilter\n        $orderBy: [PushNotificationSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        pushNotificationSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PushNotificationSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetPushNotificationSubscriptionFlatDocument,
    "\n    query getReferenceFlat (\n        $filter: ReferenceFilter\n        $orderBy: [ReferenceOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        referenceCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ReferenceFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetReferenceFlatDocument,
    "\n    query getResourceFlat (\n        $filter: ResourceFilter\n        $orderBy: [ResourceOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        resourceCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ResourceFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetResourceFlatDocument,
    "\n    query getRsnPageFlat (\n        $filter: RsnPageFilter\n        $orderBy: [RsnPageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnPageFlatDocument,
    "\n    query getRsnPageVectorFlat (\n        $filter: RsnPageVectorFilter\n        $orderBy: [RsnPageVectorOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageVectorCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageVectorFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnPageVectorFlatDocument,
    "\n    query getRsnUserFlat (\n        $filter: RsnUserFilter\n        $orderBy: [RsnUserOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnUserCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnUserFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnUserFlatDocument,
    "\n    query getRsnUserSysdataFlat (\n        $filter: RsnUserSysdataFilter\n        $orderBy: [RsnUserSysdataOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnUserSysdataCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnUserSysdataFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnUserSysdataFlatDocument,
    "\n    query getRsnVecFlat (\n        $filter: RsnVecFilter\n        $orderBy: [RsnVecOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnVecFlatDocument,
    "\n    query getRsnVecConfigFlat (\n        $filter: RsnVecConfigFilter\n        $orderBy: [RsnVecConfigOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecConfigCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecConfigFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnVecConfigFlatDocument,
    "\n    query getRsnVecQueueFlat (\n        $filter: RsnVecQueueFilter\n        $orderBy: [RsnVecQueueOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecQueueCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecQueueFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnVecQueueFlatDocument,
    "\n    query getRsncoreTableAbbreviationsFlat (\n        $filter: RsncoreTableAbbreviationsFilter\n        $orderBy: [RsncoreTableAbbreviationsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsncoreTableAbbreviationsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsncoreTableAbbreviationsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsncoreTableAbbreviationsFlatDocument,
    "\n    query getSkillFlat (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillFlatDocument,
    "\n    query getSkillLinkFlat (\n        $filter: SkillLinkFilter\n        $orderBy: [SkillLinkOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillLinkCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillLinkFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillLinkFlatDocument,
    "\n    query getSkillModuleFlat (\n        $filter: SkillModuleFilter\n        $orderBy: [SkillModuleOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillModuleCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillModuleFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillModuleFlatDocument,
    "\n    query getSkillSetFlat (\n        $filter: SkillSetFilter\n        $orderBy: [SkillSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillSetFlatDocument,
    "\n    query getSkillSetSkillFlat (\n        $filter: SkillSetSkillFilter\n        $orderBy: [SkillSetSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillSetSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillSetSkillFlatDocument,
    "\n    query getSnipFlat (\n        $filter: SnipFilter\n        $orderBy: [SnipOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        snipCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SnipFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSnipFlatDocument,
    "\n    query getStripeCustomersFlat (\n        $filter: StripeCustomersFilter\n        $orderBy: [StripeCustomersOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeCustomersCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeCustomersFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetStripeCustomersFlatDocument,
    "\n    query getStripeProductsFlat (\n        $filter: StripeProductsFilter\n        $orderBy: [StripeProductsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeProductsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeProductsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetStripeProductsFlatDocument,
    "\n    query getStripeSubscriptionsFlat (\n        $filter: StripeSubscriptionsFilter\n        $orderBy: [StripeSubscriptionsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeSubscriptionsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeSubscriptionsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetStripeSubscriptionsFlatDocument,
    "\n    query getUserActivityFeedbackFlat (\n        $filter: UserActivityFeedbackFilter\n        $orderBy: [UserActivityFeedbackOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userActivityFeedbackCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserActivityFeedbackFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserActivityFeedbackFlatDocument,
    "\n    query getUserActivityResultFlat (\n        $filter: UserActivityResultFilter\n        $orderBy: [UserActivityResultOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userActivityResultCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserActivityResultFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserActivityResultFlatDocument,
    "\n    query getUserHistoryFlat (\n        $filter: UserHistoryFilter\n        $orderBy: [UserHistoryOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userHistoryCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserHistoryFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserHistoryFlatDocument,
    "\n    query getUserLessonResultFlat (\n        $filter: UserLessonResultFilter\n        $orderBy: [UserLessonResultOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userLessonResultCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserLessonResultFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserLessonResultFlatDocument,
    "\n    query getUserProfileFlat (\n        $filter: UserProfileFilter\n        $orderBy: [UserProfileOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userProfileCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserProfileFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserProfileFlatDocument,
    "\n    query getUserSettingFlat (\n        $filter: UserSettingFilter\n        $orderBy: [UserSettingOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSettingCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSettingFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserSettingFlatDocument,
    "\n    query getUserSkillFlat (\n        $filter: UserSkillFilter\n        $orderBy: [UserSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserSkillFlatDocument,
    "\n    query getUserSkillSysdataFlat (\n        $filter: UserSkillSysdataFilter\n        $orderBy: [UserSkillSysdataOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSkillSysdataCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSkillSysdataFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserSkillSysdataFlatDocument,
    "\n    query getUserTourFlat (\n        $filter: UserTourFilter\n        $orderBy: [UserTourOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userTourCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserTourFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserTourFlatDocument,
    "\n    query getMemberAuthorizationFlatSlow (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    ...MemberAuthorizationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetMemberAuthorizationFlatSlowDocument,
    "\n    query getOperationLogFlatSlow (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    ...OperationLogFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetOperationLogFlatSlowDocument,
    "\n    query getMemberAuthorizationFilteredTotalCount (\n        $filter: MemberAuthorizationFilter\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n        ) {\n            totalCount\n        }\n    }\n": types.GetMemberAuthorizationFilteredTotalCountDocument,
    "\n    query getOperationLogFilteredTotalCount (\n        $filter: OperationLogFilter\n    ) {\n        operationLogCollection (\n            filter: $filter\n        ) {\n            totalCount\n        }\n    }\n": types.GetOperationLogFilteredTotalCountDocument,
    "\n    query getMemberAuthorizationIdsOnly (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetMemberAuthorizationIdsOnlyDocument,
    "\n    query getOperationLogIdsOnly (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetOperationLogIdsOnlyDocument,
    "\nquery getActivityFeedback($filter: UserActivityFeedbackFilter, $orderBy: [UserActivityFeedbackOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    userActivityFeedbackCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n        edges {\n        node {\n            nodeId\n                id\n                value\n                description\n                metadata\n                createdDate\n                updatedDate\n                createdBy\n                updatedBy\n                activity {\n                    nodeId\n                    id\n                }\n            }\n        }\n    }\n}\n": types.GetActivityFeedbackDocument,
    "\nquery getActivityResultsDeep($filter: UserActivityResultFilter, $orderBy: [UserActivityResultOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor, $actSkillFilter: ActivitySkillFilter, $actSkillOrderBy: [ActivitySkillOrderBy!], $actSkillFirst: Int, $actSkillLast: Int, $actSkillBefore: Cursor, $actSkillAfter: Cursor) {\n    userActivityResultCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...UserActivityResultFlatFrag \n          activity {\n            nodeId\n            id\n            name\n            type\n            typeConfig\n            source\n            metadata\n            createdDate\n            updatedDate\n            createdBy\n            updatedBy\n            activitySkillCollection(filter: $actSkillFilter, orderBy: $actSkillOrderBy, first: $actSkillFirst, last: $actSkillLast, before: $actSkillBefore, after: $actSkillAfter) {\n              edges {\n                node {\n                  nodeId\n                  id\n                  type\n                  weight\n                  metadata\n                  createdDate\n                  updatedDate\n                  createdBy\n                  updatedBy\n                  skill {\n                    nodeId\n                    id\n                    name\n                    type\n                    metadata\n                    createdDate\n                    updatedDate\n                    createdBy\n                    updatedBy\n                    contextPage\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetActivityResultsDeepDocument,
    "\n    query getActivitySetWithActivities (\n        $filter: ActivitySetFilter\n        $orderBy: [ActivitySetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterActivity: ActivitySetActivityFilter\n        $orderByActivity: [ActivitySetActivityOrderBy!]\n        $firstActivity: Int\n        $afterActivity: Cursor\n        $lastActivity: Int\n    ) {\n        activitySetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetFlatFrag\n                    activitySetActivityCollection(\n                        filter: $filterActivity\n                        orderBy: $orderByActivity\n                        first: $firstActivity\n                        after: $afterActivity\n                        last: $lastActivity\n                    )\n                    {\n                        edges {\n                            node {\n                                ...ActivitySetActivityFlatFrag\n                                activity {\n                                    ...ActivityFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetActivitySetWithActivitiesDocument,
    "\nquery getActivitySkillWithResults($first: Int, $last: Int, $before: Cursor, $after: Cursor, $filter: ActivitySkillFilter, $orderBy: ActivitySkillOrderBy, $userActivityResultCollectionFilter: UserActivityResultFilter) {\n    activitySkillCollection(first: $first, last: $last, before: $before, after: $after, filter: $filter) {\n      edges {\n        node {\n          skill {\n            id\n            name\n            description\n          }\n          activity {\n            ...ActivityFlatFrag\n            userActivityResultCollection(filter: $userActivityResultCollectionFilter) {\n              edges {\n                node {\n                  ...UserActivityResultFlatFrag\n                  activity {\n                    id\n                    type\n                  }\n                }\n              },\n              pageInfo {\n                ...PageInfoFlatFrag\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n    }\n  }\n": types.GetActivitySkillWithResultsDocument,
    "\n    query getBotSetWithBots (\n        $filter: BotSetFilter\n        $orderBy: [BotSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterBot: BotSetBotFilter\n        $orderByBot: [BotSetBotOrderBy!]\n        $firstBot: Int\n        $afterBot: Cursor\n        $lastBot: Int\n    ) {\n        botSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetFlatFrag\n                    botSetBotCollection(\n                        filter: $filterBot\n                        orderBy: $orderByBot\n                        first: $firstBot\n                        after: $afterBot\n                        last: $lastBot\n                    )\n                    {\n                        edges {\n                            node {\n                                ...BotSetBotFlatFrag\n                                bot {\n                                    ...BotFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetBotSetWithBotsDocument,
    "\n    query getChaptersDeep($filter: ChapterFilter, $orderBy: [ChapterOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n        chapterCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n            edges {\n                node {\n                    ...ChapterFlatFrag\n                    lessonCollection {\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                        edges {\n                            node {\n                                ...LessonFlatFrag\n                                lessonActivityCollection {\n                                    edges {\n                                        node {\n                                            ...LessonActivityFlatFrag\n                                            activity {\n                                                ...ActivityFlatFrag\n                                                userActivityResultCollection {\n                                                    edges {\n                                                        node {\n                                                            ...UserActivityResultFlatFrag\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                rsnUser {\n                                    ...RsnUserFlatFrag\n                                }\n                            }\n                        }\n                    }\n                    rsnUser {\n                        ...RsnUserFlatFrag\n                    }\n                }\n            }\n        }\n    }\n": types.GetChaptersDeepDocument,
    "\n    query getLessonsDeep($filter: LessonFilter, $orderBy: [LessonOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n        lessonCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n            edges {\n                node {\n                    ...LessonFlatFrag\n                    lessonActivityCollection {\n                        edges {\n                            node {\n                                ...LessonActivityFlatFrag\n                                activity {\n                                    ...ActivityFlatFrag\n                                    userActivityResultCollection {\n                                        edges {\n                                            node {\n                                                ...UserActivityResultFlatFrag\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    rsnUser {\n                        ...RsnUserFlatFrag\n                    }\n                }\n            }\n        }\n    }\n": types.GetLessonsDeepDocument,
    "\nquery getUserLessonResultsDeep($filter: UserLessonResultFilter, $orderBy: [UserLessonResultOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    userLessonResultCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...UserLessonResultFlatFrag\n          lesson {\n            ...LessonFlatFrag\n            lessonActivityCollection {\n                edges {\n                    node {\n                        ...LessonActivityFlatFrag\n                        activity {\n                            ...ActivityFlatFrag\n                            userActivityResultCollection {\n                                edges {\n                                    node {\n                                        ...UserActivityResultFlatFrag\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n          rsnUser {\n            ...RsnUserFlatFrag\n          }\n        }\n      }\n    }\n  }\n": types.GetUserLessonResultsDeepDocument,
    "\nquery getLessonSessionDeep($filter: LessonSessionFilter, $orderBy: [LessonSessionOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    lessonSessionCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...LessonSessionFlatFrag\n          lesson {\n            ...LessonFlatFrag\n            lessonActivityCollection {\n                edges {\n                    node {\n                        ...LessonActivityFlatFrag\n                        activity {\n                            ...ActivityFlatFrag\n                            userActivityResultCollection {\n                                edges {\n                                    node {\n                                        ...UserActivityResultFlatFrag\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n          rsnUser {\n            ...RsnUserFlatFrag\n          }\n        }\n      }\n    }\n  }\n": types.GetLessonSessionDeepDocument,
    "\nquery getMemauthDeep($filter: MemauthFilter, $orderBy: [MemauthOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    memauthCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...MemauthFlatFrag\n          principalUser {\n            ...RsnUserFlatFrag\n          }\n          principalBot {\n            ...BotFlatFrag\n          }\n          principalGroup {\n            ...GroupFlatFrag\n          }\n        }\n      }\n    }\n  }\n": types.GetMemauthDeepDocument,
    "\nquery getMemberAuthorizationDeep($filter: MemberAuthorizationFilter, $orderBy: [MemberAuthorizationOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    memberAuthorizationCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...MemberAuthorizationFlatFrag\n          bot {\n            ...BotFlatFrag\n          }\n        }\n      }\n    }\n  }\n": types.GetMemberAuthorizationDeepDocument,
    "\n    query getRsnPageAndDirectChildren (\n        $filter: RsnPageFilter\n        $orderBy: [RsnPageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageFlatFrag\n                    rsnPageCollection {\n                        edges {\n                            node {\n                                ...RsnPageFlatFrag\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetRsnPageAndDirectChildrenDocument,
    "\n    query getSkillDefault (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    userSkillCollection {\n                        edges {\n                            node {\n                                ...UserSkillFlatFrag\n                            }\n                        }\n                    }\n                    downstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                upstream {\n                                    \n                                    ...SkillFlatFrag\n                                    \n                                }\n                            }\n                        }\n                    }\n                    upstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                downstream {\n                                    \n                                     ...SkillFlatFrag\n                                        \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillDefaultDocument,
    "\nquery getResourceDeep (\n    $filter: ResourceFilter\n    $orderBy: [ResourceOrderBy!]\n    $first: Int\n    $after: Cursor\n    $last: Int\n    $before: Cursor\n) {\n    resourceCollection (\n        filter: $filter\n        orderBy: $orderBy\n        first: $first\n        after: $after\n        last: $last\n        before: $before\n    ) {\n        edges {\n            node {\n                ...ResourceFlatFrag\n                parentPodcast {\n                    ...PodcastFlatFrag\n                }\n                parentSkill {\n                    ...SkillFlatFrag\n                }\n                childSnip {\n                    ...SnipFlatFrag\n                }\n                childPage {\n                    ...RsnPageFlatFrag\n                }\n            }\n        }\n        pageInfo {\n            ...PageInfoFlatFrag\n        }\n    }\n}\n": types.GetResourceDeepDocument,
    "\n    query getSkillSetWithSkills (\n        $filter: SkillSetFilter\n        $orderBy: [SkillSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterSkillSetSkill: SkillSetSkillFilter\n        $afterSkillSetSkill: Cursor\n        $beforeSkillSetSkill: Cursor\n        $lastSkillSetSkill: Int\n        $firstSkillSetSkill: Int\n        $orderBySkillSetSkill: [SkillSetSkillOrderBy!]\n    ) {\n        skillSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetFlatFrag\n                    skillSetSkillCollection (\n                        filter: $filterSkillSetSkill\n                        orderBy: $orderBySkillSetSkill\n                        first: $firstSkillSetSkill\n                        after: $afterSkillSetSkill\n                        last: $lastSkillSetSkill\n                        before: $beforeSkillSetSkill\n                    ) {\n                        edges {\n                            node {\n                                ...SkillSetSkillFlatFrag\n                                skill {\n                                    ...SkillFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillSetWithSkillsDocument,
    "\n    query getSkillUpstreamDeep (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    downstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                upstream {\n                                    ...SkillFlatFrag\n                                    downstreamOf {\n                                        edges {\n                                            node {\n                                                ...SkillLinkFlatFrag\n                                                upstream {\n                                                    ...SkillFlatFrag\n                                                    downstreamOf {\n                                                        edges {\n                                                            node {\n                                                                ...SkillLinkFlatFrag\n                                                                upstream {\n                                                                    ...SkillFlatFrag\n                                                                    downstreamOf {\n                                                                        edges {\n                                                                            node {\n                                                                                ...SkillLinkFlatFrag\n                                                                                upstream {\n                                                                                    ...SkillFlatFrag\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillUpstreamDeepDocument,
    "\n    query getSkillUserSkill (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    userSkillCollection {\n                        edges {\n                            node {\n                                ...UserSkillFlatFrag\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetSkillUserSkillDocument,
    "\n    query getUserHistoryDeep (\n        $filter: UserHistoryFilter\n        $orderBy: [UserHistoryOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userHistoryCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserHistoryFlatFrag\n                    skill {\n                        ...SkillFlatFrag\n                    }\n                    podcast {\n                        ...PodcastFlatFrag\n                    }\n                    course {\n                        ...CourseFlatFrag\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n": types.GetUserHistoryDeepDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AccessLevelPermissionFlatFrag on AccessLevelPermission {\n        accessLevel\n        createdBy\n        createdDate\n        entityType\n        permissionCode\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment AccessLevelPermissionFlatFrag on AccessLevelPermission {\n        accessLevel\n        createdBy\n        createdDate\n        entityType\n        permissionCode\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AccessLevelPermissionDeleteResponseFlatFrag on AccessLevelPermissionDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment AccessLevelPermissionDeleteResponseFlatFrag on AccessLevelPermissionDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AccessLevelPermissionEdgeFlatFrag on AccessLevelPermissionEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment AccessLevelPermissionEdgeFlatFrag on AccessLevelPermissionEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AccessLevelPermissionInsertResponseFlatFrag on AccessLevelPermissionInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment AccessLevelPermissionInsertResponseFlatFrag on AccessLevelPermissionInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AccessLevelPermissionUpdateResponseFlatFrag on AccessLevelPermissionUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment AccessLevelPermissionUpdateResponseFlatFrag on AccessLevelPermissionUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivityFlatFrag on Activity {\n        createdBy\n        createdDate\n        genInstructions\n        generatedForSkillPaths\n        generatedForUser\n        id\n        metadata\n        name\n        source\n        type\n        typeConfig\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ActivityFlatFrag on Activity {\n        createdBy\n        createdDate\n        genInstructions\n        generatedForSkillPaths\n        generatedForUser\n        id\n        metadata\n        name\n        source\n        type\n        typeConfig\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivityDeleteResponseFlatFrag on ActivityDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivityDeleteResponseFlatFrag on ActivityDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivityEdgeFlatFrag on ActivityEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ActivityEdgeFlatFrag on ActivityEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivityInsertResponseFlatFrag on ActivityInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivityInsertResponseFlatFrag on ActivityInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetFlatFrag on ActivitySet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ActivitySetFlatFrag on ActivitySet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetActivityFlatFrag on ActivitySetActivity {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ActivitySetActivityFlatFrag on ActivitySetActivity {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetActivityDeleteResponseFlatFrag on ActivitySetActivityDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySetActivityDeleteResponseFlatFrag on ActivitySetActivityDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetActivityEdgeFlatFrag on ActivitySetActivityEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ActivitySetActivityEdgeFlatFrag on ActivitySetActivityEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetActivityInsertResponseFlatFrag on ActivitySetActivityInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySetActivityInsertResponseFlatFrag on ActivitySetActivityInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetActivityUpdateResponseFlatFrag on ActivitySetActivityUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySetActivityUpdateResponseFlatFrag on ActivitySetActivityUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetDeleteResponseFlatFrag on ActivitySetDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySetDeleteResponseFlatFrag on ActivitySetDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetEdgeFlatFrag on ActivitySetEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ActivitySetEdgeFlatFrag on ActivitySetEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetInsertResponseFlatFrag on ActivitySetInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySetInsertResponseFlatFrag on ActivitySetInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySetUpdateResponseFlatFrag on ActivitySetUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySetUpdateResponseFlatFrag on ActivitySetUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySkillFlatFrag on ActivitySkill {\n        createdBy\n        createdDate\n        id\n        metadata\n        type\n        updatedBy\n        updatedDate\n        weight\n    }\n"): (typeof documents)["\n    fragment ActivitySkillFlatFrag on ActivitySkill {\n        createdBy\n        createdDate\n        id\n        metadata\n        type\n        updatedBy\n        updatedDate\n        weight\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySkillDeleteResponseFlatFrag on ActivitySkillDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySkillDeleteResponseFlatFrag on ActivitySkillDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySkillEdgeFlatFrag on ActivitySkillEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ActivitySkillEdgeFlatFrag on ActivitySkillEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySkillInsertResponseFlatFrag on ActivitySkillInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySkillInsertResponseFlatFrag on ActivitySkillInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivitySkillUpdateResponseFlatFrag on ActivitySkillUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivitySkillUpdateResponseFlatFrag on ActivitySkillUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ActivityUpdateResponseFlatFrag on ActivityUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ActivityUpdateResponseFlatFrag on ActivityUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AnalyzerFlatFrag on Analyzer {\n        aiJsonschema\n        aiPrompt\n        createdBy\n        createdDate\n        description\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment AnalyzerFlatFrag on Analyzer {\n        aiJsonschema\n        aiPrompt\n        createdBy\n        createdDate\n        description\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AnalyzerDeleteResponseFlatFrag on AnalyzerDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment AnalyzerDeleteResponseFlatFrag on AnalyzerDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AnalyzerEdgeFlatFrag on AnalyzerEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment AnalyzerEdgeFlatFrag on AnalyzerEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AnalyzerInsertResponseFlatFrag on AnalyzerInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment AnalyzerInsertResponseFlatFrag on AnalyzerInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AnalyzerUpdateResponseFlatFrag on AnalyzerUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment AnalyzerUpdateResponseFlatFrag on AnalyzerUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BlogPostFlatFrag on BlogPost {\n        content\n        createdBy\n        createdDate\n        id\n        isPublished\n        shortDescription\n        slug\n        tags\n        title\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment BlogPostFlatFrag on BlogPost {\n        content\n        createdBy\n        createdDate\n        id\n        isPublished\n        shortDescription\n        slug\n        tags\n        title\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BlogPostDeleteResponseFlatFrag on BlogPostDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BlogPostDeleteResponseFlatFrag on BlogPostDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BlogPostEdgeFlatFrag on BlogPostEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment BlogPostEdgeFlatFrag on BlogPostEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BlogPostInsertResponseFlatFrag on BlogPostInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BlogPostInsertResponseFlatFrag on BlogPostInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BlogPostUpdateResponseFlatFrag on BlogPostUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BlogPostUpdateResponseFlatFrag on BlogPostUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotFlatFrag on Bot {\n        avatarEmoji\n        avatarUrl\n        createdBy\n        createdDate\n        description\n        extras\n        forkedFrom\n        id\n        isPublic\n        name\n        prompt\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment BotFlatFrag on Bot {\n        avatarEmoji\n        avatarUrl\n        createdBy\n        createdDate\n        description\n        extras\n        forkedFrom\n        id\n        isPublic\n        name\n        prompt\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotDeleteResponseFlatFrag on BotDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotDeleteResponseFlatFrag on BotDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotEdgeFlatFrag on BotEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment BotEdgeFlatFrag on BotEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotInsertResponseFlatFrag on BotInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotInsertResponseFlatFrag on BotInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetFlatFrag on BotSet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment BotSetFlatFrag on BotSet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetBotFlatFrag on BotSetBot {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment BotSetBotFlatFrag on BotSetBot {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetBotDeleteResponseFlatFrag on BotSetBotDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotSetBotDeleteResponseFlatFrag on BotSetBotDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetBotEdgeFlatFrag on BotSetBotEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment BotSetBotEdgeFlatFrag on BotSetBotEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetBotInsertResponseFlatFrag on BotSetBotInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotSetBotInsertResponseFlatFrag on BotSetBotInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetBotUpdateResponseFlatFrag on BotSetBotUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotSetBotUpdateResponseFlatFrag on BotSetBotUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetDeleteResponseFlatFrag on BotSetDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotSetDeleteResponseFlatFrag on BotSetDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetEdgeFlatFrag on BotSetEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment BotSetEdgeFlatFrag on BotSetEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetInsertResponseFlatFrag on BotSetInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotSetInsertResponseFlatFrag on BotSetInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotSetUpdateResponseFlatFrag on BotSetUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotSetUpdateResponseFlatFrag on BotSetUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment BotUpdateResponseFlatFrag on BotUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment BotUpdateResponseFlatFrag on BotUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChapterFlatFrag on Chapter {\n        createdBy\n        createdDate\n        forUser\n        icon\n        id\n        metadata\n        name\n        rootSkill\n        rootSkillOrder\n        rootSkillPath\n        summary\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ChapterFlatFrag on Chapter {\n        createdBy\n        createdDate\n        forUser\n        icon\n        id\n        metadata\n        name\n        rootSkill\n        rootSkillOrder\n        rootSkillPath\n        summary\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChapterDeleteResponseFlatFrag on ChapterDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChapterDeleteResponseFlatFrag on ChapterDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChapterEdgeFlatFrag on ChapterEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ChapterEdgeFlatFrag on ChapterEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChapterInsertResponseFlatFrag on ChapterInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChapterInsertResponseFlatFrag on ChapterInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChapterUpdateResponseFlatFrag on ChapterUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChapterUpdateResponseFlatFrag on ChapterUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatFlatFrag on Chat {\n        autoTitle\n        createdBy\n        createdDate\n        id\n        isPublic\n        manualTitle\n        topic\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ChatFlatFrag on Chat {\n        autoTitle\n        createdBy\n        createdDate\n        id\n        isPublic\n        manualTitle\n        topic\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatDeleteResponseFlatFrag on ChatDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChatDeleteResponseFlatFrag on ChatDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatEdgeFlatFrag on ChatEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ChatEdgeFlatFrag on ChatEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatInsertResponseFlatFrag on ChatInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChatInsertResponseFlatFrag on ChatInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatMessageFlatFrag on ChatMessage {\n        body\n        botId\n        chatId\n        contextData\n        contextId\n        contextType\n        createdBy\n        createdByBot\n        createdDate\n        functionCall\n        id\n        role\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ChatMessageFlatFrag on ChatMessage {\n        body\n        botId\n        chatId\n        contextData\n        contextId\n        contextType\n        createdBy\n        createdByBot\n        createdDate\n        functionCall\n        id\n        role\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatMessageDeleteResponseFlatFrag on ChatMessageDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChatMessageDeleteResponseFlatFrag on ChatMessageDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatMessageEdgeFlatFrag on ChatMessageEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ChatMessageEdgeFlatFrag on ChatMessageEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatMessageInsertResponseFlatFrag on ChatMessageInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChatMessageInsertResponseFlatFrag on ChatMessageInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatMessageUpdateResponseFlatFrag on ChatMessageUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChatMessageUpdateResponseFlatFrag on ChatMessageUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChatUpdateResponseFlatFrag on ChatUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChatUpdateResponseFlatFrag on ChatUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChromeExtensionEventFlatFrag on ChromeExtensionEvent {\n        createdBy\n        createdDate\n        eventType\n        id\n        metadata\n        pageTitle\n        rsnUserId\n        siteUrl\n        updatedBy\n        updatedDate\n        viewedAt\n    }\n"): (typeof documents)["\n    fragment ChromeExtensionEventFlatFrag on ChromeExtensionEvent {\n        createdBy\n        createdDate\n        eventType\n        id\n        metadata\n        pageTitle\n        rsnUserId\n        siteUrl\n        updatedBy\n        updatedDate\n        viewedAt\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChromeExtensionEventDeleteResponseFlatFrag on ChromeExtensionEventDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChromeExtensionEventDeleteResponseFlatFrag on ChromeExtensionEventDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChromeExtensionEventEdgeFlatFrag on ChromeExtensionEventEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ChromeExtensionEventEdgeFlatFrag on ChromeExtensionEventEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChromeExtensionEventInsertResponseFlatFrag on ChromeExtensionEventInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChromeExtensionEventInsertResponseFlatFrag on ChromeExtensionEventInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ChromeExtensionEventUpdateResponseFlatFrag on ChromeExtensionEventUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ChromeExtensionEventUpdateResponseFlatFrag on ChromeExtensionEventUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseFlatFrag on Course {\n        coverImageUrl\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        name\n        rootSkill\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment CourseFlatFrag on Course {\n        coverImageUrl\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        name\n        rootSkill\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseDeleteResponseFlatFrag on CourseDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment CourseDeleteResponseFlatFrag on CourseDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseEdgeFlatFrag on CourseEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment CourseEdgeFlatFrag on CourseEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseInsertResponseFlatFrag on CourseInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment CourseInsertResponseFlatFrag on CourseInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseLessonFlatFrag on CourseLesson {\n        createdBy\n        createdDate\n        id\n        orderIndex\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment CourseLessonFlatFrag on CourseLesson {\n        createdBy\n        createdDate\n        id\n        orderIndex\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseLessonDeleteResponseFlatFrag on CourseLessonDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment CourseLessonDeleteResponseFlatFrag on CourseLessonDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseLessonEdgeFlatFrag on CourseLessonEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment CourseLessonEdgeFlatFrag on CourseLessonEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseLessonInsertResponseFlatFrag on CourseLessonInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment CourseLessonInsertResponseFlatFrag on CourseLessonInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseLessonUpdateResponseFlatFrag on CourseLessonUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment CourseLessonUpdateResponseFlatFrag on CourseLessonUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CourseUpdateResponseFlatFrag on CourseUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment CourseUpdateResponseFlatFrag on CourseUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EmailSubscriptionFlatFrag on EmailSubscription {\n        accountUpdates\n        createdBy\n        createdDate\n        edtechUpdates\n        id\n        newsletter\n        productUpdates\n        resendSynced\n        rsnUserId\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment EmailSubscriptionFlatFrag on EmailSubscription {\n        accountUpdates\n        createdBy\n        createdDate\n        edtechUpdates\n        id\n        newsletter\n        productUpdates\n        resendSynced\n        rsnUserId\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EmailSubscriptionDeleteResponseFlatFrag on EmailSubscriptionDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EmailSubscriptionDeleteResponseFlatFrag on EmailSubscriptionDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EmailSubscriptionEdgeFlatFrag on EmailSubscriptionEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment EmailSubscriptionEdgeFlatFrag on EmailSubscriptionEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EmailSubscriptionInsertResponseFlatFrag on EmailSubscriptionInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EmailSubscriptionInsertResponseFlatFrag on EmailSubscriptionInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EmailSubscriptionUpdateResponseFlatFrag on EmailSubscriptionUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EmailSubscriptionUpdateResponseFlatFrag on EmailSubscriptionUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityFlatFrag on Entity {\n        createdBy\n        createdDate\n        eData\n        eName\n        eType\n        id\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment EntityFlatFrag on Entity {\n        createdBy\n        createdDate\n        eData\n        eName\n        eType\n        id\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityDeleteResponseFlatFrag on EntityDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityDeleteResponseFlatFrag on EntityDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityEdgeFlatFrag on EntityEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment EntityEdgeFlatFrag on EntityEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityInsertResponseFlatFrag on EntityInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityInsertResponseFlatFrag on EntityInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeFlatFrag on EntityType {\n        abbreviation\n        createdBy\n        createdDate\n        entityType\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment EntityTypeFlatFrag on EntityType {\n        abbreviation\n        createdBy\n        createdDate\n        entityType\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeAccessLevelFlatFrag on EntityTypeAccessLevel {\n        accessLevel\n        createdBy\n        createdDate\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment EntityTypeAccessLevelFlatFrag on EntityTypeAccessLevel {\n        accessLevel\n        createdBy\n        createdDate\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeAccessLevelDeleteResponseFlatFrag on EntityTypeAccessLevelDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityTypeAccessLevelDeleteResponseFlatFrag on EntityTypeAccessLevelDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeAccessLevelEdgeFlatFrag on EntityTypeAccessLevelEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment EntityTypeAccessLevelEdgeFlatFrag on EntityTypeAccessLevelEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeAccessLevelInsertResponseFlatFrag on EntityTypeAccessLevelInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityTypeAccessLevelInsertResponseFlatFrag on EntityTypeAccessLevelInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeAccessLevelUpdateResponseFlatFrag on EntityTypeAccessLevelUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityTypeAccessLevelUpdateResponseFlatFrag on EntityTypeAccessLevelUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeDeleteResponseFlatFrag on EntityTypeDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityTypeDeleteResponseFlatFrag on EntityTypeDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeEdgeFlatFrag on EntityTypeEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment EntityTypeEdgeFlatFrag on EntityTypeEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeInsertResponseFlatFrag on EntityTypeInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityTypeInsertResponseFlatFrag on EntityTypeInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityTypeUpdateResponseFlatFrag on EntityTypeUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityTypeUpdateResponseFlatFrag on EntityTypeUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment EntityUpdateResponseFlatFrag on EntityUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment EntityUpdateResponseFlatFrag on EntityUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GoalFlatFrag on Goal {\n        completedDate\n        createdBy\n        createdDate\n        dueDate\n        id\n        isCompleted\n        metadata\n        name\n        type\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment GoalFlatFrag on Goal {\n        completedDate\n        createdBy\n        createdDate\n        dueDate\n        id\n        isCompleted\n        metadata\n        name\n        type\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GoalDeleteResponseFlatFrag on GoalDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment GoalDeleteResponseFlatFrag on GoalDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GoalEdgeFlatFrag on GoalEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment GoalEdgeFlatFrag on GoalEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GoalInsertResponseFlatFrag on GoalInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment GoalInsertResponseFlatFrag on GoalInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GoalUpdateResponseFlatFrag on GoalUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment GoalUpdateResponseFlatFrag on GoalUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GroupFlatFrag on Group {\n        groupName\n        id\n    }\n"): (typeof documents)["\n    fragment GroupFlatFrag on Group {\n        groupName\n        id\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GroupDeleteResponseFlatFrag on GroupDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment GroupDeleteResponseFlatFrag on GroupDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GroupEdgeFlatFrag on GroupEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment GroupEdgeFlatFrag on GroupEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GroupInsertResponseFlatFrag on GroupInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment GroupInsertResponseFlatFrag on GroupInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GroupUpdateResponseFlatFrag on GroupUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment GroupUpdateResponseFlatFrag on GroupUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationFlatFrag on Integration {\n        createdBy\n        createdDate\n        forUser\n        id\n        lastSynced\n        metadata\n        type\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment IntegrationFlatFrag on Integration {\n        createdBy\n        createdDate\n        forUser\n        id\n        lastSynced\n        metadata\n        type\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationDeleteResponseFlatFrag on IntegrationDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment IntegrationDeleteResponseFlatFrag on IntegrationDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationEdgeFlatFrag on IntegrationEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment IntegrationEdgeFlatFrag on IntegrationEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationInsertResponseFlatFrag on IntegrationInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment IntegrationInsertResponseFlatFrag on IntegrationInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationTokenFlatFrag on IntegrationToken {\n        createdBy\n        createdDate\n        id\n        integrationId\n        metadata\n        token\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment IntegrationTokenFlatFrag on IntegrationToken {\n        createdBy\n        createdDate\n        id\n        integrationId\n        metadata\n        token\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationTokenDeleteResponseFlatFrag on IntegrationTokenDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment IntegrationTokenDeleteResponseFlatFrag on IntegrationTokenDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationTokenEdgeFlatFrag on IntegrationTokenEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment IntegrationTokenEdgeFlatFrag on IntegrationTokenEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationTokenInsertResponseFlatFrag on IntegrationTokenInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment IntegrationTokenInsertResponseFlatFrag on IntegrationTokenInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationTokenUpdateResponseFlatFrag on IntegrationTokenUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment IntegrationTokenUpdateResponseFlatFrag on IntegrationTokenUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment IntegrationUpdateResponseFlatFrag on IntegrationUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment IntegrationUpdateResponseFlatFrag on IntegrationUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment JournalFlatFrag on Journal {\n        createdBy\n        createdDate\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment JournalFlatFrag on Journal {\n        createdBy\n        createdDate\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment JournalDeleteResponseFlatFrag on JournalDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment JournalDeleteResponseFlatFrag on JournalDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment JournalEdgeFlatFrag on JournalEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment JournalEdgeFlatFrag on JournalEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment JournalInsertResponseFlatFrag on JournalInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment JournalInsertResponseFlatFrag on JournalInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment JournalUpdateResponseFlatFrag on JournalUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment JournalUpdateResponseFlatFrag on JournalUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonFlatFrag on Lesson {\n        chapterOrder\n        createdBy\n        createdDate\n        forUser\n        icon\n        id\n        lessonType\n        metadata\n        name\n        rootSkill\n        rootSkillPath\n        snipIds\n        summary\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment LessonFlatFrag on Lesson {\n        chapterOrder\n        createdBy\n        createdDate\n        forUser\n        icon\n        id\n        lessonType\n        metadata\n        name\n        rootSkill\n        rootSkillPath\n        snipIds\n        summary\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonActivityFlatFrag on LessonActivity {\n        createdBy\n        createdDate\n        id\n        metadata\n        position\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment LessonActivityFlatFrag on LessonActivity {\n        createdBy\n        createdDate\n        id\n        metadata\n        position\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonActivityDeleteResponseFlatFrag on LessonActivityDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonActivityDeleteResponseFlatFrag on LessonActivityDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonActivityEdgeFlatFrag on LessonActivityEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment LessonActivityEdgeFlatFrag on LessonActivityEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonActivityInsertResponseFlatFrag on LessonActivityInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonActivityInsertResponseFlatFrag on LessonActivityInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonActivityUpdateResponseFlatFrag on LessonActivityUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonActivityUpdateResponseFlatFrag on LessonActivityUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonDeleteResponseFlatFrag on LessonDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonDeleteResponseFlatFrag on LessonDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonEdgeFlatFrag on LessonEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment LessonEdgeFlatFrag on LessonEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonInsertResponseFlatFrag on LessonInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonInsertResponseFlatFrag on LessonInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonSessionFlatFrag on LessonSession {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n        user\n    }\n"): (typeof documents)["\n    fragment LessonSessionFlatFrag on LessonSession {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n        user\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonSessionDeleteResponseFlatFrag on LessonSessionDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonSessionDeleteResponseFlatFrag on LessonSessionDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonSessionEdgeFlatFrag on LessonSessionEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment LessonSessionEdgeFlatFrag on LessonSessionEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonSessionInsertResponseFlatFrag on LessonSessionInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonSessionInsertResponseFlatFrag on LessonSessionInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonSessionUpdateResponseFlatFrag on LessonSessionUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonSessionUpdateResponseFlatFrag on LessonSessionUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment LessonUpdateResponseFlatFrag on LessonUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment LessonUpdateResponseFlatFrag on LessonUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemauthFlatFrag on Memauth {\n        accessLevel\n        createdBy\n        createdDate\n        id\n        isPublic\n        principalBotId\n        principalGroupId\n        principalId\n        principalType\n        principalUserId\n        resourceEntityId\n        resourceEntityType\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment MemauthFlatFrag on Memauth {\n        accessLevel\n        createdBy\n        createdDate\n        id\n        isPublic\n        principalBotId\n        principalGroupId\n        principalId\n        principalType\n        principalUserId\n        resourceEntityId\n        resourceEntityType\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemauthDeleteResponseFlatFrag on MemauthDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment MemauthDeleteResponseFlatFrag on MemauthDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemauthEdgeFlatFrag on MemauthEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment MemauthEdgeFlatFrag on MemauthEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemauthInsertResponseFlatFrag on MemauthInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment MemauthInsertResponseFlatFrag on MemauthInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemauthUpdateResponseFlatFrag on MemauthUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment MemauthUpdateResponseFlatFrag on MemauthUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemberAuthorizationFlatFrag on MemberAuthorization {\n        accessLevel\n        agentId\n        agentType\n        botId\n        createdBy\n        createdDate\n        grantedBotId\n        grantedChatId\n        grantedEntityId\n        grantedEntityType\n        grantedGroupId\n        groupId\n        id\n        isBaseAccessLevel\n        updatedBy\n        updatedDate\n        userId\n    }\n"): (typeof documents)["\n    fragment MemberAuthorizationFlatFrag on MemberAuthorization {\n        accessLevel\n        agentId\n        agentType\n        botId\n        createdBy\n        createdDate\n        grantedBotId\n        grantedChatId\n        grantedEntityId\n        grantedEntityType\n        grantedGroupId\n        groupId\n        id\n        isBaseAccessLevel\n        updatedBy\n        updatedDate\n        userId\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemberAuthorizationConnectionFlatFrag on MemberAuthorizationConnection {\n        totalCount\n    }\n"): (typeof documents)["\n    fragment MemberAuthorizationConnectionFlatFrag on MemberAuthorizationConnection {\n        totalCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemberAuthorizationDeleteResponseFlatFrag on MemberAuthorizationDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment MemberAuthorizationDeleteResponseFlatFrag on MemberAuthorizationDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemberAuthorizationEdgeFlatFrag on MemberAuthorizationEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment MemberAuthorizationEdgeFlatFrag on MemberAuthorizationEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemberAuthorizationInsertResponseFlatFrag on MemberAuthorizationInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment MemberAuthorizationInsertResponseFlatFrag on MemberAuthorizationInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MemberAuthorizationUpdateResponseFlatFrag on MemberAuthorizationUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment MemberAuthorizationUpdateResponseFlatFrag on MemberAuthorizationUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MutationFlatFrag on Mutation {\n        anonKey\n        baseUrl\n        cleanup\n        createRsnUserFromToken\n        currentUserHasPassword\n        currtest\n        dbPrivs\n        envName\n        httpResetCurlopt\n        inTodo\n        isAdmin\n        numFailed\n        popFromPodcastQueue\n        reasonoteAppUrl\n        tablePrivs\n        throwIfNotLocal\n        todo\n    }\n"): (typeof documents)["\n    fragment MutationFlatFrag on Mutation {\n        anonKey\n        baseUrl\n        cleanup\n        createRsnUserFromToken\n        currentUserHasPassword\n        currtest\n        dbPrivs\n        envName\n        httpResetCurlopt\n        inTodo\n        isAdmin\n        numFailed\n        popFromPodcastQueue\n        reasonoteAppUrl\n        tablePrivs\n        throwIfNotLocal\n        todo\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment NotificationSubscriptionFlatFrag on NotificationSubscription {\n        createdBy\n        createdDate\n        dailyStreak\n        id\n        rsnUserId\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment NotificationSubscriptionFlatFrag on NotificationSubscription {\n        createdBy\n        createdDate\n        dailyStreak\n        id\n        rsnUserId\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment NotificationSubscriptionDeleteResponseFlatFrag on NotificationSubscriptionDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment NotificationSubscriptionDeleteResponseFlatFrag on NotificationSubscriptionDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment NotificationSubscriptionEdgeFlatFrag on NotificationSubscriptionEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment NotificationSubscriptionEdgeFlatFrag on NotificationSubscriptionEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment NotificationSubscriptionInsertResponseFlatFrag on NotificationSubscriptionInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment NotificationSubscriptionInsertResponseFlatFrag on NotificationSubscriptionInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment NotificationSubscriptionUpdateResponseFlatFrag on NotificationSubscriptionUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment NotificationSubscriptionUpdateResponseFlatFrag on NotificationSubscriptionUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OperationLogFlatFrag on OperationLog {\n        entityId\n        eventDate\n        id\n        jsonbDiff\n        operationLevel\n        operationType\n        operationWhen\n        processStatus\n        processedDate\n        rsnUserId\n        tableName\n        triggerName\n    }\n"): (typeof documents)["\n    fragment OperationLogFlatFrag on OperationLog {\n        entityId\n        eventDate\n        id\n        jsonbDiff\n        operationLevel\n        operationType\n        operationWhen\n        processStatus\n        processedDate\n        rsnUserId\n        tableName\n        triggerName\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OperationLogConnectionFlatFrag on OperationLogConnection {\n        totalCount\n    }\n"): (typeof documents)["\n    fragment OperationLogConnectionFlatFrag on OperationLogConnection {\n        totalCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OperationLogDeleteResponseFlatFrag on OperationLogDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment OperationLogDeleteResponseFlatFrag on OperationLogDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OperationLogEdgeFlatFrag on OperationLogEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment OperationLogEdgeFlatFrag on OperationLogEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OperationLogInsertResponseFlatFrag on OperationLogInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment OperationLogInsertResponseFlatFrag on OperationLogInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OperationLogUpdateResponseFlatFrag on OperationLogUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment OperationLogUpdateResponseFlatFrag on OperationLogUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PageInfoFlatFrag on PageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n    }\n"): (typeof documents)["\n    fragment PageInfoFlatFrag on PageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PartialSkillFlatFrag on PartialSkill {\n        createdBy\n        createdDate\n        emoji\n        goals\n        id\n        pages\n        skillDescription\n        skillId\n        skillName\n        updatedBy\n        updatedDate\n        userInput\n        userLevel\n    }\n"): (typeof documents)["\n    fragment PartialSkillFlatFrag on PartialSkill {\n        createdBy\n        createdDate\n        emoji\n        goals\n        id\n        pages\n        skillDescription\n        skillId\n        skillName\n        updatedBy\n        updatedDate\n        userInput\n        userLevel\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PartialSkillDeleteResponseFlatFrag on PartialSkillDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PartialSkillDeleteResponseFlatFrag on PartialSkillDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PartialSkillEdgeFlatFrag on PartialSkillEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PartialSkillEdgeFlatFrag on PartialSkillEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PartialSkillInsertResponseFlatFrag on PartialSkillInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PartialSkillInsertResponseFlatFrag on PartialSkillInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PartialSkillUpdateResponseFlatFrag on PartialSkillUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PartialSkillUpdateResponseFlatFrag on PartialSkillUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PermissionFlatFrag on Permission {\n        createdBy\n        createdDate\n        description\n        permissionCode\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment PermissionFlatFrag on Permission {\n        createdBy\n        createdDate\n        description\n        permissionCode\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PermissionDeleteResponseFlatFrag on PermissionDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PermissionDeleteResponseFlatFrag on PermissionDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PermissionEdgeFlatFrag on PermissionEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PermissionEdgeFlatFrag on PermissionEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PermissionInsertResponseFlatFrag on PermissionInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PermissionInsertResponseFlatFrag on PermissionInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PermissionUpdateResponseFlatFrag on PermissionUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PermissionUpdateResponseFlatFrag on PermissionUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastFlatFrag on Podcast {\n        createdBy\n        createdDate\n        forSkillPath\n        forUser\n        id\n        isSharedVersion\n        metadata\n        originalPodcastId\n        outline\n        podcastType\n        specialInstructions\n        title\n        topic\n        transcript\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment PodcastFlatFrag on Podcast {\n        createdBy\n        createdDate\n        forSkillPath\n        forUser\n        id\n        isSharedVersion\n        metadata\n        originalPodcastId\n        outline\n        podcastType\n        specialInstructions\n        title\n        topic\n        transcript\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastAudioFlatFrag on PodcastAudio {\n        audioFile\n        createdBy\n        createdDate\n        id\n        podcastLineId\n        speed\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment PodcastAudioFlatFrag on PodcastAudio {\n        audioFile\n        createdBy\n        createdDate\n        id\n        podcastLineId\n        speed\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastAudioDeleteResponseFlatFrag on PodcastAudioDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastAudioDeleteResponseFlatFrag on PodcastAudioDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastAudioEdgeFlatFrag on PodcastAudioEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PodcastAudioEdgeFlatFrag on PodcastAudioEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastAudioInsertResponseFlatFrag on PodcastAudioInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastAudioInsertResponseFlatFrag on PodcastAudioInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastAudioUpdateResponseFlatFrag on PodcastAudioUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastAudioUpdateResponseFlatFrag on PodcastAudioUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastDeleteResponseFlatFrag on PodcastDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastDeleteResponseFlatFrag on PodcastDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastEdgeFlatFrag on PodcastEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PodcastEdgeFlatFrag on PodcastEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastInsertResponseFlatFrag on PodcastInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastInsertResponseFlatFrag on PodcastInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastLineFlatFrag on PodcastLine {\n        createdBy\n        createdDate\n        dialogue\n        digDeeperTopics\n        id\n        lineNumber\n        podcastId\n        speaker\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment PodcastLineFlatFrag on PodcastLine {\n        createdBy\n        createdDate\n        dialogue\n        digDeeperTopics\n        id\n        lineNumber\n        podcastId\n        speaker\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastLineDeleteResponseFlatFrag on PodcastLineDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastLineDeleteResponseFlatFrag on PodcastLineDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastLineEdgeFlatFrag on PodcastLineEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PodcastLineEdgeFlatFrag on PodcastLineEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastLineInsertResponseFlatFrag on PodcastLineInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastLineInsertResponseFlatFrag on PodcastLineInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastLineUpdateResponseFlatFrag on PodcastLineUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastLineUpdateResponseFlatFrag on PodcastLineUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastQueueItemFlatFrag on PodcastQueueItem {\n        createdAt\n        forUser\n        id\n        podcastId\n        position\n    }\n"): (typeof documents)["\n    fragment PodcastQueueItemFlatFrag on PodcastQueueItem {\n        createdAt\n        forUser\n        id\n        podcastId\n        position\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastQueueItemDeleteResponseFlatFrag on PodcastQueueItemDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastQueueItemDeleteResponseFlatFrag on PodcastQueueItemDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastQueueItemEdgeFlatFrag on PodcastQueueItemEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PodcastQueueItemEdgeFlatFrag on PodcastQueueItemEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastQueueItemInsertResponseFlatFrag on PodcastQueueItemInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastQueueItemInsertResponseFlatFrag on PodcastQueueItemInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastQueueItemUpdateResponseFlatFrag on PodcastQueueItemUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastQueueItemUpdateResponseFlatFrag on PodcastQueueItemUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PodcastUpdateResponseFlatFrag on PodcastUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PodcastUpdateResponseFlatFrag on PodcastUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PushNotificationSubscriptionFlatFrag on PushNotificationSubscription {\n        auth\n        createdBy\n        createdDate\n        endpoint\n        id\n        lastUsedDate\n        p256dh\n        rsnUserId\n        updatedBy\n        updatedDate\n        userAgent\n    }\n"): (typeof documents)["\n    fragment PushNotificationSubscriptionFlatFrag on PushNotificationSubscription {\n        auth\n        createdBy\n        createdDate\n        endpoint\n        id\n        lastUsedDate\n        p256dh\n        rsnUserId\n        updatedBy\n        updatedDate\n        userAgent\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PushNotificationSubscriptionDeleteResponseFlatFrag on PushNotificationSubscriptionDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PushNotificationSubscriptionDeleteResponseFlatFrag on PushNotificationSubscriptionDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PushNotificationSubscriptionEdgeFlatFrag on PushNotificationSubscriptionEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment PushNotificationSubscriptionEdgeFlatFrag on PushNotificationSubscriptionEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PushNotificationSubscriptionInsertResponseFlatFrag on PushNotificationSubscriptionInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PushNotificationSubscriptionInsertResponseFlatFrag on PushNotificationSubscriptionInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PushNotificationSubscriptionUpdateResponseFlatFrag on PushNotificationSubscriptionUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment PushNotificationSubscriptionUpdateResponseFlatFrag on PushNotificationSubscriptionUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment QueryFlatFrag on Query {\n        currentRsnUserId\n        isVerbose\n        osName\n        pgVersion\n        pgVersionNum\n        pgtapVersion\n        rsnSystemUserAuthId\n        rsnSystemUserId\n    }\n"): (typeof documents)["\n    fragment QueryFlatFrag on Query {\n        currentRsnUserId\n        isVerbose\n        osName\n        pgVersion\n        pgVersionNum\n        pgtapVersion\n        rsnSystemUserAuthId\n        rsnSystemUserId\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReferenceFlatFrag on Reference {\n        createdBy\n        createdDate\n        id\n        isExact\n        rawContent\n        refId\n        rsnVecId\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ReferenceFlatFrag on Reference {\n        createdBy\n        createdDate\n        id\n        isExact\n        rawContent\n        refId\n        rsnVecId\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReferenceDeleteResponseFlatFrag on ReferenceDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ReferenceDeleteResponseFlatFrag on ReferenceDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReferenceEdgeFlatFrag on ReferenceEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ReferenceEdgeFlatFrag on ReferenceEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReferenceInsertResponseFlatFrag on ReferenceInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ReferenceInsertResponseFlatFrag on ReferenceInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReferenceUpdateResponseFlatFrag on ReferenceUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ReferenceUpdateResponseFlatFrag on ReferenceUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ResourceFlatFrag on Resource {\n        childPageId\n        childSnipId\n        createdBy\n        createdDate\n        id\n        metadata\n        parentCourseId\n        parentPodcastId\n        parentSkillId\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment ResourceFlatFrag on Resource {\n        childPageId\n        childSnipId\n        createdBy\n        createdDate\n        id\n        metadata\n        parentCourseId\n        parentPodcastId\n        parentSkillId\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ResourceDeleteResponseFlatFrag on ResourceDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ResourceDeleteResponseFlatFrag on ResourceDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ResourceEdgeFlatFrag on ResourceEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment ResourceEdgeFlatFrag on ResourceEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ResourceInsertResponseFlatFrag on ResourceInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ResourceInsertResponseFlatFrag on ResourceInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ResourceUpdateResponseFlatFrag on ResourceUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment ResourceUpdateResponseFlatFrag on ResourceUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageFlatFrag on RsnPage {\n        body\n        bodyLength\n        bodySha256\n        createdBy\n        createdDate\n        description\n        fileType\n        id\n        metadata\n        name\n        originalFilename\n        parent\n        storagePath\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment RsnPageFlatFrag on RsnPage {\n        body\n        bodyLength\n        bodySha256\n        createdBy\n        createdDate\n        description\n        fileType\n        id\n        metadata\n        name\n        originalFilename\n        parent\n        storagePath\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageDeleteResponseFlatFrag on RsnPageDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnPageDeleteResponseFlatFrag on RsnPageDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageEdgeFlatFrag on RsnPageEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnPageEdgeFlatFrag on RsnPageEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageInsertResponseFlatFrag on RsnPageInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnPageInsertResponseFlatFrag on RsnPageInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageUpdateResponseFlatFrag on RsnPageUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnPageUpdateResponseFlatFrag on RsnPageUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageVectorFlatFrag on RsnPageVector {\n        createdBy\n        createdDate\n        embedding\n        id\n        rawContent\n        rsnPageId\n        rsnPageOffset\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment RsnPageVectorFlatFrag on RsnPageVector {\n        createdBy\n        createdDate\n        embedding\n        id\n        rawContent\n        rsnPageId\n        rsnPageOffset\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageVectorDeleteResponseFlatFrag on RsnPageVectorDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnPageVectorDeleteResponseFlatFrag on RsnPageVectorDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageVectorEdgeFlatFrag on RsnPageVectorEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnPageVectorEdgeFlatFrag on RsnPageVectorEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageVectorInsertResponseFlatFrag on RsnPageVectorInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnPageVectorInsertResponseFlatFrag on RsnPageVectorInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnPageVectorUpdateResponseFlatFrag on RsnPageVectorUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnPageVectorUpdateResponseFlatFrag on RsnPageVectorUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserFlatFrag on RsnUser {\n        authEmail\n        authId\n        familyName\n        firstLoginDate\n        givenName\n        id\n        lastLoginDate\n        role\n        timezone\n        username\n    }\n"): (typeof documents)["\n    fragment RsnUserFlatFrag on RsnUser {\n        authEmail\n        authId\n        familyName\n        firstLoginDate\n        givenName\n        id\n        lastLoginDate\n        role\n        timezone\n        username\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserDeleteResponseFlatFrag on RsnUserDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnUserDeleteResponseFlatFrag on RsnUserDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserEdgeFlatFrag on RsnUserEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnUserEdgeFlatFrag on RsnUserEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserInsertResponseFlatFrag on RsnUserInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnUserInsertResponseFlatFrag on RsnUserInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserSysdataFlatFrag on RsnUserSysdata {\n        authEmail\n        authId\n        dailyXpGoalCelebrationTime\n        extraLicenseInfo\n        hasOnboarded\n        id\n        rsnUserId\n    }\n"): (typeof documents)["\n    fragment RsnUserSysdataFlatFrag on RsnUserSysdata {\n        authEmail\n        authId\n        dailyXpGoalCelebrationTime\n        extraLicenseInfo\n        hasOnboarded\n        id\n        rsnUserId\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserSysdataDeleteResponseFlatFrag on RsnUserSysdataDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnUserSysdataDeleteResponseFlatFrag on RsnUserSysdataDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserSysdataEdgeFlatFrag on RsnUserSysdataEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnUserSysdataEdgeFlatFrag on RsnUserSysdataEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserSysdataInsertResponseFlatFrag on RsnUserSysdataInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnUserSysdataInsertResponseFlatFrag on RsnUserSysdataInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserSysdataUpdateResponseFlatFrag on RsnUserSysdataUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnUserSysdataUpdateResponseFlatFrag on RsnUserSysdataUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnUserUpdateResponseFlatFrag on RsnUserUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnUserUpdateResponseFlatFrag on RsnUserUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecFlatFrag on RsnVec {\n        colname\n        colpath\n        colpathStr\n        contentOffset\n        createdBy\n        createdDate\n        embedding\n        embeddingOpenaiTextEmbedding3Small\n        id\n        rawContent\n        refId\n        tablename\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment RsnVecFlatFrag on RsnVec {\n        colname\n        colpath\n        colpathStr\n        contentOffset\n        createdBy\n        createdDate\n        embedding\n        embeddingOpenaiTextEmbedding3Small\n        id\n        rawContent\n        refId\n        tablename\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecConfigFlatFrag on RsnVecConfig {\n        colname\n        colpath\n        id\n        tablename\n    }\n"): (typeof documents)["\n    fragment RsnVecConfigFlatFrag on RsnVecConfig {\n        colname\n        colpath\n        id\n        tablename\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecConfigDeleteResponseFlatFrag on RsnVecConfigDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecConfigDeleteResponseFlatFrag on RsnVecConfigDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecConfigEdgeFlatFrag on RsnVecConfigEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnVecConfigEdgeFlatFrag on RsnVecConfigEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecConfigInsertResponseFlatFrag on RsnVecConfigInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecConfigInsertResponseFlatFrag on RsnVecConfigInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecConfigUpdateResponseFlatFrag on RsnVecConfigUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecConfigUpdateResponseFlatFrag on RsnVecConfigUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecDeleteResponseFlatFrag on RsnVecDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecDeleteResponseFlatFrag on RsnVecDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecEdgeFlatFrag on RsnVecEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnVecEdgeFlatFrag on RsnVecEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecInsertResponseFlatFrag on RsnVecInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecInsertResponseFlatFrag on RsnVecInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecQueueFlatFrag on RsnVecQueue {\n        colname\n        colpath\n        colpathStr\n        createdBy\n        createdDate\n        id\n        refId\n        tablename\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment RsnVecQueueFlatFrag on RsnVecQueue {\n        colname\n        colpath\n        colpathStr\n        createdBy\n        createdDate\n        id\n        refId\n        tablename\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecQueueDeleteResponseFlatFrag on RsnVecQueueDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecQueueDeleteResponseFlatFrag on RsnVecQueueDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecQueueEdgeFlatFrag on RsnVecQueueEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsnVecQueueEdgeFlatFrag on RsnVecQueueEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecQueueInsertResponseFlatFrag on RsnVecQueueInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecQueueInsertResponseFlatFrag on RsnVecQueueInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecQueueUpdateResponseFlatFrag on RsnVecQueueUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecQueueUpdateResponseFlatFrag on RsnVecQueueUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsnVecUpdateResponseFlatFrag on RsnVecUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsnVecUpdateResponseFlatFrag on RsnVecUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsncoreTableAbbreviationsFlatFrag on RsncoreTableAbbreviations {\n        abbreviation\n        id\n        tablename\n    }\n"): (typeof documents)["\n    fragment RsncoreTableAbbreviationsFlatFrag on RsncoreTableAbbreviations {\n        abbreviation\n        id\n        tablename\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsncoreTableAbbreviationsDeleteResponseFlatFrag on RsncoreTableAbbreviationsDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsncoreTableAbbreviationsDeleteResponseFlatFrag on RsncoreTableAbbreviationsDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsncoreTableAbbreviationsEdgeFlatFrag on RsncoreTableAbbreviationsEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment RsncoreTableAbbreviationsEdgeFlatFrag on RsncoreTableAbbreviationsEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsncoreTableAbbreviationsInsertResponseFlatFrag on RsncoreTableAbbreviationsInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsncoreTableAbbreviationsInsertResponseFlatFrag on RsncoreTableAbbreviationsInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RsncoreTableAbbreviationsUpdateResponseFlatFrag on RsncoreTableAbbreviationsUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment RsncoreTableAbbreviationsUpdateResponseFlatFrag on RsncoreTableAbbreviationsUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillFlatFrag on Skill {\n        colorinfo\n        contextPage\n        createdBy\n        createdDate\n        description\n        domain\n        emoji\n        forUser\n        generatedFromSkillPath\n        id\n        metadata\n        name\n        nameAndDescription\n        processingState\n        referenceIds\n        rootSkillId\n        rsnVecIds\n        type\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment SkillFlatFrag on Skill {\n        colorinfo\n        contextPage\n        createdBy\n        createdDate\n        description\n        domain\n        emoji\n        forUser\n        generatedFromSkillPath\n        id\n        metadata\n        name\n        nameAndDescription\n        processingState\n        referenceIds\n        rootSkillId\n        rsnVecIds\n        type\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillDeleteResponseFlatFrag on SkillDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillDeleteResponseFlatFrag on SkillDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillEdgeFlatFrag on SkillEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment SkillEdgeFlatFrag on SkillEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillInsertResponseFlatFrag on SkillInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillInsertResponseFlatFrag on SkillInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillLinkFlatFrag on SkillLink {\n        createdBy\n        createdDate\n        downstreamSkill\n        id\n        metadata\n        type\n        updatedBy\n        updatedDate\n        upstreamSkill\n        weight\n    }\n"): (typeof documents)["\n    fragment SkillLinkFlatFrag on SkillLink {\n        createdBy\n        createdDate\n        downstreamSkill\n        id\n        metadata\n        type\n        updatedBy\n        updatedDate\n        upstreamSkill\n        weight\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillLinkDeleteResponseFlatFrag on SkillLinkDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillLinkDeleteResponseFlatFrag on SkillLinkDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillLinkEdgeFlatFrag on SkillLinkEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment SkillLinkEdgeFlatFrag on SkillLinkEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillLinkInsertResponseFlatFrag on SkillLinkInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillLinkInsertResponseFlatFrag on SkillLinkInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillLinkUpdateResponseFlatFrag on SkillLinkUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillLinkUpdateResponseFlatFrag on SkillLinkUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillModuleFlatFrag on SkillModule {\n        childrenIds\n        createdBy\n        createdDate\n        id\n        name\n        position\n        rootSkillId\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment SkillModuleFlatFrag on SkillModule {\n        childrenIds\n        createdBy\n        createdDate\n        id\n        name\n        position\n        rootSkillId\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillModuleDeleteResponseFlatFrag on SkillModuleDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillModuleDeleteResponseFlatFrag on SkillModuleDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillModuleEdgeFlatFrag on SkillModuleEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment SkillModuleEdgeFlatFrag on SkillModuleEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillModuleInsertResponseFlatFrag on SkillModuleInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillModuleInsertResponseFlatFrag on SkillModuleInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillModuleUpdateResponseFlatFrag on SkillModuleUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillModuleUpdateResponseFlatFrag on SkillModuleUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetFlatFrag on SkillSet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment SkillSetFlatFrag on SkillSet {\n        createdBy\n        createdDate\n        description\n        forUser\n        id\n        metadata\n        name\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetDeleteResponseFlatFrag on SkillSetDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillSetDeleteResponseFlatFrag on SkillSetDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetEdgeFlatFrag on SkillSetEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment SkillSetEdgeFlatFrag on SkillSetEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetInsertResponseFlatFrag on SkillSetInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillSetInsertResponseFlatFrag on SkillSetInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetSkillFlatFrag on SkillSetSkill {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment SkillSetSkillFlatFrag on SkillSetSkill {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetSkillDeleteResponseFlatFrag on SkillSetSkillDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillSetSkillDeleteResponseFlatFrag on SkillSetSkillDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetSkillEdgeFlatFrag on SkillSetSkillEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment SkillSetSkillEdgeFlatFrag on SkillSetSkillEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetSkillInsertResponseFlatFrag on SkillSetSkillInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillSetSkillInsertResponseFlatFrag on SkillSetSkillInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetSkillUpdateResponseFlatFrag on SkillSetSkillUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillSetSkillUpdateResponseFlatFrag on SkillSetSkillUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillSetUpdateResponseFlatFrag on SkillSetUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillSetUpdateResponseFlatFrag on SkillSetUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SkillUpdateResponseFlatFrag on SkillUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SkillUpdateResponseFlatFrag on SkillUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SnipFlatFrag on Snip {\n        autoLastUpdatedDate\n        autoParamUpdateAttempts\n        autoParamUpdateState\n        autoSummary\n        autoTags\n        autoTitle\n        createdBy\n        createdDate\n        extractionError\n        extractionInfo\n        extractionState\n        id\n        metadata\n        name\n        owner\n        pageId\n        rootSkill\n        sourceIntegration\n        sourceUniqId\n        sourceUrl\n        textContent\n        type\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment SnipFlatFrag on Snip {\n        autoLastUpdatedDate\n        autoParamUpdateAttempts\n        autoParamUpdateState\n        autoSummary\n        autoTags\n        autoTitle\n        createdBy\n        createdDate\n        extractionError\n        extractionInfo\n        extractionState\n        id\n        metadata\n        name\n        owner\n        pageId\n        rootSkill\n        sourceIntegration\n        sourceUniqId\n        sourceUrl\n        textContent\n        type\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SnipDeleteResponseFlatFrag on SnipDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SnipDeleteResponseFlatFrag on SnipDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SnipEdgeFlatFrag on SnipEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment SnipEdgeFlatFrag on SnipEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SnipInsertResponseFlatFrag on SnipInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SnipInsertResponseFlatFrag on SnipInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment SnipUpdateResponseFlatFrag on SnipUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment SnipUpdateResponseFlatFrag on SnipUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeCustomersFlatFrag on StripeCustomers {\n        attrs\n        created\n        description\n        email\n        id\n        name\n    }\n"): (typeof documents)["\n    fragment StripeCustomersFlatFrag on StripeCustomers {\n        attrs\n        created\n        description\n        email\n        id\n        name\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeCustomersDeleteResponseFlatFrag on StripeCustomersDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeCustomersDeleteResponseFlatFrag on StripeCustomersDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeCustomersEdgeFlatFrag on StripeCustomersEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment StripeCustomersEdgeFlatFrag on StripeCustomersEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeCustomersInsertResponseFlatFrag on StripeCustomersInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeCustomersInsertResponseFlatFrag on StripeCustomersInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeCustomersUpdateResponseFlatFrag on StripeCustomersUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeCustomersUpdateResponseFlatFrag on StripeCustomersUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeProductsFlatFrag on StripeProducts {\n        active\n        attrs\n        created\n        defaultPrice\n        description\n        id\n        name\n        updated\n    }\n"): (typeof documents)["\n    fragment StripeProductsFlatFrag on StripeProducts {\n        active\n        attrs\n        created\n        defaultPrice\n        description\n        id\n        name\n        updated\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeProductsDeleteResponseFlatFrag on StripeProductsDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeProductsDeleteResponseFlatFrag on StripeProductsDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeProductsEdgeFlatFrag on StripeProductsEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment StripeProductsEdgeFlatFrag on StripeProductsEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeProductsInsertResponseFlatFrag on StripeProductsInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeProductsInsertResponseFlatFrag on StripeProductsInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeProductsUpdateResponseFlatFrag on StripeProductsUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeProductsUpdateResponseFlatFrag on StripeProductsUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeSubscriptionsFlatFrag on StripeSubscriptions {\n        attrs\n        canceledAt\n        cancellationReason\n        currency\n        currentPeriodEnd\n        currentPeriodStart\n        customer\n        id\n        items\n        status\n        stripeProductId\n    }\n"): (typeof documents)["\n    fragment StripeSubscriptionsFlatFrag on StripeSubscriptions {\n        attrs\n        canceledAt\n        cancellationReason\n        currency\n        currentPeriodEnd\n        currentPeriodStart\n        customer\n        id\n        items\n        status\n        stripeProductId\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeSubscriptionsDeleteResponseFlatFrag on StripeSubscriptionsDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeSubscriptionsDeleteResponseFlatFrag on StripeSubscriptionsDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeSubscriptionsEdgeFlatFrag on StripeSubscriptionsEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment StripeSubscriptionsEdgeFlatFrag on StripeSubscriptionsEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeSubscriptionsInsertResponseFlatFrag on StripeSubscriptionsInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeSubscriptionsInsertResponseFlatFrag on StripeSubscriptionsInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment StripeSubscriptionsUpdateResponseFlatFrag on StripeSubscriptionsUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment StripeSubscriptionsUpdateResponseFlatFrag on StripeSubscriptionsUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityFeedbackFlatFrag on UserActivityFeedback {\n        createdBy\n        createdDate\n        description\n        id\n        metadata\n        tags\n        updatedBy\n        updatedDate\n        value\n    }\n"): (typeof documents)["\n    fragment UserActivityFeedbackFlatFrag on UserActivityFeedback {\n        createdBy\n        createdDate\n        description\n        id\n        metadata\n        tags\n        updatedBy\n        updatedDate\n        value\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityFeedbackDeleteResponseFlatFrag on UserActivityFeedbackDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserActivityFeedbackDeleteResponseFlatFrag on UserActivityFeedbackDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityFeedbackEdgeFlatFrag on UserActivityFeedbackEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserActivityFeedbackEdgeFlatFrag on UserActivityFeedbackEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityFeedbackInsertResponseFlatFrag on UserActivityFeedbackInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserActivityFeedbackInsertResponseFlatFrag on UserActivityFeedbackInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityFeedbackUpdateResponseFlatFrag on UserActivityFeedbackUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserActivityFeedbackUpdateResponseFlatFrag on UserActivityFeedbackUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityResultFlatFrag on UserActivityResult {\n        createdBy\n        createdDate\n        id\n        lessonSessionId\n        metadata\n        resultData\n        score\n        scoreNormalized\n        skipReason\n        skipped\n        submitResult\n        updatedBy\n        updatedDate\n        user\n    }\n"): (typeof documents)["\n    fragment UserActivityResultFlatFrag on UserActivityResult {\n        createdBy\n        createdDate\n        id\n        lessonSessionId\n        metadata\n        resultData\n        score\n        scoreNormalized\n        skipReason\n        skipped\n        submitResult\n        updatedBy\n        updatedDate\n        user\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityResultDeleteResponseFlatFrag on UserActivityResultDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserActivityResultDeleteResponseFlatFrag on UserActivityResultDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityResultEdgeFlatFrag on UserActivityResultEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserActivityResultEdgeFlatFrag on UserActivityResultEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityResultInsertResponseFlatFrag on UserActivityResultInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserActivityResultInsertResponseFlatFrag on UserActivityResultInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserActivityResultUpdateResponseFlatFrag on UserActivityResultUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserActivityResultUpdateResponseFlatFrag on UserActivityResultUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserHistoryFlatFrag on UserHistory {\n        courseId\n        createdBy\n        createdDate\n        id\n        podcastId\n        rsnUserId\n        skillIdVisited\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment UserHistoryFlatFrag on UserHistory {\n        courseId\n        createdBy\n        createdDate\n        id\n        podcastId\n        rsnUserId\n        skillIdVisited\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserHistoryDeleteResponseFlatFrag on UserHistoryDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserHistoryDeleteResponseFlatFrag on UserHistoryDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserHistoryEdgeFlatFrag on UserHistoryEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserHistoryEdgeFlatFrag on UserHistoryEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserHistoryInsertResponseFlatFrag on UserHistoryInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserHistoryInsertResponseFlatFrag on UserHistoryInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserHistoryUpdateResponseFlatFrag on UserHistoryUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserHistoryUpdateResponseFlatFrag on UserHistoryUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserLessonResultFlatFrag on UserLessonResult {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n        user\n    }\n"): (typeof documents)["\n    fragment UserLessonResultFlatFrag on UserLessonResult {\n        createdBy\n        createdDate\n        id\n        metadata\n        updatedBy\n        updatedDate\n        user\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserLessonResultDeleteResponseFlatFrag on UserLessonResultDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserLessonResultDeleteResponseFlatFrag on UserLessonResultDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserLessonResultEdgeFlatFrag on UserLessonResultEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserLessonResultEdgeFlatFrag on UserLessonResultEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserLessonResultInsertResponseFlatFrag on UserLessonResultInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserLessonResultInsertResponseFlatFrag on UserLessonResultInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserLessonResultUpdateResponseFlatFrag on UserLessonResultUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserLessonResultUpdateResponseFlatFrag on UserLessonResultUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserProfileFlatFrag on UserProfile {\n        badges\n        bio\n        createdBy\n        createdDate\n        displayName\n        id\n        pinnedItems\n        profileImageUrl\n        rsnUserId\n        showActivityGraph\n        updatedBy\n        updatedDate\n        username\n    }\n"): (typeof documents)["\n    fragment UserProfileFlatFrag on UserProfile {\n        badges\n        bio\n        createdBy\n        createdDate\n        displayName\n        id\n        pinnedItems\n        profileImageUrl\n        rsnUserId\n        showActivityGraph\n        updatedBy\n        updatedDate\n        username\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserProfileDeleteResponseFlatFrag on UserProfileDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserProfileDeleteResponseFlatFrag on UserProfileDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserProfileEdgeFlatFrag on UserProfileEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserProfileEdgeFlatFrag on UserProfileEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserProfileInsertResponseFlatFrag on UserProfileInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserProfileInsertResponseFlatFrag on UserProfileInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserProfileUpdateResponseFlatFrag on UserProfileUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserProfileUpdateResponseFlatFrag on UserProfileUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSettingFlatFrag on UserSetting {\n        aiAboutMe\n        aiInstructions\n        createdBy\n        createdDate\n        dailyXpGoal\n        feelings\n        id\n        metadata\n        podcastPlaybackSpeed\n        temporaryDailyXpGoal\n        temporaryDailyXpGoalSetDatetime\n        uiTheme\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment UserSettingFlatFrag on UserSetting {\n        aiAboutMe\n        aiInstructions\n        createdBy\n        createdDate\n        dailyXpGoal\n        feelings\n        id\n        metadata\n        podcastPlaybackSpeed\n        temporaryDailyXpGoal\n        temporaryDailyXpGoalSetDatetime\n        uiTheme\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSettingDeleteResponseFlatFrag on UserSettingDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSettingDeleteResponseFlatFrag on UserSettingDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSettingEdgeFlatFrag on UserSettingEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserSettingEdgeFlatFrag on UserSettingEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSettingInsertResponseFlatFrag on UserSettingInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSettingInsertResponseFlatFrag on UserSettingInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSettingUpdateResponseFlatFrag on UserSettingUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSettingUpdateResponseFlatFrag on UserSettingUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillFlatFrag on UserSkill {\n        createdBy\n        createdDate\n        currentChapter\n        id\n        interestReasons\n        metadata\n        selfAssignedLevel\n        specifics\n        updatedBy\n        updatedDate\n    }\n"): (typeof documents)["\n    fragment UserSkillFlatFrag on UserSkill {\n        createdBy\n        createdDate\n        currentChapter\n        id\n        interestReasons\n        metadata\n        selfAssignedLevel\n        specifics\n        updatedBy\n        updatedDate\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillDeleteResponseFlatFrag on UserSkillDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSkillDeleteResponseFlatFrag on UserSkillDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillEdgeFlatFrag on UserSkillEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserSkillEdgeFlatFrag on UserSkillEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillInsertResponseFlatFrag on UserSkillInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSkillInsertResponseFlatFrag on UserSkillInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillSysdataFlatFrag on UserSkillSysdata {\n        dailyXp\n        highestLevelShown\n        id\n        lastDailyReset\n        practiceScore\n        totalXp\n    }\n"): (typeof documents)["\n    fragment UserSkillSysdataFlatFrag on UserSkillSysdata {\n        dailyXp\n        highestLevelShown\n        id\n        lastDailyReset\n        practiceScore\n        totalXp\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillSysdataDeleteResponseFlatFrag on UserSkillSysdataDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSkillSysdataDeleteResponseFlatFrag on UserSkillSysdataDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillSysdataEdgeFlatFrag on UserSkillSysdataEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserSkillSysdataEdgeFlatFrag on UserSkillSysdataEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillSysdataInsertResponseFlatFrag on UserSkillSysdataInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSkillSysdataInsertResponseFlatFrag on UserSkillSysdataInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillSysdataUpdateResponseFlatFrag on UserSkillSysdataUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSkillSysdataUpdateResponseFlatFrag on UserSkillSysdataUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserSkillUpdateResponseFlatFrag on UserSkillUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserSkillUpdateResponseFlatFrag on UserSkillUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserTourFlatFrag on UserTour {\n        createdBy\n        createdDate\n        id\n        metadata\n        tourName\n        tourState\n        tourStatus\n        updatedBy\n        updatedDate\n        user\n    }\n"): (typeof documents)["\n    fragment UserTourFlatFrag on UserTour {\n        createdBy\n        createdDate\n        id\n        metadata\n        tourName\n        tourState\n        tourStatus\n        updatedBy\n        updatedDate\n        user\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserTourDeleteResponseFlatFrag on UserTourDeleteResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserTourDeleteResponseFlatFrag on UserTourDeleteResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserTourEdgeFlatFrag on UserTourEdge {\n        cursor\n    }\n"): (typeof documents)["\n    fragment UserTourEdgeFlatFrag on UserTourEdge {\n        cursor\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserTourInsertResponseFlatFrag on UserTourInsertResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserTourInsertResponseFlatFrag on UserTourInsertResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UserTourUpdateResponseFlatFrag on UserTourUpdateResponse {\n        affectedCount\n    }\n"): (typeof documents)["\n    fragment UserTourUpdateResponseFlatFrag on UserTourUpdateResponse {\n        affectedCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createAccessLevelPermissionFlat($objects: [AccessLevelPermissionInsertInput!]!) {\n        insertIntoAccessLevelPermissionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...AccessLevelPermissionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createAccessLevelPermissionFlat($objects: [AccessLevelPermissionInsertInput!]!) {\n        insertIntoAccessLevelPermissionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...AccessLevelPermissionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createActivityFlat($objects: [ActivityInsertInput!]!) {\n        insertIntoActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createActivityFlat($objects: [ActivityInsertInput!]!) {\n        insertIntoActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createActivitySetFlat($objects: [ActivitySetInsertInput!]!) {\n        insertIntoActivitySetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySetFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createActivitySetFlat($objects: [ActivitySetInsertInput!]!) {\n        insertIntoActivitySetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySetFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createActivitySetActivityFlat($objects: [ActivitySetActivityInsertInput!]!) {\n        insertIntoActivitySetActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySetActivityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createActivitySetActivityFlat($objects: [ActivitySetActivityInsertInput!]!) {\n        insertIntoActivitySetActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySetActivityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createActivitySkillFlat($objects: [ActivitySkillInsertInput!]!) {\n        insertIntoActivitySkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createActivitySkillFlat($objects: [ActivitySkillInsertInput!]!) {\n        insertIntoActivitySkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ActivitySkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createAnalyzerFlat($objects: [AnalyzerInsertInput!]!) {\n        insertIntoAnalyzerCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...AnalyzerFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createAnalyzerFlat($objects: [AnalyzerInsertInput!]!) {\n        insertIntoAnalyzerCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...AnalyzerFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBlogPostFlat($objects: [BlogPostInsertInput!]!) {\n        insertIntoBlogPostCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BlogPostFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createBlogPostFlat($objects: [BlogPostInsertInput!]!) {\n        insertIntoBlogPostCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BlogPostFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBotFlat($objects: [BotInsertInput!]!) {\n        insertIntoBotCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createBotFlat($objects: [BotInsertInput!]!) {\n        insertIntoBotCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBotSetFlat($objects: [BotSetInsertInput!]!) {\n        insertIntoBotSetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotSetFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createBotSetFlat($objects: [BotSetInsertInput!]!) {\n        insertIntoBotSetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotSetFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBotSetBotFlat($objects: [BotSetBotInsertInput!]!) {\n        insertIntoBotSetBotCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotSetBotFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createBotSetBotFlat($objects: [BotSetBotInsertInput!]!) {\n        insertIntoBotSetBotCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...BotSetBotFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createChapterFlat($objects: [ChapterInsertInput!]!) {\n        insertIntoChapterCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChapterFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createChapterFlat($objects: [ChapterInsertInput!]!) {\n        insertIntoChapterCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChapterFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createChatFlat($objects: [ChatInsertInput!]!) {\n        insertIntoChatCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChatFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createChatFlat($objects: [ChatInsertInput!]!) {\n        insertIntoChatCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChatFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createChatMessageFlat($objects: [ChatMessageInsertInput!]!) {\n        insertIntoChatMessageCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChatMessageFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createChatMessageFlat($objects: [ChatMessageInsertInput!]!) {\n        insertIntoChatMessageCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChatMessageFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createChromeExtensionEventFlat($objects: [ChromeExtensionEventInsertInput!]!) {\n        insertIntoChromeExtensionEventCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChromeExtensionEventFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createChromeExtensionEventFlat($objects: [ChromeExtensionEventInsertInput!]!) {\n        insertIntoChromeExtensionEventCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ChromeExtensionEventFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createCourseFlat($objects: [CourseInsertInput!]!) {\n        insertIntoCourseCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...CourseFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createCourseFlat($objects: [CourseInsertInput!]!) {\n        insertIntoCourseCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...CourseFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createCourseLessonFlat($objects: [CourseLessonInsertInput!]!) {\n        insertIntoCourseLessonCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...CourseLessonFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createCourseLessonFlat($objects: [CourseLessonInsertInput!]!) {\n        insertIntoCourseLessonCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...CourseLessonFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createEmailSubscriptionFlat($objects: [EmailSubscriptionInsertInput!]!) {\n        insertIntoEmailSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EmailSubscriptionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createEmailSubscriptionFlat($objects: [EmailSubscriptionInsertInput!]!) {\n        insertIntoEmailSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EmailSubscriptionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createEntityFlat($objects: [EntityInsertInput!]!) {\n        insertIntoEntityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createEntityFlat($objects: [EntityInsertInput!]!) {\n        insertIntoEntityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createEntityTypeFlat($objects: [EntityTypeInsertInput!]!) {\n        insertIntoEntityTypeCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityTypeFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createEntityTypeFlat($objects: [EntityTypeInsertInput!]!) {\n        insertIntoEntityTypeCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityTypeFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createEntityTypeAccessLevelFlat($objects: [EntityTypeAccessLevelInsertInput!]!) {\n        insertIntoEntityTypeAccessLevelCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityTypeAccessLevelFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createEntityTypeAccessLevelFlat($objects: [EntityTypeAccessLevelInsertInput!]!) {\n        insertIntoEntityTypeAccessLevelCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...EntityTypeAccessLevelFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createGoalFlat($objects: [GoalInsertInput!]!) {\n        insertIntoGoalCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...GoalFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createGoalFlat($objects: [GoalInsertInput!]!) {\n        insertIntoGoalCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...GoalFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createGroupFlat($objects: [GroupInsertInput!]!) {\n        insertIntoGroupCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...GroupFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createGroupFlat($objects: [GroupInsertInput!]!) {\n        insertIntoGroupCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...GroupFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createIntegrationFlat($objects: [IntegrationInsertInput!]!) {\n        insertIntoIntegrationCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...IntegrationFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createIntegrationFlat($objects: [IntegrationInsertInput!]!) {\n        insertIntoIntegrationCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...IntegrationFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createIntegrationTokenFlat($objects: [IntegrationTokenInsertInput!]!) {\n        insertIntoIntegrationTokenCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...IntegrationTokenFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createIntegrationTokenFlat($objects: [IntegrationTokenInsertInput!]!) {\n        insertIntoIntegrationTokenCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...IntegrationTokenFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createJournalFlat($objects: [JournalInsertInput!]!) {\n        insertIntoJournalCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...JournalFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createJournalFlat($objects: [JournalInsertInput!]!) {\n        insertIntoJournalCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...JournalFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createLessonFlat($objects: [LessonInsertInput!]!) {\n        insertIntoLessonCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createLessonFlat($objects: [LessonInsertInput!]!) {\n        insertIntoLessonCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createLessonActivityFlat($objects: [LessonActivityInsertInput!]!) {\n        insertIntoLessonActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonActivityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createLessonActivityFlat($objects: [LessonActivityInsertInput!]!) {\n        insertIntoLessonActivityCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonActivityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createLessonSessionFlat($objects: [LessonSessionInsertInput!]!) {\n        insertIntoLessonSessionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonSessionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createLessonSessionFlat($objects: [LessonSessionInsertInput!]!) {\n        insertIntoLessonSessionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...LessonSessionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createMemauthFlat($objects: [MemauthInsertInput!]!) {\n        insertIntoMemauthCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...MemauthFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createMemauthFlat($objects: [MemauthInsertInput!]!) {\n        insertIntoMemauthCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...MemauthFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createMemberAuthorizationFlat($objects: [MemberAuthorizationInsertInput!]!) {\n        insertIntoMemberAuthorizationCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...MemberAuthorizationFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createMemberAuthorizationFlat($objects: [MemberAuthorizationInsertInput!]!) {\n        insertIntoMemberAuthorizationCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...MemberAuthorizationFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createNotificationSubscriptionFlat($objects: [NotificationSubscriptionInsertInput!]!) {\n        insertIntoNotificationSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...NotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createNotificationSubscriptionFlat($objects: [NotificationSubscriptionInsertInput!]!) {\n        insertIntoNotificationSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...NotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createOperationLogFlat($objects: [OperationLogInsertInput!]!) {\n        insertIntoOperationLogCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...OperationLogFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createOperationLogFlat($objects: [OperationLogInsertInput!]!) {\n        insertIntoOperationLogCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...OperationLogFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPartialSkillFlat($objects: [PartialSkillInsertInput!]!) {\n        insertIntoPartialSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PartialSkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPartialSkillFlat($objects: [PartialSkillInsertInput!]!) {\n        insertIntoPartialSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PartialSkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPermissionFlat($objects: [PermissionInsertInput!]!) {\n        insertIntoPermissionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PermissionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPermissionFlat($objects: [PermissionInsertInput!]!) {\n        insertIntoPermissionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PermissionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPodcastFlat($objects: [PodcastInsertInput!]!) {\n        insertIntoPodcastCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPodcastFlat($objects: [PodcastInsertInput!]!) {\n        insertIntoPodcastCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPodcastAudioFlat($objects: [PodcastAudioInsertInput!]!) {\n        insertIntoPodcastAudioCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastAudioFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPodcastAudioFlat($objects: [PodcastAudioInsertInput!]!) {\n        insertIntoPodcastAudioCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastAudioFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPodcastLineFlat($objects: [PodcastLineInsertInput!]!) {\n        insertIntoPodcastLineCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastLineFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPodcastLineFlat($objects: [PodcastLineInsertInput!]!) {\n        insertIntoPodcastLineCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastLineFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPodcastQueueItemFlat($objects: [PodcastQueueItemInsertInput!]!) {\n        insertIntoPodcastQueueItemCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastQueueItemFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPodcastQueueItemFlat($objects: [PodcastQueueItemInsertInput!]!) {\n        insertIntoPodcastQueueItemCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PodcastQueueItemFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createPushNotificationSubscriptionFlat($objects: [PushNotificationSubscriptionInsertInput!]!) {\n        insertIntoPushNotificationSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PushNotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createPushNotificationSubscriptionFlat($objects: [PushNotificationSubscriptionInsertInput!]!) {\n        insertIntoPushNotificationSubscriptionCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...PushNotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createReferenceFlat($objects: [ReferenceInsertInput!]!) {\n        insertIntoReferenceCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ReferenceFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createReferenceFlat($objects: [ReferenceInsertInput!]!) {\n        insertIntoReferenceCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ReferenceFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createResourceFlat($objects: [ResourceInsertInput!]!) {\n        insertIntoResourceCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ResourceFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createResourceFlat($objects: [ResourceInsertInput!]!) {\n        insertIntoResourceCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...ResourceFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnPageFlat($objects: [RsnPageInsertInput!]!) {\n        insertIntoRsnPageCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnPageFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnPageFlat($objects: [RsnPageInsertInput!]!) {\n        insertIntoRsnPageCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnPageFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnPageVectorFlat($objects: [RsnPageVectorInsertInput!]!) {\n        insertIntoRsnPageVectorCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnPageVectorFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnPageVectorFlat($objects: [RsnPageVectorInsertInput!]!) {\n        insertIntoRsnPageVectorCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnPageVectorFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnUserFlat($objects: [RsnUserInsertInput!]!) {\n        insertIntoRsnUserCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnUserFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnUserFlat($objects: [RsnUserInsertInput!]!) {\n        insertIntoRsnUserCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnUserFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnUserSysdataFlat($objects: [RsnUserSysdataInsertInput!]!) {\n        insertIntoRsnUserSysdataCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnUserSysdataFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnUserSysdataFlat($objects: [RsnUserSysdataInsertInput!]!) {\n        insertIntoRsnUserSysdataCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnUserSysdataFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnVecFlat($objects: [RsnVecInsertInput!]!) {\n        insertIntoRsnVecCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnVecFlat($objects: [RsnVecInsertInput!]!) {\n        insertIntoRsnVecCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnVecConfigFlat($objects: [RsnVecConfigInsertInput!]!) {\n        insertIntoRsnVecConfigCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecConfigFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnVecConfigFlat($objects: [RsnVecConfigInsertInput!]!) {\n        insertIntoRsnVecConfigCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecConfigFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsnVecQueueFlat($objects: [RsnVecQueueInsertInput!]!) {\n        insertIntoRsnVecQueueCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecQueueFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsnVecQueueFlat($objects: [RsnVecQueueInsertInput!]!) {\n        insertIntoRsnVecQueueCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsnVecQueueFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createRsncoreTableAbbreviationsFlat($objects: [RsncoreTableAbbreviationsInsertInput!]!) {\n        insertIntoRsncoreTableAbbreviationsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsncoreTableAbbreviationsFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createRsncoreTableAbbreviationsFlat($objects: [RsncoreTableAbbreviationsInsertInput!]!) {\n        insertIntoRsncoreTableAbbreviationsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...RsncoreTableAbbreviationsFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createSkillFlat($objects: [SkillInsertInput!]!) {\n        insertIntoSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createSkillFlat($objects: [SkillInsertInput!]!) {\n        insertIntoSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createSkillLinkFlat($objects: [SkillLinkInsertInput!]!) {\n        insertIntoSkillLinkCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillLinkFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createSkillLinkFlat($objects: [SkillLinkInsertInput!]!) {\n        insertIntoSkillLinkCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillLinkFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createSkillModuleFlat($objects: [SkillModuleInsertInput!]!) {\n        insertIntoSkillModuleCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillModuleFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createSkillModuleFlat($objects: [SkillModuleInsertInput!]!) {\n        insertIntoSkillModuleCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillModuleFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createSkillSetFlat($objects: [SkillSetInsertInput!]!) {\n        insertIntoSkillSetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillSetFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createSkillSetFlat($objects: [SkillSetInsertInput!]!) {\n        insertIntoSkillSetCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillSetFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createSkillSetSkillFlat($objects: [SkillSetSkillInsertInput!]!) {\n        insertIntoSkillSetSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillSetSkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createSkillSetSkillFlat($objects: [SkillSetSkillInsertInput!]!) {\n        insertIntoSkillSetSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SkillSetSkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createSnipFlat($objects: [SnipInsertInput!]!) {\n        insertIntoSnipCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SnipFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createSnipFlat($objects: [SnipInsertInput!]!) {\n        insertIntoSnipCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...SnipFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createStripeCustomersFlat($objects: [StripeCustomersInsertInput!]!) {\n        insertIntoStripeCustomersCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeCustomersFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createStripeCustomersFlat($objects: [StripeCustomersInsertInput!]!) {\n        insertIntoStripeCustomersCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeCustomersFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createStripeProductsFlat($objects: [StripeProductsInsertInput!]!) {\n        insertIntoStripeProductsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeProductsFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createStripeProductsFlat($objects: [StripeProductsInsertInput!]!) {\n        insertIntoStripeProductsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeProductsFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createStripeSubscriptionsFlat($objects: [StripeSubscriptionsInsertInput!]!) {\n        insertIntoStripeSubscriptionsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeSubscriptionsFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createStripeSubscriptionsFlat($objects: [StripeSubscriptionsInsertInput!]!) {\n        insertIntoStripeSubscriptionsCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...StripeSubscriptionsFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserActivityFeedbackFlat($objects: [UserActivityFeedbackInsertInput!]!) {\n        insertIntoUserActivityFeedbackCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserActivityFeedbackFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserActivityFeedbackFlat($objects: [UserActivityFeedbackInsertInput!]!) {\n        insertIntoUserActivityFeedbackCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserActivityFeedbackFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserActivityResultFlat($objects: [UserActivityResultInsertInput!]!) {\n        insertIntoUserActivityResultCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserActivityResultFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserActivityResultFlat($objects: [UserActivityResultInsertInput!]!) {\n        insertIntoUserActivityResultCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserActivityResultFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserHistoryFlat($objects: [UserHistoryInsertInput!]!) {\n        insertIntoUserHistoryCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserHistoryFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserHistoryFlat($objects: [UserHistoryInsertInput!]!) {\n        insertIntoUserHistoryCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserHistoryFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserLessonResultFlat($objects: [UserLessonResultInsertInput!]!) {\n        insertIntoUserLessonResultCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserLessonResultFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserLessonResultFlat($objects: [UserLessonResultInsertInput!]!) {\n        insertIntoUserLessonResultCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserLessonResultFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserProfileFlat($objects: [UserProfileInsertInput!]!) {\n        insertIntoUserProfileCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserProfileFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserProfileFlat($objects: [UserProfileInsertInput!]!) {\n        insertIntoUserProfileCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserProfileFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserSettingFlat($objects: [UserSettingInsertInput!]!) {\n        insertIntoUserSettingCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSettingFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserSettingFlat($objects: [UserSettingInsertInput!]!) {\n        insertIntoUserSettingCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSettingFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserSkillFlat($objects: [UserSkillInsertInput!]!) {\n        insertIntoUserSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserSkillFlat($objects: [UserSkillInsertInput!]!) {\n        insertIntoUserSkillCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserSkillSysdataFlat($objects: [UserSkillSysdataInsertInput!]!) {\n        insertIntoUserSkillSysdataCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSkillSysdataFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserSkillSysdataFlat($objects: [UserSkillSysdataInsertInput!]!) {\n        insertIntoUserSkillSysdataCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserSkillSysdataFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUserTourFlat($objects: [UserTourInsertInput!]!) {\n        insertIntoUserTourCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserTourFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createUserTourFlat($objects: [UserTourInsertInput!]!) {\n        insertIntoUserTourCollection(objects: $objects) {\n            affectedCount\n            records {\n                ...UserTourFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateAccessLevelPermissionFlat($set: AccessLevelPermissionUpdateInput!, $filter: AccessLevelPermissionFilter, $atMost: Int!) {\n        updateAccessLevelPermissionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...AccessLevelPermissionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateAccessLevelPermissionFlat($set: AccessLevelPermissionUpdateInput!, $filter: AccessLevelPermissionFilter, $atMost: Int!) {\n        updateAccessLevelPermissionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...AccessLevelPermissionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateActivityFlat($set: ActivityUpdateInput!, $filter: ActivityFilter, $atMost: Int!) {\n        updateActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateActivityFlat($set: ActivityUpdateInput!, $filter: ActivityFilter, $atMost: Int!) {\n        updateActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateActivitySetFlat($set: ActivitySetUpdateInput!, $filter: ActivitySetFilter, $atMost: Int!) {\n        updateActivitySetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySetFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateActivitySetFlat($set: ActivitySetUpdateInput!, $filter: ActivitySetFilter, $atMost: Int!) {\n        updateActivitySetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySetFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateActivitySetActivityFlat($set: ActivitySetActivityUpdateInput!, $filter: ActivitySetActivityFilter, $atMost: Int!) {\n        updateActivitySetActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySetActivityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateActivitySetActivityFlat($set: ActivitySetActivityUpdateInput!, $filter: ActivitySetActivityFilter, $atMost: Int!) {\n        updateActivitySetActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySetActivityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateActivitySkillFlat($set: ActivitySkillUpdateInput!, $filter: ActivitySkillFilter, $atMost: Int!) {\n        updateActivitySkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateActivitySkillFlat($set: ActivitySkillUpdateInput!, $filter: ActivitySkillFilter, $atMost: Int!) {\n        updateActivitySkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ActivitySkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateAnalyzerFlat($set: AnalyzerUpdateInput!, $filter: AnalyzerFilter, $atMost: Int!) {\n        updateAnalyzerCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...AnalyzerFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateAnalyzerFlat($set: AnalyzerUpdateInput!, $filter: AnalyzerFilter, $atMost: Int!) {\n        updateAnalyzerCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...AnalyzerFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBlogPostFlat($set: BlogPostUpdateInput!, $filter: BlogPostFilter, $atMost: Int!) {\n        updateBlogPostCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BlogPostFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateBlogPostFlat($set: BlogPostUpdateInput!, $filter: BlogPostFilter, $atMost: Int!) {\n        updateBlogPostCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BlogPostFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBotFlat($set: BotUpdateInput!, $filter: BotFilter, $atMost: Int!) {\n        updateBotCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateBotFlat($set: BotUpdateInput!, $filter: BotFilter, $atMost: Int!) {\n        updateBotCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBotSetFlat($set: BotSetUpdateInput!, $filter: BotSetFilter, $atMost: Int!) {\n        updateBotSetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotSetFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateBotSetFlat($set: BotSetUpdateInput!, $filter: BotSetFilter, $atMost: Int!) {\n        updateBotSetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotSetFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBotSetBotFlat($set: BotSetBotUpdateInput!, $filter: BotSetBotFilter, $atMost: Int!) {\n        updateBotSetBotCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotSetBotFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateBotSetBotFlat($set: BotSetBotUpdateInput!, $filter: BotSetBotFilter, $atMost: Int!) {\n        updateBotSetBotCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...BotSetBotFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateChapterFlat($set: ChapterUpdateInput!, $filter: ChapterFilter, $atMost: Int!) {\n        updateChapterCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChapterFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateChapterFlat($set: ChapterUpdateInput!, $filter: ChapterFilter, $atMost: Int!) {\n        updateChapterCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChapterFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateChatFlat($set: ChatUpdateInput!, $filter: ChatFilter, $atMost: Int!) {\n        updateChatCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChatFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateChatFlat($set: ChatUpdateInput!, $filter: ChatFilter, $atMost: Int!) {\n        updateChatCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChatFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateChatMessageFlat($set: ChatMessageUpdateInput!, $filter: ChatMessageFilter, $atMost: Int!) {\n        updateChatMessageCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChatMessageFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateChatMessageFlat($set: ChatMessageUpdateInput!, $filter: ChatMessageFilter, $atMost: Int!) {\n        updateChatMessageCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChatMessageFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateChromeExtensionEventFlat($set: ChromeExtensionEventUpdateInput!, $filter: ChromeExtensionEventFilter, $atMost: Int!) {\n        updateChromeExtensionEventCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChromeExtensionEventFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateChromeExtensionEventFlat($set: ChromeExtensionEventUpdateInput!, $filter: ChromeExtensionEventFilter, $atMost: Int!) {\n        updateChromeExtensionEventCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ChromeExtensionEventFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateCourseFlat($set: CourseUpdateInput!, $filter: CourseFilter, $atMost: Int!) {\n        updateCourseCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...CourseFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateCourseFlat($set: CourseUpdateInput!, $filter: CourseFilter, $atMost: Int!) {\n        updateCourseCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...CourseFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateCourseLessonFlat($set: CourseLessonUpdateInput!, $filter: CourseLessonFilter, $atMost: Int!) {\n        updateCourseLessonCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...CourseLessonFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateCourseLessonFlat($set: CourseLessonUpdateInput!, $filter: CourseLessonFilter, $atMost: Int!) {\n        updateCourseLessonCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...CourseLessonFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateEmailSubscriptionFlat($set: EmailSubscriptionUpdateInput!, $filter: EmailSubscriptionFilter, $atMost: Int!) {\n        updateEmailSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EmailSubscriptionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateEmailSubscriptionFlat($set: EmailSubscriptionUpdateInput!, $filter: EmailSubscriptionFilter, $atMost: Int!) {\n        updateEmailSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EmailSubscriptionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateEntityFlat($set: EntityUpdateInput!, $filter: EntityFilter, $atMost: Int!) {\n        updateEntityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateEntityFlat($set: EntityUpdateInput!, $filter: EntityFilter, $atMost: Int!) {\n        updateEntityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateEntityTypeFlat($set: EntityTypeUpdateInput!, $filter: EntityTypeFilter, $atMost: Int!) {\n        updateEntityTypeCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityTypeFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateEntityTypeFlat($set: EntityTypeUpdateInput!, $filter: EntityTypeFilter, $atMost: Int!) {\n        updateEntityTypeCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityTypeFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateEntityTypeAccessLevelFlat($set: EntityTypeAccessLevelUpdateInput!, $filter: EntityTypeAccessLevelFilter, $atMost: Int!) {\n        updateEntityTypeAccessLevelCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityTypeAccessLevelFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateEntityTypeAccessLevelFlat($set: EntityTypeAccessLevelUpdateInput!, $filter: EntityTypeAccessLevelFilter, $atMost: Int!) {\n        updateEntityTypeAccessLevelCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...EntityTypeAccessLevelFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateGoalFlat($set: GoalUpdateInput!, $filter: GoalFilter, $atMost: Int!) {\n        updateGoalCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...GoalFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateGoalFlat($set: GoalUpdateInput!, $filter: GoalFilter, $atMost: Int!) {\n        updateGoalCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...GoalFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateGroupFlat($set: GroupUpdateInput!, $filter: GroupFilter, $atMost: Int!) {\n        updateGroupCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...GroupFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateGroupFlat($set: GroupUpdateInput!, $filter: GroupFilter, $atMost: Int!) {\n        updateGroupCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...GroupFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateIntegrationFlat($set: IntegrationUpdateInput!, $filter: IntegrationFilter, $atMost: Int!) {\n        updateIntegrationCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...IntegrationFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateIntegrationFlat($set: IntegrationUpdateInput!, $filter: IntegrationFilter, $atMost: Int!) {\n        updateIntegrationCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...IntegrationFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateIntegrationTokenFlat($set: IntegrationTokenUpdateInput!, $filter: IntegrationTokenFilter, $atMost: Int!) {\n        updateIntegrationTokenCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...IntegrationTokenFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateIntegrationTokenFlat($set: IntegrationTokenUpdateInput!, $filter: IntegrationTokenFilter, $atMost: Int!) {\n        updateIntegrationTokenCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...IntegrationTokenFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateJournalFlat($set: JournalUpdateInput!, $filter: JournalFilter, $atMost: Int!) {\n        updateJournalCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...JournalFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateJournalFlat($set: JournalUpdateInput!, $filter: JournalFilter, $atMost: Int!) {\n        updateJournalCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...JournalFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateLessonFlat($set: LessonUpdateInput!, $filter: LessonFilter, $atMost: Int!) {\n        updateLessonCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateLessonFlat($set: LessonUpdateInput!, $filter: LessonFilter, $atMost: Int!) {\n        updateLessonCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateLessonActivityFlat($set: LessonActivityUpdateInput!, $filter: LessonActivityFilter, $atMost: Int!) {\n        updateLessonActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonActivityFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateLessonActivityFlat($set: LessonActivityUpdateInput!, $filter: LessonActivityFilter, $atMost: Int!) {\n        updateLessonActivityCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonActivityFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateLessonSessionFlat($set: LessonSessionUpdateInput!, $filter: LessonSessionFilter, $atMost: Int!) {\n        updateLessonSessionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonSessionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateLessonSessionFlat($set: LessonSessionUpdateInput!, $filter: LessonSessionFilter, $atMost: Int!) {\n        updateLessonSessionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...LessonSessionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateMemauthFlat($set: MemauthUpdateInput!, $filter: MemauthFilter, $atMost: Int!) {\n        updateMemauthCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...MemauthFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateMemauthFlat($set: MemauthUpdateInput!, $filter: MemauthFilter, $atMost: Int!) {\n        updateMemauthCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...MemauthFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateMemberAuthorizationFlat($set: MemberAuthorizationUpdateInput!, $filter: MemberAuthorizationFilter, $atMost: Int!) {\n        updateMemberAuthorizationCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...MemberAuthorizationFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateMemberAuthorizationFlat($set: MemberAuthorizationUpdateInput!, $filter: MemberAuthorizationFilter, $atMost: Int!) {\n        updateMemberAuthorizationCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...MemberAuthorizationFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateNotificationSubscriptionFlat($set: NotificationSubscriptionUpdateInput!, $filter: NotificationSubscriptionFilter, $atMost: Int!) {\n        updateNotificationSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...NotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateNotificationSubscriptionFlat($set: NotificationSubscriptionUpdateInput!, $filter: NotificationSubscriptionFilter, $atMost: Int!) {\n        updateNotificationSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...NotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateOperationLogFlat($set: OperationLogUpdateInput!, $filter: OperationLogFilter, $atMost: Int!) {\n        updateOperationLogCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...OperationLogFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateOperationLogFlat($set: OperationLogUpdateInput!, $filter: OperationLogFilter, $atMost: Int!) {\n        updateOperationLogCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...OperationLogFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePartialSkillFlat($set: PartialSkillUpdateInput!, $filter: PartialSkillFilter, $atMost: Int!) {\n        updatePartialSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PartialSkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePartialSkillFlat($set: PartialSkillUpdateInput!, $filter: PartialSkillFilter, $atMost: Int!) {\n        updatePartialSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PartialSkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePermissionFlat($set: PermissionUpdateInput!, $filter: PermissionFilter, $atMost: Int!) {\n        updatePermissionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PermissionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePermissionFlat($set: PermissionUpdateInput!, $filter: PermissionFilter, $atMost: Int!) {\n        updatePermissionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PermissionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePodcastFlat($set: PodcastUpdateInput!, $filter: PodcastFilter, $atMost: Int!) {\n        updatePodcastCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePodcastFlat($set: PodcastUpdateInput!, $filter: PodcastFilter, $atMost: Int!) {\n        updatePodcastCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePodcastAudioFlat($set: PodcastAudioUpdateInput!, $filter: PodcastAudioFilter, $atMost: Int!) {\n        updatePodcastAudioCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastAudioFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePodcastAudioFlat($set: PodcastAudioUpdateInput!, $filter: PodcastAudioFilter, $atMost: Int!) {\n        updatePodcastAudioCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastAudioFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePodcastLineFlat($set: PodcastLineUpdateInput!, $filter: PodcastLineFilter, $atMost: Int!) {\n        updatePodcastLineCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastLineFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePodcastLineFlat($set: PodcastLineUpdateInput!, $filter: PodcastLineFilter, $atMost: Int!) {\n        updatePodcastLineCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastLineFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePodcastQueueItemFlat($set: PodcastQueueItemUpdateInput!, $filter: PodcastQueueItemFilter, $atMost: Int!) {\n        updatePodcastQueueItemCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastQueueItemFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePodcastQueueItemFlat($set: PodcastQueueItemUpdateInput!, $filter: PodcastQueueItemFilter, $atMost: Int!) {\n        updatePodcastQueueItemCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PodcastQueueItemFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePushNotificationSubscriptionFlat($set: PushNotificationSubscriptionUpdateInput!, $filter: PushNotificationSubscriptionFilter, $atMost: Int!) {\n        updatePushNotificationSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PushNotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updatePushNotificationSubscriptionFlat($set: PushNotificationSubscriptionUpdateInput!, $filter: PushNotificationSubscriptionFilter, $atMost: Int!) {\n        updatePushNotificationSubscriptionCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...PushNotificationSubscriptionFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateReferenceFlat($set: ReferenceUpdateInput!, $filter: ReferenceFilter, $atMost: Int!) {\n        updateReferenceCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ReferenceFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateReferenceFlat($set: ReferenceUpdateInput!, $filter: ReferenceFilter, $atMost: Int!) {\n        updateReferenceCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ReferenceFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateResourceFlat($set: ResourceUpdateInput!, $filter: ResourceFilter, $atMost: Int!) {\n        updateResourceCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ResourceFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateResourceFlat($set: ResourceUpdateInput!, $filter: ResourceFilter, $atMost: Int!) {\n        updateResourceCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...ResourceFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnPageFlat($set: RsnPageUpdateInput!, $filter: RsnPageFilter, $atMost: Int!) {\n        updateRsnPageCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnPageFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnPageFlat($set: RsnPageUpdateInput!, $filter: RsnPageFilter, $atMost: Int!) {\n        updateRsnPageCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnPageFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnPageVectorFlat($set: RsnPageVectorUpdateInput!, $filter: RsnPageVectorFilter, $atMost: Int!) {\n        updateRsnPageVectorCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnPageVectorFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnPageVectorFlat($set: RsnPageVectorUpdateInput!, $filter: RsnPageVectorFilter, $atMost: Int!) {\n        updateRsnPageVectorCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnPageVectorFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnUserFlat($set: RsnUserUpdateInput!, $filter: RsnUserFilter, $atMost: Int!) {\n        updateRsnUserCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnUserFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnUserFlat($set: RsnUserUpdateInput!, $filter: RsnUserFilter, $atMost: Int!) {\n        updateRsnUserCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnUserFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnUserSysdataFlat($set: RsnUserSysdataUpdateInput!, $filter: RsnUserSysdataFilter, $atMost: Int!) {\n        updateRsnUserSysdataCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnUserSysdataFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnUserSysdataFlat($set: RsnUserSysdataUpdateInput!, $filter: RsnUserSysdataFilter, $atMost: Int!) {\n        updateRsnUserSysdataCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnUserSysdataFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnVecFlat($set: RsnVecUpdateInput!, $filter: RsnVecFilter, $atMost: Int!) {\n        updateRsnVecCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnVecFlat($set: RsnVecUpdateInput!, $filter: RsnVecFilter, $atMost: Int!) {\n        updateRsnVecCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnVecConfigFlat($set: RsnVecConfigUpdateInput!, $filter: RsnVecConfigFilter, $atMost: Int!) {\n        updateRsnVecConfigCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecConfigFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnVecConfigFlat($set: RsnVecConfigUpdateInput!, $filter: RsnVecConfigFilter, $atMost: Int!) {\n        updateRsnVecConfigCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecConfigFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsnVecQueueFlat($set: RsnVecQueueUpdateInput!, $filter: RsnVecQueueFilter, $atMost: Int!) {\n        updateRsnVecQueueCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecQueueFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsnVecQueueFlat($set: RsnVecQueueUpdateInput!, $filter: RsnVecQueueFilter, $atMost: Int!) {\n        updateRsnVecQueueCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsnVecQueueFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateRsncoreTableAbbreviationsFlat($set: RsncoreTableAbbreviationsUpdateInput!, $filter: RsncoreTableAbbreviationsFilter, $atMost: Int!) {\n        updateRsncoreTableAbbreviationsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsncoreTableAbbreviationsFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateRsncoreTableAbbreviationsFlat($set: RsncoreTableAbbreviationsUpdateInput!, $filter: RsncoreTableAbbreviationsFilter, $atMost: Int!) {\n        updateRsncoreTableAbbreviationsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...RsncoreTableAbbreviationsFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateSkillFlat($set: SkillUpdateInput!, $filter: SkillFilter, $atMost: Int!) {\n        updateSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateSkillFlat($set: SkillUpdateInput!, $filter: SkillFilter, $atMost: Int!) {\n        updateSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateSkillLinkFlat($set: SkillLinkUpdateInput!, $filter: SkillLinkFilter, $atMost: Int!) {\n        updateSkillLinkCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillLinkFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateSkillLinkFlat($set: SkillLinkUpdateInput!, $filter: SkillLinkFilter, $atMost: Int!) {\n        updateSkillLinkCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillLinkFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateSkillModuleFlat($set: SkillModuleUpdateInput!, $filter: SkillModuleFilter, $atMost: Int!) {\n        updateSkillModuleCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillModuleFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateSkillModuleFlat($set: SkillModuleUpdateInput!, $filter: SkillModuleFilter, $atMost: Int!) {\n        updateSkillModuleCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillModuleFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateSkillSetFlat($set: SkillSetUpdateInput!, $filter: SkillSetFilter, $atMost: Int!) {\n        updateSkillSetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillSetFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateSkillSetFlat($set: SkillSetUpdateInput!, $filter: SkillSetFilter, $atMost: Int!) {\n        updateSkillSetCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillSetFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateSkillSetSkillFlat($set: SkillSetSkillUpdateInput!, $filter: SkillSetSkillFilter, $atMost: Int!) {\n        updateSkillSetSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillSetSkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateSkillSetSkillFlat($set: SkillSetSkillUpdateInput!, $filter: SkillSetSkillFilter, $atMost: Int!) {\n        updateSkillSetSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SkillSetSkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateSnipFlat($set: SnipUpdateInput!, $filter: SnipFilter, $atMost: Int!) {\n        updateSnipCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SnipFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateSnipFlat($set: SnipUpdateInput!, $filter: SnipFilter, $atMost: Int!) {\n        updateSnipCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...SnipFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateStripeCustomersFlat($set: StripeCustomersUpdateInput!, $filter: StripeCustomersFilter, $atMost: Int!) {\n        updateStripeCustomersCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeCustomersFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateStripeCustomersFlat($set: StripeCustomersUpdateInput!, $filter: StripeCustomersFilter, $atMost: Int!) {\n        updateStripeCustomersCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeCustomersFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateStripeProductsFlat($set: StripeProductsUpdateInput!, $filter: StripeProductsFilter, $atMost: Int!) {\n        updateStripeProductsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeProductsFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateStripeProductsFlat($set: StripeProductsUpdateInput!, $filter: StripeProductsFilter, $atMost: Int!) {\n        updateStripeProductsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeProductsFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateStripeSubscriptionsFlat($set: StripeSubscriptionsUpdateInput!, $filter: StripeSubscriptionsFilter, $atMost: Int!) {\n        updateStripeSubscriptionsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeSubscriptionsFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateStripeSubscriptionsFlat($set: StripeSubscriptionsUpdateInput!, $filter: StripeSubscriptionsFilter, $atMost: Int!) {\n        updateStripeSubscriptionsCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...StripeSubscriptionsFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserActivityFeedbackFlat($set: UserActivityFeedbackUpdateInput!, $filter: UserActivityFeedbackFilter, $atMost: Int!) {\n        updateUserActivityFeedbackCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserActivityFeedbackFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserActivityFeedbackFlat($set: UserActivityFeedbackUpdateInput!, $filter: UserActivityFeedbackFilter, $atMost: Int!) {\n        updateUserActivityFeedbackCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserActivityFeedbackFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserActivityResultFlat($set: UserActivityResultUpdateInput!, $filter: UserActivityResultFilter, $atMost: Int!) {\n        updateUserActivityResultCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserActivityResultFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserActivityResultFlat($set: UserActivityResultUpdateInput!, $filter: UserActivityResultFilter, $atMost: Int!) {\n        updateUserActivityResultCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserActivityResultFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserHistoryFlat($set: UserHistoryUpdateInput!, $filter: UserHistoryFilter, $atMost: Int!) {\n        updateUserHistoryCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserHistoryFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserHistoryFlat($set: UserHistoryUpdateInput!, $filter: UserHistoryFilter, $atMost: Int!) {\n        updateUserHistoryCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserHistoryFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserLessonResultFlat($set: UserLessonResultUpdateInput!, $filter: UserLessonResultFilter, $atMost: Int!) {\n        updateUserLessonResultCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserLessonResultFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserLessonResultFlat($set: UserLessonResultUpdateInput!, $filter: UserLessonResultFilter, $atMost: Int!) {\n        updateUserLessonResultCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserLessonResultFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserProfileFlat($set: UserProfileUpdateInput!, $filter: UserProfileFilter, $atMost: Int!) {\n        updateUserProfileCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserProfileFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserProfileFlat($set: UserProfileUpdateInput!, $filter: UserProfileFilter, $atMost: Int!) {\n        updateUserProfileCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserProfileFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserSettingFlat($set: UserSettingUpdateInput!, $filter: UserSettingFilter, $atMost: Int!) {\n        updateUserSettingCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSettingFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserSettingFlat($set: UserSettingUpdateInput!, $filter: UserSettingFilter, $atMost: Int!) {\n        updateUserSettingCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSettingFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserSkillFlat($set: UserSkillUpdateInput!, $filter: UserSkillFilter, $atMost: Int!) {\n        updateUserSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSkillFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserSkillFlat($set: UserSkillUpdateInput!, $filter: UserSkillFilter, $atMost: Int!) {\n        updateUserSkillCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSkillFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserSkillSysdataFlat($set: UserSkillSysdataUpdateInput!, $filter: UserSkillSysdataFilter, $atMost: Int!) {\n        updateUserSkillSysdataCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSkillSysdataFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserSkillSysdataFlat($set: UserSkillSysdataUpdateInput!, $filter: UserSkillSysdataFilter, $atMost: Int!) {\n        updateUserSkillSysdataCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserSkillSysdataFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserTourFlat($set: UserTourUpdateInput!, $filter: UserTourFilter, $atMost: Int!) {\n        updateUserTourCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserTourFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateUserTourFlat($set: UserTourUpdateInput!, $filter: UserTourFilter, $atMost: Int!) {\n        updateUserTourCollection(set: $set, filter: $filter, atMost: $atMost) {\n            affectedCount\n            records {\n                ...UserTourFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteActivityFlat($atMost: Int!, $filter: ActivityFilter) {\n        deleteFromActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteActivityFlat($atMost: Int!, $filter: ActivityFilter) {\n        deleteFromActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteActivitySetFlat($atMost: Int!, $filter: ActivitySetFilter) {\n        deleteFromActivitySetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteActivitySetFlat($atMost: Int!, $filter: ActivitySetFilter) {\n        deleteFromActivitySetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteActivitySetActivityFlat($atMost: Int!, $filter: ActivitySetActivityFilter) {\n        deleteFromActivitySetActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteActivitySetActivityFlat($atMost: Int!, $filter: ActivitySetActivityFilter) {\n        deleteFromActivitySetActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteActivitySkillFlat($atMost: Int!, $filter: ActivitySkillFilter) {\n        deleteFromActivitySkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteActivitySkillFlat($atMost: Int!, $filter: ActivitySkillFilter) {\n        deleteFromActivitySkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteAnalyzerFlat($atMost: Int!, $filter: AnalyzerFilter) {\n        deleteFromAnalyzerCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteAnalyzerFlat($atMost: Int!, $filter: AnalyzerFilter) {\n        deleteFromAnalyzerCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBlogPostFlat($atMost: Int!, $filter: BlogPostFilter) {\n        deleteFromBlogPostCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteBlogPostFlat($atMost: Int!, $filter: BlogPostFilter) {\n        deleteFromBlogPostCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBotFlat($atMost: Int!, $filter: BotFilter) {\n        deleteFromBotCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteBotFlat($atMost: Int!, $filter: BotFilter) {\n        deleteFromBotCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBotSetFlat($atMost: Int!, $filter: BotSetFilter) {\n        deleteFromBotSetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteBotSetFlat($atMost: Int!, $filter: BotSetFilter) {\n        deleteFromBotSetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBotSetBotFlat($atMost: Int!, $filter: BotSetBotFilter) {\n        deleteFromBotSetBotCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteBotSetBotFlat($atMost: Int!, $filter: BotSetBotFilter) {\n        deleteFromBotSetBotCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteChapterFlat($atMost: Int!, $filter: ChapterFilter) {\n        deleteFromChapterCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteChapterFlat($atMost: Int!, $filter: ChapterFilter) {\n        deleteFromChapterCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteChatFlat($atMost: Int!, $filter: ChatFilter) {\n        deleteFromChatCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteChatFlat($atMost: Int!, $filter: ChatFilter) {\n        deleteFromChatCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteChatMessageFlat($atMost: Int!, $filter: ChatMessageFilter) {\n        deleteFromChatMessageCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteChatMessageFlat($atMost: Int!, $filter: ChatMessageFilter) {\n        deleteFromChatMessageCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteChromeExtensionEventFlat($atMost: Int!, $filter: ChromeExtensionEventFilter) {\n        deleteFromChromeExtensionEventCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteChromeExtensionEventFlat($atMost: Int!, $filter: ChromeExtensionEventFilter) {\n        deleteFromChromeExtensionEventCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteCourseFlat($atMost: Int!, $filter: CourseFilter) {\n        deleteFromCourseCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteCourseFlat($atMost: Int!, $filter: CourseFilter) {\n        deleteFromCourseCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteCourseLessonFlat($atMost: Int!, $filter: CourseLessonFilter) {\n        deleteFromCourseLessonCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteCourseLessonFlat($atMost: Int!, $filter: CourseLessonFilter) {\n        deleteFromCourseLessonCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteEmailSubscriptionFlat($atMost: Int!, $filter: EmailSubscriptionFilter) {\n        deleteFromEmailSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteEmailSubscriptionFlat($atMost: Int!, $filter: EmailSubscriptionFilter) {\n        deleteFromEmailSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteEntityFlat($atMost: Int!, $filter: EntityFilter) {\n        deleteFromEntityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteEntityFlat($atMost: Int!, $filter: EntityFilter) {\n        deleteFromEntityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteGoalFlat($atMost: Int!, $filter: GoalFilter) {\n        deleteFromGoalCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteGoalFlat($atMost: Int!, $filter: GoalFilter) {\n        deleteFromGoalCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteGroupFlat($atMost: Int!, $filter: GroupFilter) {\n        deleteFromGroupCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteGroupFlat($atMost: Int!, $filter: GroupFilter) {\n        deleteFromGroupCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteIntegrationFlat($atMost: Int!, $filter: IntegrationFilter) {\n        deleteFromIntegrationCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteIntegrationFlat($atMost: Int!, $filter: IntegrationFilter) {\n        deleteFromIntegrationCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteIntegrationTokenFlat($atMost: Int!, $filter: IntegrationTokenFilter) {\n        deleteFromIntegrationTokenCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteIntegrationTokenFlat($atMost: Int!, $filter: IntegrationTokenFilter) {\n        deleteFromIntegrationTokenCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteJournalFlat($atMost: Int!, $filter: JournalFilter) {\n        deleteFromJournalCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteJournalFlat($atMost: Int!, $filter: JournalFilter) {\n        deleteFromJournalCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteLessonFlat($atMost: Int!, $filter: LessonFilter) {\n        deleteFromLessonCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteLessonFlat($atMost: Int!, $filter: LessonFilter) {\n        deleteFromLessonCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteLessonActivityFlat($atMost: Int!, $filter: LessonActivityFilter) {\n        deleteFromLessonActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteLessonActivityFlat($atMost: Int!, $filter: LessonActivityFilter) {\n        deleteFromLessonActivityCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteLessonSessionFlat($atMost: Int!, $filter: LessonSessionFilter) {\n        deleteFromLessonSessionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteLessonSessionFlat($atMost: Int!, $filter: LessonSessionFilter) {\n        deleteFromLessonSessionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteMemauthFlat($atMost: Int!, $filter: MemauthFilter) {\n        deleteFromMemauthCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteMemauthFlat($atMost: Int!, $filter: MemauthFilter) {\n        deleteFromMemauthCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteMemberAuthorizationFlat($atMost: Int!, $filter: MemberAuthorizationFilter) {\n        deleteFromMemberAuthorizationCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteMemberAuthorizationFlat($atMost: Int!, $filter: MemberAuthorizationFilter) {\n        deleteFromMemberAuthorizationCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteNotificationSubscriptionFlat($atMost: Int!, $filter: NotificationSubscriptionFilter) {\n        deleteFromNotificationSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteNotificationSubscriptionFlat($atMost: Int!, $filter: NotificationSubscriptionFilter) {\n        deleteFromNotificationSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteOperationLogFlat($atMost: Int!, $filter: OperationLogFilter) {\n        deleteFromOperationLogCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteOperationLogFlat($atMost: Int!, $filter: OperationLogFilter) {\n        deleteFromOperationLogCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePartialSkillFlat($atMost: Int!, $filter: PartialSkillFilter) {\n        deleteFromPartialSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePartialSkillFlat($atMost: Int!, $filter: PartialSkillFilter) {\n        deleteFromPartialSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePodcastFlat($atMost: Int!, $filter: PodcastFilter) {\n        deleteFromPodcastCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePodcastFlat($atMost: Int!, $filter: PodcastFilter) {\n        deleteFromPodcastCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePodcastAudioFlat($atMost: Int!, $filter: PodcastAudioFilter) {\n        deleteFromPodcastAudioCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePodcastAudioFlat($atMost: Int!, $filter: PodcastAudioFilter) {\n        deleteFromPodcastAudioCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePodcastLineFlat($atMost: Int!, $filter: PodcastLineFilter) {\n        deleteFromPodcastLineCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePodcastLineFlat($atMost: Int!, $filter: PodcastLineFilter) {\n        deleteFromPodcastLineCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePodcastQueueItemFlat($atMost: Int!, $filter: PodcastQueueItemFilter) {\n        deleteFromPodcastQueueItemCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePodcastQueueItemFlat($atMost: Int!, $filter: PodcastQueueItemFilter) {\n        deleteFromPodcastQueueItemCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePushNotificationSubscriptionFlat($atMost: Int!, $filter: PushNotificationSubscriptionFilter) {\n        deleteFromPushNotificationSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePushNotificationSubscriptionFlat($atMost: Int!, $filter: PushNotificationSubscriptionFilter) {\n        deleteFromPushNotificationSubscriptionCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteReferenceFlat($atMost: Int!, $filter: ReferenceFilter) {\n        deleteFromReferenceCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteReferenceFlat($atMost: Int!, $filter: ReferenceFilter) {\n        deleteFromReferenceCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteResourceFlat($atMost: Int!, $filter: ResourceFilter) {\n        deleteFromResourceCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteResourceFlat($atMost: Int!, $filter: ResourceFilter) {\n        deleteFromResourceCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnPageFlat($atMost: Int!, $filter: RsnPageFilter) {\n        deleteFromRsnPageCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnPageFlat($atMost: Int!, $filter: RsnPageFilter) {\n        deleteFromRsnPageCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnPageVectorFlat($atMost: Int!, $filter: RsnPageVectorFilter) {\n        deleteFromRsnPageVectorCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnPageVectorFlat($atMost: Int!, $filter: RsnPageVectorFilter) {\n        deleteFromRsnPageVectorCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnUserFlat($atMost: Int!, $filter: RsnUserFilter) {\n        deleteFromRsnUserCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnUserFlat($atMost: Int!, $filter: RsnUserFilter) {\n        deleteFromRsnUserCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnUserSysdataFlat($atMost: Int!, $filter: RsnUserSysdataFilter) {\n        deleteFromRsnUserSysdataCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnUserSysdataFlat($atMost: Int!, $filter: RsnUserSysdataFilter) {\n        deleteFromRsnUserSysdataCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnVecFlat($atMost: Int!, $filter: RsnVecFilter) {\n        deleteFromRsnVecCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnVecFlat($atMost: Int!, $filter: RsnVecFilter) {\n        deleteFromRsnVecCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnVecConfigFlat($atMost: Int!, $filter: RsnVecConfigFilter) {\n        deleteFromRsnVecConfigCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnVecConfigFlat($atMost: Int!, $filter: RsnVecConfigFilter) {\n        deleteFromRsnVecConfigCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsnVecQueueFlat($atMost: Int!, $filter: RsnVecQueueFilter) {\n        deleteFromRsnVecQueueCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsnVecQueueFlat($atMost: Int!, $filter: RsnVecQueueFilter) {\n        deleteFromRsnVecQueueCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteRsncoreTableAbbreviationsFlat($atMost: Int!, $filter: RsncoreTableAbbreviationsFilter) {\n        deleteFromRsncoreTableAbbreviationsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteRsncoreTableAbbreviationsFlat($atMost: Int!, $filter: RsncoreTableAbbreviationsFilter) {\n        deleteFromRsncoreTableAbbreviationsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteSkillFlat($atMost: Int!, $filter: SkillFilter) {\n        deleteFromSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteSkillFlat($atMost: Int!, $filter: SkillFilter) {\n        deleteFromSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteSkillLinkFlat($atMost: Int!, $filter: SkillLinkFilter) {\n        deleteFromSkillLinkCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteSkillLinkFlat($atMost: Int!, $filter: SkillLinkFilter) {\n        deleteFromSkillLinkCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteSkillModuleFlat($atMost: Int!, $filter: SkillModuleFilter) {\n        deleteFromSkillModuleCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteSkillModuleFlat($atMost: Int!, $filter: SkillModuleFilter) {\n        deleteFromSkillModuleCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteSkillSetFlat($atMost: Int!, $filter: SkillSetFilter) {\n        deleteFromSkillSetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteSkillSetFlat($atMost: Int!, $filter: SkillSetFilter) {\n        deleteFromSkillSetCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteSkillSetSkillFlat($atMost: Int!, $filter: SkillSetSkillFilter) {\n        deleteFromSkillSetSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteSkillSetSkillFlat($atMost: Int!, $filter: SkillSetSkillFilter) {\n        deleteFromSkillSetSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteSnipFlat($atMost: Int!, $filter: SnipFilter) {\n        deleteFromSnipCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteSnipFlat($atMost: Int!, $filter: SnipFilter) {\n        deleteFromSnipCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteStripeCustomersFlat($atMost: Int!, $filter: StripeCustomersFilter) {\n        deleteFromStripeCustomersCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteStripeCustomersFlat($atMost: Int!, $filter: StripeCustomersFilter) {\n        deleteFromStripeCustomersCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteStripeProductsFlat($atMost: Int!, $filter: StripeProductsFilter) {\n        deleteFromStripeProductsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteStripeProductsFlat($atMost: Int!, $filter: StripeProductsFilter) {\n        deleteFromStripeProductsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteStripeSubscriptionsFlat($atMost: Int!, $filter: StripeSubscriptionsFilter) {\n        deleteFromStripeSubscriptionsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteStripeSubscriptionsFlat($atMost: Int!, $filter: StripeSubscriptionsFilter) {\n        deleteFromStripeSubscriptionsCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserActivityFeedbackFlat($atMost: Int!, $filter: UserActivityFeedbackFilter) {\n        deleteFromUserActivityFeedbackCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserActivityFeedbackFlat($atMost: Int!, $filter: UserActivityFeedbackFilter) {\n        deleteFromUserActivityFeedbackCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserActivityResultFlat($atMost: Int!, $filter: UserActivityResultFilter) {\n        deleteFromUserActivityResultCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserActivityResultFlat($atMost: Int!, $filter: UserActivityResultFilter) {\n        deleteFromUserActivityResultCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserHistoryFlat($atMost: Int!, $filter: UserHistoryFilter) {\n        deleteFromUserHistoryCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserHistoryFlat($atMost: Int!, $filter: UserHistoryFilter) {\n        deleteFromUserHistoryCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserLessonResultFlat($atMost: Int!, $filter: UserLessonResultFilter) {\n        deleteFromUserLessonResultCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserLessonResultFlat($atMost: Int!, $filter: UserLessonResultFilter) {\n        deleteFromUserLessonResultCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserProfileFlat($atMost: Int!, $filter: UserProfileFilter) {\n        deleteFromUserProfileCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserProfileFlat($atMost: Int!, $filter: UserProfileFilter) {\n        deleteFromUserProfileCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserSettingFlat($atMost: Int!, $filter: UserSettingFilter) {\n        deleteFromUserSettingCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserSettingFlat($atMost: Int!, $filter: UserSettingFilter) {\n        deleteFromUserSettingCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserSkillFlat($atMost: Int!, $filter: UserSkillFilter) {\n        deleteFromUserSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserSkillFlat($atMost: Int!, $filter: UserSkillFilter) {\n        deleteFromUserSkillCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserSkillSysdataFlat($atMost: Int!, $filter: UserSkillSysdataFilter) {\n        deleteFromUserSkillSysdataCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserSkillSysdataFlat($atMost: Int!, $filter: UserSkillSysdataFilter) {\n        deleteFromUserSkillSysdataCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteUserTourFlat($atMost: Int!, $filter: UserTourFilter) {\n        deleteFromUserTourCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteUserTourFlat($atMost: Int!, $filter: UserTourFilter) {\n        deleteFromUserTourCollection(atMost: $atMost, filter: $filter) {\n            affectedCount\n            records {\n                __typename\n                id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getAccessLevelPermissionFlat (\n        $filter: AccessLevelPermissionFilter\n        $orderBy: [AccessLevelPermissionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        accessLevelPermissionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...AccessLevelPermissionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getAccessLevelPermissionFlat (\n        $filter: AccessLevelPermissionFilter\n        $orderBy: [AccessLevelPermissionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        accessLevelPermissionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...AccessLevelPermissionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getActivityFlat (\n        $filter: ActivityFilter\n        $orderBy: [ActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getActivityFlat (\n        $filter: ActivityFilter\n        $orderBy: [ActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getActivitySetFlat (\n        $filter: ActivitySetFilter\n        $orderBy: [ActivitySetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getActivitySetFlat (\n        $filter: ActivitySetFilter\n        $orderBy: [ActivitySetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getActivitySetActivityFlat (\n        $filter: ActivitySetActivityFilter\n        $orderBy: [ActivitySetActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySetActivityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getActivitySetActivityFlat (\n        $filter: ActivitySetActivityFilter\n        $orderBy: [ActivitySetActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySetActivityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getActivitySkillFlat (\n        $filter: ActivitySkillFilter\n        $orderBy: [ActivitySkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getActivitySkillFlat (\n        $filter: ActivitySkillFilter\n        $orderBy: [ActivitySkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        activitySkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getAnalyzerFlat (\n        $filter: AnalyzerFilter\n        $orderBy: [AnalyzerOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        analyzerCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...AnalyzerFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getAnalyzerFlat (\n        $filter: AnalyzerFilter\n        $orderBy: [AnalyzerOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        analyzerCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...AnalyzerFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getBlogPostFlat (\n        $filter: BlogPostFilter\n        $orderBy: [BlogPostOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        blogPostCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BlogPostFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getBlogPostFlat (\n        $filter: BlogPostFilter\n        $orderBy: [BlogPostOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        blogPostCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BlogPostFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getBotFlat (\n        $filter: BotFilter\n        $orderBy: [BotOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getBotFlat (\n        $filter: BotFilter\n        $orderBy: [BotOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getBotSetFlat (\n        $filter: BotSetFilter\n        $orderBy: [BotSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getBotSetFlat (\n        $filter: BotSetFilter\n        $orderBy: [BotSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getBotSetBotFlat (\n        $filter: BotSetBotFilter\n        $orderBy: [BotSetBotOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botSetBotCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetBotFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getBotSetBotFlat (\n        $filter: BotSetBotFilter\n        $orderBy: [BotSetBotOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        botSetBotCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetBotFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getChapterFlat (\n        $filter: ChapterFilter\n        $orderBy: [ChapterOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chapterCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChapterFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getChapterFlat (\n        $filter: ChapterFilter\n        $orderBy: [ChapterOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chapterCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChapterFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getChatFlat (\n        $filter: ChatFilter\n        $orderBy: [ChatOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chatCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChatFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getChatFlat (\n        $filter: ChatFilter\n        $orderBy: [ChatOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chatCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChatFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getChatMessageFlat (\n        $filter: ChatMessageFilter\n        $orderBy: [ChatMessageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chatMessageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChatMessageFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getChatMessageFlat (\n        $filter: ChatMessageFilter\n        $orderBy: [ChatMessageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chatMessageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChatMessageFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getChromeExtensionEventFlat (\n        $filter: ChromeExtensionEventFilter\n        $orderBy: [ChromeExtensionEventOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chromeExtensionEventCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChromeExtensionEventFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getChromeExtensionEventFlat (\n        $filter: ChromeExtensionEventFilter\n        $orderBy: [ChromeExtensionEventOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        chromeExtensionEventCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ChromeExtensionEventFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCourseFlat (\n        $filter: CourseFilter\n        $orderBy: [CourseOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        courseCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...CourseFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getCourseFlat (\n        $filter: CourseFilter\n        $orderBy: [CourseOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        courseCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...CourseFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCourseLessonFlat (\n        $filter: CourseLessonFilter\n        $orderBy: [CourseLessonOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        courseLessonCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...CourseLessonFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getCourseLessonFlat (\n        $filter: CourseLessonFilter\n        $orderBy: [CourseLessonOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        courseLessonCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...CourseLessonFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getEmailSubscriptionFlat (\n        $filter: EmailSubscriptionFilter\n        $orderBy: [EmailSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        emailSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EmailSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getEmailSubscriptionFlat (\n        $filter: EmailSubscriptionFilter\n        $orderBy: [EmailSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        emailSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EmailSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getEntityFlat (\n        $filter: EntityFilter\n        $orderBy: [EntityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getEntityFlat (\n        $filter: EntityFilter\n        $orderBy: [EntityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getEntityTypeFlat (\n        $filter: EntityTypeFilter\n        $orderBy: [EntityTypeOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityTypeCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityTypeFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getEntityTypeFlat (\n        $filter: EntityTypeFilter\n        $orderBy: [EntityTypeOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityTypeCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityTypeFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getEntityTypeAccessLevelFlat (\n        $filter: EntityTypeAccessLevelFilter\n        $orderBy: [EntityTypeAccessLevelOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityTypeAccessLevelCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityTypeAccessLevelFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getEntityTypeAccessLevelFlat (\n        $filter: EntityTypeAccessLevelFilter\n        $orderBy: [EntityTypeAccessLevelOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        entityTypeAccessLevelCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...EntityTypeAccessLevelFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getGoalFlat (\n        $filter: GoalFilter\n        $orderBy: [GoalOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        goalCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...GoalFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getGoalFlat (\n        $filter: GoalFilter\n        $orderBy: [GoalOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        goalCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...GoalFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getGroupFlat (\n        $filter: GroupFilter\n        $orderBy: [GroupOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        groupCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...GroupFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getGroupFlat (\n        $filter: GroupFilter\n        $orderBy: [GroupOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        groupCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...GroupFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getIntegrationFlat (\n        $filter: IntegrationFilter\n        $orderBy: [IntegrationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        integrationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...IntegrationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getIntegrationFlat (\n        $filter: IntegrationFilter\n        $orderBy: [IntegrationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        integrationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...IntegrationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getIntegrationTokenFlat (\n        $filter: IntegrationTokenFilter\n        $orderBy: [IntegrationTokenOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        integrationTokenCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...IntegrationTokenFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getIntegrationTokenFlat (\n        $filter: IntegrationTokenFilter\n        $orderBy: [IntegrationTokenOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        integrationTokenCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...IntegrationTokenFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getJournalFlat (\n        $filter: JournalFilter\n        $orderBy: [JournalOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        journalCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...JournalFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getJournalFlat (\n        $filter: JournalFilter\n        $orderBy: [JournalOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        journalCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...JournalFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getLessonFlat (\n        $filter: LessonFilter\n        $orderBy: [LessonOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getLessonFlat (\n        $filter: LessonFilter\n        $orderBy: [LessonOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getLessonActivityFlat (\n        $filter: LessonActivityFilter\n        $orderBy: [LessonActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonActivityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getLessonActivityFlat (\n        $filter: LessonActivityFilter\n        $orderBy: [LessonActivityOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonActivityCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonActivityFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getLessonSessionFlat (\n        $filter: LessonSessionFilter\n        $orderBy: [LessonSessionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonSessionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonSessionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getLessonSessionFlat (\n        $filter: LessonSessionFilter\n        $orderBy: [LessonSessionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        lessonSessionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...LessonSessionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMemauthFlat (\n        $filter: MemauthFilter\n        $orderBy: [MemauthOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memauthCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...MemauthFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMemauthFlat (\n        $filter: MemauthFilter\n        $orderBy: [MemauthOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memauthCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...MemauthFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMemberAuthorizationFlat (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...MemberAuthorizationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMemberAuthorizationFlat (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...MemberAuthorizationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getNotificationSubscriptionFlat (\n        $filter: NotificationSubscriptionFilter\n        $orderBy: [NotificationSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        notificationSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...NotificationSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getNotificationSubscriptionFlat (\n        $filter: NotificationSubscriptionFilter\n        $orderBy: [NotificationSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        notificationSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...NotificationSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getOperationLogFlat (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...OperationLogFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getOperationLogFlat (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...OperationLogFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPartialSkillFlat (\n        $filter: PartialSkillFilter\n        $orderBy: [PartialSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        partialSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PartialSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPartialSkillFlat (\n        $filter: PartialSkillFilter\n        $orderBy: [PartialSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        partialSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PartialSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPermissionFlat (\n        $filter: PermissionFilter\n        $orderBy: [PermissionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        permissionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PermissionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPermissionFlat (\n        $filter: PermissionFilter\n        $orderBy: [PermissionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        permissionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PermissionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPodcastFlat (\n        $filter: PodcastFilter\n        $orderBy: [PodcastOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPodcastFlat (\n        $filter: PodcastFilter\n        $orderBy: [PodcastOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPodcastAudioFlat (\n        $filter: PodcastAudioFilter\n        $orderBy: [PodcastAudioOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastAudioCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastAudioFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPodcastAudioFlat (\n        $filter: PodcastAudioFilter\n        $orderBy: [PodcastAudioOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastAudioCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastAudioFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPodcastLineFlat (\n        $filter: PodcastLineFilter\n        $orderBy: [PodcastLineOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastLineCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastLineFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPodcastLineFlat (\n        $filter: PodcastLineFilter\n        $orderBy: [PodcastLineOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastLineCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastLineFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPodcastQueueItemFlat (\n        $filter: PodcastQueueItemFilter\n        $orderBy: [PodcastQueueItemOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastQueueItemCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastQueueItemFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPodcastQueueItemFlat (\n        $filter: PodcastQueueItemFilter\n        $orderBy: [PodcastQueueItemOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        podcastQueueItemCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PodcastQueueItemFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPushNotificationSubscriptionFlat (\n        $filter: PushNotificationSubscriptionFilter\n        $orderBy: [PushNotificationSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        pushNotificationSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PushNotificationSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPushNotificationSubscriptionFlat (\n        $filter: PushNotificationSubscriptionFilter\n        $orderBy: [PushNotificationSubscriptionOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        pushNotificationSubscriptionCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...PushNotificationSubscriptionFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getReferenceFlat (\n        $filter: ReferenceFilter\n        $orderBy: [ReferenceOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        referenceCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ReferenceFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getReferenceFlat (\n        $filter: ReferenceFilter\n        $orderBy: [ReferenceOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        referenceCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ReferenceFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getResourceFlat (\n        $filter: ResourceFilter\n        $orderBy: [ResourceOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        resourceCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ResourceFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getResourceFlat (\n        $filter: ResourceFilter\n        $orderBy: [ResourceOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        resourceCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ResourceFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnPageFlat (\n        $filter: RsnPageFilter\n        $orderBy: [RsnPageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnPageFlat (\n        $filter: RsnPageFilter\n        $orderBy: [RsnPageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnPageVectorFlat (\n        $filter: RsnPageVectorFilter\n        $orderBy: [RsnPageVectorOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageVectorCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageVectorFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnPageVectorFlat (\n        $filter: RsnPageVectorFilter\n        $orderBy: [RsnPageVectorOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageVectorCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageVectorFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnUserFlat (\n        $filter: RsnUserFilter\n        $orderBy: [RsnUserOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnUserCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnUserFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnUserFlat (\n        $filter: RsnUserFilter\n        $orderBy: [RsnUserOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnUserCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnUserFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnUserSysdataFlat (\n        $filter: RsnUserSysdataFilter\n        $orderBy: [RsnUserSysdataOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnUserSysdataCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnUserSysdataFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnUserSysdataFlat (\n        $filter: RsnUserSysdataFilter\n        $orderBy: [RsnUserSysdataOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnUserSysdataCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnUserSysdataFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnVecFlat (\n        $filter: RsnVecFilter\n        $orderBy: [RsnVecOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnVecFlat (\n        $filter: RsnVecFilter\n        $orderBy: [RsnVecOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnVecConfigFlat (\n        $filter: RsnVecConfigFilter\n        $orderBy: [RsnVecConfigOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecConfigCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecConfigFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnVecConfigFlat (\n        $filter: RsnVecConfigFilter\n        $orderBy: [RsnVecConfigOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecConfigCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecConfigFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnVecQueueFlat (\n        $filter: RsnVecQueueFilter\n        $orderBy: [RsnVecQueueOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecQueueCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecQueueFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnVecQueueFlat (\n        $filter: RsnVecQueueFilter\n        $orderBy: [RsnVecQueueOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnVecQueueCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnVecQueueFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsncoreTableAbbreviationsFlat (\n        $filter: RsncoreTableAbbreviationsFilter\n        $orderBy: [RsncoreTableAbbreviationsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsncoreTableAbbreviationsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsncoreTableAbbreviationsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsncoreTableAbbreviationsFlat (\n        $filter: RsncoreTableAbbreviationsFilter\n        $orderBy: [RsncoreTableAbbreviationsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsncoreTableAbbreviationsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsncoreTableAbbreviationsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillFlat (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillFlat (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillLinkFlat (\n        $filter: SkillLinkFilter\n        $orderBy: [SkillLinkOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillLinkCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillLinkFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillLinkFlat (\n        $filter: SkillLinkFilter\n        $orderBy: [SkillLinkOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillLinkCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillLinkFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillModuleFlat (\n        $filter: SkillModuleFilter\n        $orderBy: [SkillModuleOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillModuleCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillModuleFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillModuleFlat (\n        $filter: SkillModuleFilter\n        $orderBy: [SkillModuleOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillModuleCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillModuleFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillSetFlat (\n        $filter: SkillSetFilter\n        $orderBy: [SkillSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillSetFlat (\n        $filter: SkillSetFilter\n        $orderBy: [SkillSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillSetSkillFlat (\n        $filter: SkillSetSkillFilter\n        $orderBy: [SkillSetSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillSetSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillSetSkillFlat (\n        $filter: SkillSetSkillFilter\n        $orderBy: [SkillSetSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillSetSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSnipFlat (\n        $filter: SnipFilter\n        $orderBy: [SnipOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        snipCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SnipFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSnipFlat (\n        $filter: SnipFilter\n        $orderBy: [SnipOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        snipCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SnipFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getStripeCustomersFlat (\n        $filter: StripeCustomersFilter\n        $orderBy: [StripeCustomersOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeCustomersCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeCustomersFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getStripeCustomersFlat (\n        $filter: StripeCustomersFilter\n        $orderBy: [StripeCustomersOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeCustomersCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeCustomersFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getStripeProductsFlat (\n        $filter: StripeProductsFilter\n        $orderBy: [StripeProductsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeProductsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeProductsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getStripeProductsFlat (\n        $filter: StripeProductsFilter\n        $orderBy: [StripeProductsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeProductsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeProductsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getStripeSubscriptionsFlat (\n        $filter: StripeSubscriptionsFilter\n        $orderBy: [StripeSubscriptionsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeSubscriptionsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeSubscriptionsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getStripeSubscriptionsFlat (\n        $filter: StripeSubscriptionsFilter\n        $orderBy: [StripeSubscriptionsOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        stripeSubscriptionsCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...StripeSubscriptionsFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserActivityFeedbackFlat (\n        $filter: UserActivityFeedbackFilter\n        $orderBy: [UserActivityFeedbackOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userActivityFeedbackCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserActivityFeedbackFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserActivityFeedbackFlat (\n        $filter: UserActivityFeedbackFilter\n        $orderBy: [UserActivityFeedbackOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userActivityFeedbackCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserActivityFeedbackFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserActivityResultFlat (\n        $filter: UserActivityResultFilter\n        $orderBy: [UserActivityResultOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userActivityResultCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserActivityResultFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserActivityResultFlat (\n        $filter: UserActivityResultFilter\n        $orderBy: [UserActivityResultOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userActivityResultCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserActivityResultFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserHistoryFlat (\n        $filter: UserHistoryFilter\n        $orderBy: [UserHistoryOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userHistoryCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserHistoryFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserHistoryFlat (\n        $filter: UserHistoryFilter\n        $orderBy: [UserHistoryOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userHistoryCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserHistoryFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserLessonResultFlat (\n        $filter: UserLessonResultFilter\n        $orderBy: [UserLessonResultOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userLessonResultCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserLessonResultFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserLessonResultFlat (\n        $filter: UserLessonResultFilter\n        $orderBy: [UserLessonResultOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userLessonResultCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserLessonResultFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserProfileFlat (\n        $filter: UserProfileFilter\n        $orderBy: [UserProfileOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userProfileCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserProfileFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserProfileFlat (\n        $filter: UserProfileFilter\n        $orderBy: [UserProfileOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userProfileCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserProfileFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserSettingFlat (\n        $filter: UserSettingFilter\n        $orderBy: [UserSettingOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSettingCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSettingFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserSettingFlat (\n        $filter: UserSettingFilter\n        $orderBy: [UserSettingOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSettingCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSettingFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserSkillFlat (\n        $filter: UserSkillFilter\n        $orderBy: [UserSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserSkillFlat (\n        $filter: UserSkillFilter\n        $orderBy: [UserSkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSkillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSkillFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserSkillSysdataFlat (\n        $filter: UserSkillSysdataFilter\n        $orderBy: [UserSkillSysdataOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSkillSysdataCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSkillSysdataFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserSkillSysdataFlat (\n        $filter: UserSkillSysdataFilter\n        $orderBy: [UserSkillSysdataOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userSkillSysdataCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserSkillSysdataFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserTourFlat (\n        $filter: UserTourFilter\n        $orderBy: [UserTourOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userTourCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserTourFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserTourFlat (\n        $filter: UserTourFilter\n        $orderBy: [UserTourOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userTourCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserTourFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMemberAuthorizationFlatSlow (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    ...MemberAuthorizationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMemberAuthorizationFlatSlow (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    ...MemberAuthorizationFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getOperationLogFlatSlow (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    ...OperationLogFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getOperationLogFlatSlow (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    ...OperationLogFlatFrag\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMemberAuthorizationFilteredTotalCount (\n        $filter: MemberAuthorizationFilter\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n        ) {\n            totalCount\n        }\n    }\n"): (typeof documents)["\n    query getMemberAuthorizationFilteredTotalCount (\n        $filter: MemberAuthorizationFilter\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n        ) {\n            totalCount\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getOperationLogFilteredTotalCount (\n        $filter: OperationLogFilter\n    ) {\n        operationLogCollection (\n            filter: $filter\n        ) {\n            totalCount\n        }\n    }\n"): (typeof documents)["\n    query getOperationLogFilteredTotalCount (\n        $filter: OperationLogFilter\n    ) {\n        operationLogCollection (\n            filter: $filter\n        ) {\n            totalCount\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMemberAuthorizationIdsOnly (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMemberAuthorizationIdsOnly (\n        $filter: MemberAuthorizationFilter\n        $orderBy: [MemberAuthorizationOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        memberAuthorizationCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getOperationLogIdsOnly (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getOperationLogIdsOnly (\n        $filter: OperationLogFilter\n        $orderBy: [OperationLogOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        operationLogCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getActivityFeedback($filter: UserActivityFeedbackFilter, $orderBy: [UserActivityFeedbackOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    userActivityFeedbackCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n        edges {\n        node {\n            nodeId\n                id\n                value\n                description\n                metadata\n                createdDate\n                updatedDate\n                createdBy\n                updatedBy\n                activity {\n                    nodeId\n                    id\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery getActivityFeedback($filter: UserActivityFeedbackFilter, $orderBy: [UserActivityFeedbackOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    userActivityFeedbackCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n        edges {\n        node {\n            nodeId\n                id\n                value\n                description\n                metadata\n                createdDate\n                updatedDate\n                createdBy\n                updatedBy\n                activity {\n                    nodeId\n                    id\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getActivityResultsDeep($filter: UserActivityResultFilter, $orderBy: [UserActivityResultOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor, $actSkillFilter: ActivitySkillFilter, $actSkillOrderBy: [ActivitySkillOrderBy!], $actSkillFirst: Int, $actSkillLast: Int, $actSkillBefore: Cursor, $actSkillAfter: Cursor) {\n    userActivityResultCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...UserActivityResultFlatFrag \n          activity {\n            nodeId\n            id\n            name\n            type\n            typeConfig\n            source\n            metadata\n            createdDate\n            updatedDate\n            createdBy\n            updatedBy\n            activitySkillCollection(filter: $actSkillFilter, orderBy: $actSkillOrderBy, first: $actSkillFirst, last: $actSkillLast, before: $actSkillBefore, after: $actSkillAfter) {\n              edges {\n                node {\n                  nodeId\n                  id\n                  type\n                  weight\n                  metadata\n                  createdDate\n                  updatedDate\n                  createdBy\n                  updatedBy\n                  skill {\n                    nodeId\n                    id\n                    name\n                    type\n                    metadata\n                    createdDate\n                    updatedDate\n                    createdBy\n                    updatedBy\n                    contextPage\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery getActivityResultsDeep($filter: UserActivityResultFilter, $orderBy: [UserActivityResultOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor, $actSkillFilter: ActivitySkillFilter, $actSkillOrderBy: [ActivitySkillOrderBy!], $actSkillFirst: Int, $actSkillLast: Int, $actSkillBefore: Cursor, $actSkillAfter: Cursor) {\n    userActivityResultCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...UserActivityResultFlatFrag \n          activity {\n            nodeId\n            id\n            name\n            type\n            typeConfig\n            source\n            metadata\n            createdDate\n            updatedDate\n            createdBy\n            updatedBy\n            activitySkillCollection(filter: $actSkillFilter, orderBy: $actSkillOrderBy, first: $actSkillFirst, last: $actSkillLast, before: $actSkillBefore, after: $actSkillAfter) {\n              edges {\n                node {\n                  nodeId\n                  id\n                  type\n                  weight\n                  metadata\n                  createdDate\n                  updatedDate\n                  createdBy\n                  updatedBy\n                  skill {\n                    nodeId\n                    id\n                    name\n                    type\n                    metadata\n                    createdDate\n                    updatedDate\n                    createdBy\n                    updatedBy\n                    contextPage\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getActivitySetWithActivities (\n        $filter: ActivitySetFilter\n        $orderBy: [ActivitySetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterActivity: ActivitySetActivityFilter\n        $orderByActivity: [ActivitySetActivityOrderBy!]\n        $firstActivity: Int\n        $afterActivity: Cursor\n        $lastActivity: Int\n    ) {\n        activitySetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetFlatFrag\n                    activitySetActivityCollection(\n                        filter: $filterActivity\n                        orderBy: $orderByActivity\n                        first: $firstActivity\n                        after: $afterActivity\n                        last: $lastActivity\n                    )\n                    {\n                        edges {\n                            node {\n                                ...ActivitySetActivityFlatFrag\n                                activity {\n                                    ...ActivityFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getActivitySetWithActivities (\n        $filter: ActivitySetFilter\n        $orderBy: [ActivitySetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterActivity: ActivitySetActivityFilter\n        $orderByActivity: [ActivitySetActivityOrderBy!]\n        $firstActivity: Int\n        $afterActivity: Cursor\n        $lastActivity: Int\n    ) {\n        activitySetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...ActivitySetFlatFrag\n                    activitySetActivityCollection(\n                        filter: $filterActivity\n                        orderBy: $orderByActivity\n                        first: $firstActivity\n                        after: $afterActivity\n                        last: $lastActivity\n                    )\n                    {\n                        edges {\n                            node {\n                                ...ActivitySetActivityFlatFrag\n                                activity {\n                                    ...ActivityFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getActivitySkillWithResults($first: Int, $last: Int, $before: Cursor, $after: Cursor, $filter: ActivitySkillFilter, $orderBy: ActivitySkillOrderBy, $userActivityResultCollectionFilter: UserActivityResultFilter) {\n    activitySkillCollection(first: $first, last: $last, before: $before, after: $after, filter: $filter) {\n      edges {\n        node {\n          skill {\n            id\n            name\n            description\n          }\n          activity {\n            ...ActivityFlatFrag\n            userActivityResultCollection(filter: $userActivityResultCollectionFilter) {\n              edges {\n                node {\n                  ...UserActivityResultFlatFrag\n                  activity {\n                    id\n                    type\n                  }\n                }\n              },\n              pageInfo {\n                ...PageInfoFlatFrag\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n    }\n  }\n"): (typeof documents)["\nquery getActivitySkillWithResults($first: Int, $last: Int, $before: Cursor, $after: Cursor, $filter: ActivitySkillFilter, $orderBy: ActivitySkillOrderBy, $userActivityResultCollectionFilter: UserActivityResultFilter) {\n    activitySkillCollection(first: $first, last: $last, before: $before, after: $after, filter: $filter) {\n      edges {\n        node {\n          skill {\n            id\n            name\n            description\n          }\n          activity {\n            ...ActivityFlatFrag\n            userActivityResultCollection(filter: $userActivityResultCollectionFilter) {\n              edges {\n                node {\n                  ...UserActivityResultFlatFrag\n                  activity {\n                    id\n                    type\n                  }\n                }\n              },\n              pageInfo {\n                ...PageInfoFlatFrag\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getBotSetWithBots (\n        $filter: BotSetFilter\n        $orderBy: [BotSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterBot: BotSetBotFilter\n        $orderByBot: [BotSetBotOrderBy!]\n        $firstBot: Int\n        $afterBot: Cursor\n        $lastBot: Int\n    ) {\n        botSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetFlatFrag\n                    botSetBotCollection(\n                        filter: $filterBot\n                        orderBy: $orderByBot\n                        first: $firstBot\n                        after: $afterBot\n                        last: $lastBot\n                    )\n                    {\n                        edges {\n                            node {\n                                ...BotSetBotFlatFrag\n                                bot {\n                                    ...BotFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getBotSetWithBots (\n        $filter: BotSetFilter\n        $orderBy: [BotSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterBot: BotSetBotFilter\n        $orderByBot: [BotSetBotOrderBy!]\n        $firstBot: Int\n        $afterBot: Cursor\n        $lastBot: Int\n    ) {\n        botSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...BotSetFlatFrag\n                    botSetBotCollection(\n                        filter: $filterBot\n                        orderBy: $orderByBot\n                        first: $firstBot\n                        after: $afterBot\n                        last: $lastBot\n                    )\n                    {\n                        edges {\n                            node {\n                                ...BotSetBotFlatFrag\n                                bot {\n                                    ...BotFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getChaptersDeep($filter: ChapterFilter, $orderBy: [ChapterOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n        chapterCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n            edges {\n                node {\n                    ...ChapterFlatFrag\n                    lessonCollection {\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                        edges {\n                            node {\n                                ...LessonFlatFrag\n                                lessonActivityCollection {\n                                    edges {\n                                        node {\n                                            ...LessonActivityFlatFrag\n                                            activity {\n                                                ...ActivityFlatFrag\n                                                userActivityResultCollection {\n                                                    edges {\n                                                        node {\n                                                            ...UserActivityResultFlatFrag\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                rsnUser {\n                                    ...RsnUserFlatFrag\n                                }\n                            }\n                        }\n                    }\n                    rsnUser {\n                        ...RsnUserFlatFrag\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getChaptersDeep($filter: ChapterFilter, $orderBy: [ChapterOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n        chapterCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n            edges {\n                node {\n                    ...ChapterFlatFrag\n                    lessonCollection {\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                        edges {\n                            node {\n                                ...LessonFlatFrag\n                                lessonActivityCollection {\n                                    edges {\n                                        node {\n                                            ...LessonActivityFlatFrag\n                                            activity {\n                                                ...ActivityFlatFrag\n                                                userActivityResultCollection {\n                                                    edges {\n                                                        node {\n                                                            ...UserActivityResultFlatFrag\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                rsnUser {\n                                    ...RsnUserFlatFrag\n                                }\n                            }\n                        }\n                    }\n                    rsnUser {\n                        ...RsnUserFlatFrag\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getLessonsDeep($filter: LessonFilter, $orderBy: [LessonOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n        lessonCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n            edges {\n                node {\n                    ...LessonFlatFrag\n                    lessonActivityCollection {\n                        edges {\n                            node {\n                                ...LessonActivityFlatFrag\n                                activity {\n                                    ...ActivityFlatFrag\n                                    userActivityResultCollection {\n                                        edges {\n                                            node {\n                                                ...UserActivityResultFlatFrag\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    rsnUser {\n                        ...RsnUserFlatFrag\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getLessonsDeep($filter: LessonFilter, $orderBy: [LessonOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n        lessonCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n            edges {\n                node {\n                    ...LessonFlatFrag\n                    lessonActivityCollection {\n                        edges {\n                            node {\n                                ...LessonActivityFlatFrag\n                                activity {\n                                    ...ActivityFlatFrag\n                                    userActivityResultCollection {\n                                        edges {\n                                            node {\n                                                ...UserActivityResultFlatFrag\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    rsnUser {\n                        ...RsnUserFlatFrag\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getUserLessonResultsDeep($filter: UserLessonResultFilter, $orderBy: [UserLessonResultOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    userLessonResultCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...UserLessonResultFlatFrag\n          lesson {\n            ...LessonFlatFrag\n            lessonActivityCollection {\n                edges {\n                    node {\n                        ...LessonActivityFlatFrag\n                        activity {\n                            ...ActivityFlatFrag\n                            userActivityResultCollection {\n                                edges {\n                                    node {\n                                        ...UserActivityResultFlatFrag\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n          rsnUser {\n            ...RsnUserFlatFrag\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery getUserLessonResultsDeep($filter: UserLessonResultFilter, $orderBy: [UserLessonResultOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    userLessonResultCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...UserLessonResultFlatFrag\n          lesson {\n            ...LessonFlatFrag\n            lessonActivityCollection {\n                edges {\n                    node {\n                        ...LessonActivityFlatFrag\n                        activity {\n                            ...ActivityFlatFrag\n                            userActivityResultCollection {\n                                edges {\n                                    node {\n                                        ...UserActivityResultFlatFrag\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n          rsnUser {\n            ...RsnUserFlatFrag\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getLessonSessionDeep($filter: LessonSessionFilter, $orderBy: [LessonSessionOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    lessonSessionCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...LessonSessionFlatFrag\n          lesson {\n            ...LessonFlatFrag\n            lessonActivityCollection {\n                edges {\n                    node {\n                        ...LessonActivityFlatFrag\n                        activity {\n                            ...ActivityFlatFrag\n                            userActivityResultCollection {\n                                edges {\n                                    node {\n                                        ...UserActivityResultFlatFrag\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n          rsnUser {\n            ...RsnUserFlatFrag\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery getLessonSessionDeep($filter: LessonSessionFilter, $orderBy: [LessonSessionOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    lessonSessionCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...LessonSessionFlatFrag\n          lesson {\n            ...LessonFlatFrag\n            lessonActivityCollection {\n                edges {\n                    node {\n                        ...LessonActivityFlatFrag\n                        activity {\n                            ...ActivityFlatFrag\n                            userActivityResultCollection {\n                                edges {\n                                    node {\n                                        ...UserActivityResultFlatFrag\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n          rsnUser {\n            ...RsnUserFlatFrag\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getMemauthDeep($filter: MemauthFilter, $orderBy: [MemauthOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    memauthCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...MemauthFlatFrag\n          principalUser {\n            ...RsnUserFlatFrag\n          }\n          principalBot {\n            ...BotFlatFrag\n          }\n          principalGroup {\n            ...GroupFlatFrag\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery getMemauthDeep($filter: MemauthFilter, $orderBy: [MemauthOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    memauthCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...MemauthFlatFrag\n          principalUser {\n            ...RsnUserFlatFrag\n          }\n          principalBot {\n            ...BotFlatFrag\n          }\n          principalGroup {\n            ...GroupFlatFrag\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getMemberAuthorizationDeep($filter: MemberAuthorizationFilter, $orderBy: [MemberAuthorizationOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    memberAuthorizationCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...MemberAuthorizationFlatFrag\n          bot {\n            ...BotFlatFrag\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery getMemberAuthorizationDeep($filter: MemberAuthorizationFilter, $orderBy: [MemberAuthorizationOrderBy!], $first: Int, $last: Int, $before: Cursor, $after: Cursor) {\n    memberAuthorizationCollection(filter: $filter, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {\n      pageInfo {\n        ...PageInfoFlatFrag\n      }\n      edges {\n        node {\n          ...MemberAuthorizationFlatFrag\n          bot {\n            ...BotFlatFrag\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRsnPageAndDirectChildren (\n        $filter: RsnPageFilter\n        $orderBy: [RsnPageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageFlatFrag\n                    rsnPageCollection {\n                        edges {\n                            node {\n                                ...RsnPageFlatFrag\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRsnPageAndDirectChildren (\n        $filter: RsnPageFilter\n        $orderBy: [RsnPageOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        rsnPageCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...RsnPageFlatFrag\n                    rsnPageCollection {\n                        edges {\n                            node {\n                                ...RsnPageFlatFrag\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillDefault (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    userSkillCollection {\n                        edges {\n                            node {\n                                ...UserSkillFlatFrag\n                            }\n                        }\n                    }\n                    downstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                upstream {\n                                    \n                                    ...SkillFlatFrag\n                                    \n                                }\n                            }\n                        }\n                    }\n                    upstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                downstream {\n                                    \n                                     ...SkillFlatFrag\n                                        \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillDefault (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    userSkillCollection {\n                        edges {\n                            node {\n                                ...UserSkillFlatFrag\n                            }\n                        }\n                    }\n                    downstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                upstream {\n                                    \n                                    ...SkillFlatFrag\n                                    \n                                }\n                            }\n                        }\n                    }\n                    upstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                downstream {\n                                    \n                                     ...SkillFlatFrag\n                                        \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getResourceDeep (\n    $filter: ResourceFilter\n    $orderBy: [ResourceOrderBy!]\n    $first: Int\n    $after: Cursor\n    $last: Int\n    $before: Cursor\n) {\n    resourceCollection (\n        filter: $filter\n        orderBy: $orderBy\n        first: $first\n        after: $after\n        last: $last\n        before: $before\n    ) {\n        edges {\n            node {\n                ...ResourceFlatFrag\n                parentPodcast {\n                    ...PodcastFlatFrag\n                }\n                parentSkill {\n                    ...SkillFlatFrag\n                }\n                childSnip {\n                    ...SnipFlatFrag\n                }\n                childPage {\n                    ...RsnPageFlatFrag\n                }\n            }\n        }\n        pageInfo {\n            ...PageInfoFlatFrag\n        }\n    }\n}\n"): (typeof documents)["\nquery getResourceDeep (\n    $filter: ResourceFilter\n    $orderBy: [ResourceOrderBy!]\n    $first: Int\n    $after: Cursor\n    $last: Int\n    $before: Cursor\n) {\n    resourceCollection (\n        filter: $filter\n        orderBy: $orderBy\n        first: $first\n        after: $after\n        last: $last\n        before: $before\n    ) {\n        edges {\n            node {\n                ...ResourceFlatFrag\n                parentPodcast {\n                    ...PodcastFlatFrag\n                }\n                parentSkill {\n                    ...SkillFlatFrag\n                }\n                childSnip {\n                    ...SnipFlatFrag\n                }\n                childPage {\n                    ...RsnPageFlatFrag\n                }\n            }\n        }\n        pageInfo {\n            ...PageInfoFlatFrag\n        }\n    }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillSetWithSkills (\n        $filter: SkillSetFilter\n        $orderBy: [SkillSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterSkillSetSkill: SkillSetSkillFilter\n        $afterSkillSetSkill: Cursor\n        $beforeSkillSetSkill: Cursor\n        $lastSkillSetSkill: Int\n        $firstSkillSetSkill: Int\n        $orderBySkillSetSkill: [SkillSetSkillOrderBy!]\n    ) {\n        skillSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetFlatFrag\n                    skillSetSkillCollection (\n                        filter: $filterSkillSetSkill\n                        orderBy: $orderBySkillSetSkill\n                        first: $firstSkillSetSkill\n                        after: $afterSkillSetSkill\n                        last: $lastSkillSetSkill\n                        before: $beforeSkillSetSkill\n                    ) {\n                        edges {\n                            node {\n                                ...SkillSetSkillFlatFrag\n                                skill {\n                                    ...SkillFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillSetWithSkills (\n        $filter: SkillSetFilter\n        $orderBy: [SkillSetOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n        $filterSkillSetSkill: SkillSetSkillFilter\n        $afterSkillSetSkill: Cursor\n        $beforeSkillSetSkill: Cursor\n        $lastSkillSetSkill: Int\n        $firstSkillSetSkill: Int\n        $orderBySkillSetSkill: [SkillSetSkillOrderBy!]\n    ) {\n        skillSetCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillSetFlatFrag\n                    skillSetSkillCollection (\n                        filter: $filterSkillSetSkill\n                        orderBy: $orderBySkillSetSkill\n                        first: $firstSkillSetSkill\n                        after: $afterSkillSetSkill\n                        last: $lastSkillSetSkill\n                        before: $beforeSkillSetSkill\n                    ) {\n                        edges {\n                            node {\n                                ...SkillSetSkillFlatFrag\n                                skill {\n                                    ...SkillFlatFrag\n                                }\n                            }\n                        }\n                        pageInfo {\n                            ...PageInfoFlatFrag\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillUpstreamDeep (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    downstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                upstream {\n                                    ...SkillFlatFrag\n                                    downstreamOf {\n                                        edges {\n                                            node {\n                                                ...SkillLinkFlatFrag\n                                                upstream {\n                                                    ...SkillFlatFrag\n                                                    downstreamOf {\n                                                        edges {\n                                                            node {\n                                                                ...SkillLinkFlatFrag\n                                                                upstream {\n                                                                    ...SkillFlatFrag\n                                                                    downstreamOf {\n                                                                        edges {\n                                                                            node {\n                                                                                ...SkillLinkFlatFrag\n                                                                                upstream {\n                                                                                    ...SkillFlatFrag\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillUpstreamDeep (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    downstreamOf {\n                        edges {\n                            node {\n                                ...SkillLinkFlatFrag\n                                upstream {\n                                    ...SkillFlatFrag\n                                    downstreamOf {\n                                        edges {\n                                            node {\n                                                ...SkillLinkFlatFrag\n                                                upstream {\n                                                    ...SkillFlatFrag\n                                                    downstreamOf {\n                                                        edges {\n                                                            node {\n                                                                ...SkillLinkFlatFrag\n                                                                upstream {\n                                                                    ...SkillFlatFrag\n                                                                    downstreamOf {\n                                                                        edges {\n                                                                            node {\n                                                                                ...SkillLinkFlatFrag\n                                                                                upstream {\n                                                                                    ...SkillFlatFrag\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSkillUserSkill (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    userSkillCollection {\n                        edges {\n                            node {\n                                ...UserSkillFlatFrag\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getSkillUserSkill (\n        $filter: SkillFilter\n        $orderBy: [SkillOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        skillCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...SkillFlatFrag\n                    userSkillCollection {\n                        edges {\n                            node {\n                                ...UserSkillFlatFrag\n                            }\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserHistoryDeep (\n        $filter: UserHistoryFilter\n        $orderBy: [UserHistoryOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userHistoryCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserHistoryFlatFrag\n                    skill {\n                        ...SkillFlatFrag\n                    }\n                    podcast {\n                        ...PodcastFlatFrag\n                    }\n                    course {\n                        ...CourseFlatFrag\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserHistoryDeep (\n        $filter: UserHistoryFilter\n        $orderBy: [UserHistoryOrderBy!]\n        $first: Int\n        $after: Cursor\n        $last: Int\n        $before: Cursor\n    ) {\n        userHistoryCollection (\n            filter: $filter\n            orderBy: $orderBy\n            first: $first\n            after: $after\n            last: $last\n            before: $before\n        ) {\n            edges {\n                node {\n                    ...UserHistoryFlatFrag\n                    skill {\n                        ...SkillFlatFrag\n                    }\n                    podcast {\n                        ...PodcastFlatFrag\n                    }\n                    course {\n                        ...CourseFlatFrag\n                    }\n                }\n            }\n            pageInfo {\n                ...PageInfoFlatFrag\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;