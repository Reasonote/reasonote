"use client";
import _ from "lodash";

// The same as the MessageWithAuthor type, but the author can be undefined
type MessageWithOptionalAuthor = {
  id: string;
  content: string;
  role: "user" | "assistant" | "system" | "function";
  author?: {
    id: string;
    description: string;
    name: string;
    prompt: string;
    avatarUrl: string;
  };
  /**
   * If present, this message is a function call.
   */
  function_call?: {
    /**
     *
     */
    name: string;
    /**
     * JSON-encoded arguments, as generated by the model.
     */
    arguments?: string;
  };
};

type MessageWithType = MessageWithOptionalAuthor & { type: "message" };

type ChatEvent =
  | MessageWithType
  | { type: "enter"; authorName: string }
  | { type: "leave"; authorName: string }
  | { type: "bot-interrupted"; cause?: string };

function isMessageWithType(m: ChatEvent): m is MessageWithType {
  return m.type === "message";
}

type MessageDeltaAppend = {
  type: "MessageDeltaAppend";
  content: string;
  rsnMsgId: string;
};

type MessageDelta = MessageDeltaAppend;

type DocComment = {
  line: number;
  comment: string;
};

export type DocSuggestion = {
  startLine: number;
  endLine?: number | null;
  changeText: string;
};